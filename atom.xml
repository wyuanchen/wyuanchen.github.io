<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wYuan&#39;s Blog</title>
  <subtitle>Enjoy the world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-18T08:51:24.925Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wenyuan Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/02/18/WebSocket%E6%8F%A1%E6%89%8B/"/>
    <id>http://yoursite.com/2017/02/18/WebSocket握手/</id>
    <published>2017-02-18T08:51:24.925Z</published>
    <updated>2017-02-18T08:51:24.925Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>title: WebSocket握手<br>date: 2016-07-20 16:09:52<br>categories: 网络协议 </p>
<h2 id="tags-WebSocket"><a href="#tags-WebSocket" class="headerlink" title="tags: WebSocket "></a>tags: WebSocket </h2><p>WebSocket是基于HTTP协议的，具体建立连接的过程如下：   </p>
<ol>
<li>TCP三次握手建立一个连接    </li>
<li>发生HTTP协议的握手请求，请求把协议升级为WebSocket       </li>
<li>服务端接收到握手请求后，返回HTTP响应允许协议升级为WebSocket       </li>
<li>客户端和服务端在该连接中以后都用WebSocket协议发生信息和接受信息      </li>
<li>关闭TCP连接    </li>
</ol>
<h3 id="WebSocket握手请求"><a href="#WebSocket握手请求" class="headerlink" title="WebSocket握手请求"></a>WebSocket握手请求</h3><ul>
<li>GET /chat HTTP/1.1  </li>
<li>Host: server.example.com  </li>
<li>Upgrade: websocket  </li>
<li>Connection: Upgrade  </li>
<li>Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==  </li>
<li>Sec-WebSocket-Protocol: chat, superchat  </li>
<li>Sec-WebSocket-Version: 13  </li>
<li>Origin: <a href="http://example.com" target="_blank" rel="external">http://example.com</a>  </li>
</ul>
<h4 id="相关字段解释"><a href="#相关字段解释" class="headerlink" title="相关字段解释"></a>相关字段解释</h4><ul>
<li>Upgrade: websocket   </li>
<li>Connection: Upgrade    </li>
</ul>
<p>告诉服务器我请求用WebSocket协议       </p>
<ul>
<li>Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==  </li>
<li>Sec-WebSocket-Protocol: chat, superchat  </li>
<li>Sec-WebSocket-Version: 13    </li>
</ul>
<ul>
<li><code>Sec-WebSocket-Key</code> 是一个Base64 encode的值，这个是浏览器随机生成的<br>服务端并不需要将这个值进行反编码，只需要将客户端传来的这个值首先去除首尾的空白，然后和一段固定的 GUID RFC4122 字符串进行连接，固定的 GUID 字符串为 258EAFA5-E914-47DA-95CA-C5AB0DC85B11。连接后的结果使用 SHA-1（160数位）FIPS.180-3 进行一个哈希操作，对哈希操作的结果，采用 base64 进行编码，然后作为服务端响应握手的一部分返回给浏览器。    </li>
</ul>
<p>一个具体的例子：</p>
<ol>
<li>客户端握手请求中的 <code>Sec-WebSocket-Key</code> 头字段的值为 <code>dGhlIHNhbXBsZSBub25jZQ==</code>   </li>
<li>服务端在解析了握手请求的头字段之后，得到 <code>Sec-WebSocket-Key</code> 字段的内容为 <code>dGhlIHNhbXBsZSBub25jZQ==</code>，注意前后没有空白     </li>
<li>将 <code>dGhlIHNhbXBsZSBub25jZQ==</code> 和一段固定的 GUID 字符串进行连接，新的字符串为 <code>dGhlIHNhbXBsZSBub25jZQ==258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>。   </li>
<li>使用 SHA-1 哈希算法对上一步中新的字符串进行哈希。得到哈希后的内容为（使用 16 进制的数表示每一个字节中内容）：<code>0xb3 0x7a 0x4f 0x2c 0xc0 0x62 0x4f 0x16 0x90 0xf6 0x46 0x06 0xcf 0x38 0x59 0x45 0xb2 0xbe 0xc4 0xea</code>     </li>
<li>对上一步得到的哈希后的字节，使用 <code>base64</code> 编码，得到最后的字符串<code>s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</code>       </li>
<li>最后得到的字符串，需要放到服务端响应客户端握手的头字段 <code>Sec-WebSocket-Accept</code> 中。        </li>
</ol>
<ul>
<li><code>Sec_WebSocket-Protocol</code> 是一个用户定义的字符串，用来区分同URL下，不同的服务所需要的子协议。   </li>
<li><code>Sec-WebSocket-Version</code> 是告诉服务器所使用的Websocket Draft（协议版本）   </li>
</ul>
<h3 id="WebSocket握手的响应"><a href="#WebSocket握手的响应" class="headerlink" title="WebSocket握手的响应"></a>WebSocket握手的响应</h3><ul>
<li>HTTP/1.1 101 Switching Protocols</li>
<li>Upgrade: websocket</li>
<li>Connection: Upgrade</li>
<li>Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=</li>
<li>Sec-WebSocket-Protocol: chat</li>
</ul>
<p>由服务端告诉客户端即将升级的是WebSocket协议。<br>然后，<code>Sec-WebSocket-Accept</code> 这个则是经过服务器确认，并且加密过后的 <code>Sec-WebSocket-Key</code>。<br><code>Sec-WebSocket-Protocol</code> 则是表示最终使用的协议     </p>
<p><strong>只有握手还是走HTTP结束，在握手结束后的通信全都是走WebSocket协议，不是HTTP了。</strong>           </p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: WebSocket握手&lt;br&gt;date: 2016-07-20 16:09:52&lt;br&gt;categories: 网络协议 &lt;/p&gt;
&lt;h2 id=&quot;tags-WebSocket&quot;&gt;&lt;a href=&quot;#tags-WebSocket&quot; class=&quot;he
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lucene检索笔记</title>
    <link href="http://yoursite.com/2017/01/28/Lucene%E6%A3%80%E7%B4%A2%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/28/Lucene检索笔记/</id>
    <published>2017-01-28T03:04:45.000Z</published>
    <updated>2017-01-28T03:05:33.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="把Document映射为Object类"><a href="#把Document映射为Object类" class="headerlink" title="把Document映射为Object类"></a>把Document映射为Object类</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Doc2ObjectMapper</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将多个Document映射成一个对象</div><div class="line">     * <span class="doctag">@param</span> documents</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    Object mapDocumentsToObject(<span class="keyword">List</span>&lt;Document&gt; documents);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将单个Document映射成一个对象</div><div class="line">     * <span class="doctag">@param</span> document</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    Object mapDocumentToObject(Document document);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="普通检索"><a href="#普通检索" class="headerlink" title="普通检索"></a>普通检索</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchHelper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Analyzer analyzer;</div><div class="line">    <span class="keyword">private</span> String indexDirUrl;</div><div class="line">    <span class="keyword">private</span> Directory directory;</div><div class="line">    <span class="keyword">private</span> IndexReader reader;</div><div class="line">    <span class="keyword">private</span> IndexSearcher indexSearcher;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchHelper</span><span class="params">(String indexDirUrl,Analyzer analyzer)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.indexDirUrl=indexDirUrl;</div><div class="line">        <span class="keyword">this</span>.analyzer=analyzer;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            init();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchHelper</span><span class="params">(String indexDirUrl)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>(indexDirUrl, <span class="keyword">new</span> SmartChineseAnalyzer());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        directory=FSDirectory.open(Paths.get(indexDirUrl));</div><div class="line">        reader= DirectoryReader.open(directory);</div><div class="line">        indexSearcher=<span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询并且返回经过映射后的对象List</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> offset</div><div class="line">     * <span class="doctag">@param</span> topN</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">search</span><span class="params">(Query query,<span class="keyword">int</span> offset,<span class="keyword">int</span> topN,Sort sort,Doc2ObjectMapper doc2ObjectMapper)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        TopDocs topDocs=<span class="keyword">null</span>;</div><div class="line">        ScoreDoc after=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(offset&gt;<span class="number">0</span>)&#123;</div><div class="line">            TopDocs docsBefore=indexSearcher.search(query,offset,sort);</div><div class="line">            ScoreDoc[] scoreDocs=docsBefore.scoreDocs;</div><div class="line">            <span class="keyword">if</span>(scoreDocs.length&gt;<span class="number">0</span>)</div><div class="line">                after=scoreDocs[scoreDocs.length-<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        topDocs=indexSearcher.searchAfter(after,query,topN,sort);</div><div class="line">        <span class="keyword">return</span> creatObjectList(topDocs.scoreDocs,doc2ObjectMapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 没有Sort的search</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> offset</div><div class="line">     * <span class="doctag">@param</span> topN</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">search</span><span class="params">(Query query,<span class="keyword">int</span> offset,<span class="keyword">int</span> topN,Doc2ObjectMapper doc2ObjectMapper)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        TopDocs topDocs=<span class="keyword">null</span>;</div><div class="line">        ScoreDoc after=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(offset&gt;<span class="number">0</span>)&#123;</div><div class="line">            TopDocs docsBefore=indexSearcher.search(query,offset);</div><div class="line">            ScoreDoc[] scoreDocs=docsBefore.scoreDocs;</div><div class="line">            <span class="keyword">if</span>(scoreDocs.length&gt;<span class="number">0</span>)</div><div class="line">                after=scoreDocs[scoreDocs.length-<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        topDocs=indexSearcher.searchAfter(after,query,topN);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> creatObjectList(topDocs.scoreDocs,doc2ObjectMapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取查询到的总数量</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(Query query)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> indexSearcher.search(query,<span class="number">1</span>).totalHits;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;Object&gt; <span class="title">creatObjectList</span><span class="params">(ScoreDoc[] scoreDocs,Doc2ObjectMapper doc2ObjectMapper)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        List&lt;Object&gt; result=<span class="keyword">new</span> LinkedList&lt;Object&gt;();</div><div class="line">        <span class="keyword">for</span>(ScoreDoc scoreDoc:scoreDocs)&#123;</div><div class="line">            result.add(doc2ObjectMapper.mapDocumentToObject(indexSearcher.doc(scoreDoc.doc)));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基于Group-by的检索"><a href="#基于Group-by的检索" class="headerlink" title="基于Group by的检索"></a>基于Group by的检索</h2><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用Group by进行搜索</div><div class="line"> * Created by yuan on 1/8/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupSearcherHelper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Analyzer analyzer;</div><div class="line">    <span class="keyword">private</span> String indexDirUrl;</div><div class="line">    <span class="keyword">private</span> Directory directory;</div><div class="line">    <span class="keyword">private</span> IndexReader reader;</div><div class="line">    <span class="keyword">private</span> IndexSearcher indexSearcher;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> maxCacheRAMMB;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isCacheScores=<span class="keyword">true</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> ifFillFields=<span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> DEFAULT_MAX_CACHE_RAM_MB=<span class="number">4.0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> GroupSearcherHelper(String indexDirUrl,Analyzer analyzer,<span class="keyword">double</span> maxCacheRAMMB)&#123;</div><div class="line">        this.indexDirUrl=indexDirUrl;</div><div class="line">        this.analyzer=analyzer;</div><div class="line">        this.maxCacheRAMMB=maxCacheRAMMB;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            init();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> GroupSearcherHelper(String indexDirUrl,Analyzer analyzer)&#123;</div><div class="line">        this(indexDirUrl,analyzer,DEFAULT_MAX_CACHE_RAM_MB);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> GroupSearcherHelper(String indexDirUrl)&#123;</div><div class="line">        this(indexDirUrl,<span class="keyword">new</span> SmartChineseAnalyzer());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> void init() throws IOException &#123;</div><div class="line">        directory= FSDirectory.open(Paths.get(indexDirUrl));</div><div class="line">        reader= DirectoryReader.open(directory);</div><div class="line">        indexSearcher=<span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 搜索返回文档分组</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> groupFieldName</div><div class="line">     * <span class="doctag">@param</span> groupSort</div><div class="line">     * <span class="doctag">@param</span> withinGroupSort</div><div class="line">     * <span class="doctag">@param</span> groupOffset</div><div class="line">     * <span class="doctag">@param</span> topNGroups</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Document&gt;&gt; searchDocument(Query query, String groupFieldName, Sort groupSort, Sort withinGroupSort, <span class="keyword">int</span> groupOffset, <span class="keyword">int</span> topNGroups) throws IOException &#123;</div><div class="line">        <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Document&gt;&gt; result=<span class="keyword">new</span> LinkedList&lt;<span class="keyword">List</span>&lt;Document&gt;&gt;();</div><div class="line">        TopGroups&lt;BytesRef&gt; topGroupsResult=searchHelp(query,groupFieldName,groupSort,withinGroupSort,groupOffset,topNGroups);</div><div class="line">        <span class="keyword">if</span>(topGroupsResult==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        GroupDocs&lt;BytesRef&gt;[] groupDocses=topGroupsResult.groups;</div><div class="line">        <span class="keyword">for</span>(GroupDocs&lt;BytesRef&gt; groupDocs:groupDocses)&#123;</div><div class="line">            <span class="keyword">List</span>&lt;Document&gt; subList=<span class="keyword">new</span> LinkedList&lt;Document&gt;();</div><div class="line">            <span class="keyword">for</span>(ScoreDoc scoreDoc:groupDocs.scoreDocs)&#123;</div><div class="line">                Document document=indexSearcher.doc(scoreDoc.doc);</div><div class="line">                subList.add(document);</div><div class="line">            &#125;</div><div class="line">            result.add(subList);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用默认Sort的searchDocument</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> groupFieldName</div><div class="line">     * <span class="doctag">@param</span> groupOffset</div><div class="line">     * <span class="doctag">@param</span> topNGroups</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Document&gt;&gt; searchDocument(Query query, String groupFieldName, <span class="keyword">int</span> groupOffset, <span class="keyword">int</span> topNGroups) throws IOException &#123;</div><div class="line">        <span class="keyword">return</span> searchDocument(query,groupFieldName,Sort.INDEXORDER,Sort.INDEXORDER,groupOffset,topNGroups);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分组搜索并且将每一组Document映射成一个对象并且返回所有对象组成的List</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> groupFieldName</div><div class="line">     * <span class="doctag">@param</span> groupSort</div><div class="line">     * <span class="doctag">@param</span> withinGroupSort</div><div class="line">     * <span class="doctag">@param</span> groupOffset</div><div class="line">     * <span class="doctag">@param</span> topNGroups</div><div class="line">     * <span class="doctag">@param</span> mapper</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">List</span>&lt;Object&gt; search(Query query, String groupFieldName, Sort groupSort, Sort withinGroupSort, <span class="keyword">int</span> groupOffset, <span class="keyword">int</span> topNGroups, Doc2ObjectMapper mapper) throws IOException &#123;</div><div class="line">        <span class="keyword">List</span>&lt;Object&gt; result=<span class="keyword">new</span> LinkedList&lt;Object&gt;();</div><div class="line">        <span class="keyword">List</span>&lt;<span class="keyword">List</span>&lt;Document&gt;&gt; documentsList=searchDocument(query,groupFieldName,groupSort,withinGroupSort,groupOffset,topNGroups);</div><div class="line">        <span class="keyword">if</span>(documentsList.size()==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        Object o=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">List</span>&lt;Document&gt; documents:documentsList)&#123;</div><div class="line">            o=mapper.mapDocumentsToObject(documents);</div><div class="line">            result.add(o);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用默认Sort的search</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> groupFieldName</div><div class="line">     * <span class="doctag">@param</span> groupOffset</div><div class="line">     * <span class="doctag">@param</span> topNGroups</div><div class="line">     * <span class="doctag">@param</span> mapper</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">List</span>&lt;Object&gt; search(Query query, String groupFieldName,  <span class="keyword">int</span> groupOffset, <span class="keyword">int</span> topNGroups, Doc2ObjectMapper mapper) throws IOException &#123;</div><div class="line">        <span class="keyword">return</span> search(query,groupFieldName,Sort.INDEXORDER,Sort.INDEXORDER,groupOffset,topNGroups,mapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    TopGroups&lt;BytesRef&gt; searchHelp(Query query, String groupFieldName, Sort groupSort, Sort withinGroupSort, <span class="keyword">int</span> groupOffset, <span class="keyword">int</span> topNGroups) throws IOException &#123;</div><div class="line">        TermFirstPassGroupingCollector c1=<span class="keyword">new</span> TermFirstPassGroupingCollector(groupFieldName,groupSort,groupOffset+topNGroups);</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 将TermFirstPassGroupingCollector包装成CachingCollector，为第一次查询加缓存，避免重复评分</div><div class="line">         *  CachingCollector就是用来为结果收集器添加缓存功能的</div><div class="line">         */</div><div class="line">        CachingCollector cachingCollector=CachingCollector.create(c1,isCacheScores,maxCacheRAMMB);</div><div class="line">        <span class="comment">//开始第一次分组统计</span></div><div class="line">        indexSearcher.search(query,cachingCollector);</div><div class="line"></div><div class="line">        <span class="comment">/**第一次查询返回的结果集TopGroups中只有分组域值以及每组总的评分，至于每个分组里有几条，分别哪些索引文档，则需要进行第二次查询获取*/</span></div><div class="line">        Collection&lt;SearchGroup&lt;BytesRef&gt;&gt; topGroups=c1.getTopGroups(groupOffset,ifFillFields);</div><div class="line">        <span class="keyword">if</span>(topGroups==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Collector secondPassCollector=<span class="keyword">null</span>;</div><div class="line">        <span class="comment">// 是否获取每个分组内部每个索引的评分</span></div><div class="line">        <span class="keyword">boolean</span> ifGetScores=<span class="keyword">true</span>;</div><div class="line">        <span class="comment">// 是否计算最大评分</span></div><div class="line">        <span class="keyword">boolean</span> ifGetMaxScores=<span class="keyword">true</span>;</div><div class="line">        <span class="keyword">int</span> maxDocsPerGroup=<span class="number">10</span>;</div><div class="line">        <span class="comment">// 如果需要对Lucene的score进行修正，则需要重载TermSecondPassGroupingCollector</span></div><div class="line">        TermSecondPassGroupingCollector c2=<span class="keyword">new</span> TermSecondPassGroupingCollector(groupFieldName,topGroups,</div><div class="line">                groupSort,withinGroupSort,</div><div class="line">                maxDocsPerGroup,ifGetScores,ifGetMaxScores,ifFillFields);</div><div class="line"></div><div class="line">        secondPassCollector=c2;</div><div class="line"></div><div class="line">        <span class="comment">/**如果第一次查询已经加了缓存，则直接从缓存中取*/</span></div><div class="line">        <span class="keyword">if</span>(cachingCollector.isCached())&#123;</div><div class="line">            <span class="comment">//第二次查询直接从缓存中取</span></div><div class="line">            cachingCollector.replay(secondPassCollector);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">// 开始第二次分组查询</span></div><div class="line">            indexSearcher.search(query,secondPassCollector);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        TopGroups&lt;BytesRef&gt; topGroupsResult=c2.getTopGroups(<span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> topGroupsResult;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询符合条件的分组总数量</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> groupFieldName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> getGroupSum(Query query,String groupFieldName) throws <span class="keyword">Exception</span>&#123;</div><div class="line">        TermFirstPassGroupingCollector c1=<span class="keyword">new</span> TermFirstPassGroupingCollector(groupFieldName,Sort.INDEXORDER,<span class="number">1</span>);</div><div class="line">        TermAllGroupsCollector termAllGroupsCollector=<span class="keyword">new</span> TermAllGroupsCollector(groupFieldName);</div><div class="line">        Collector collector=  MultiCollector.wrap(c1,termAllGroupsCollector);</div><div class="line">        indexSearcher.search(query,collector);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> termAllGroupsCollector.getGroupCount();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;把Document映射为Object类&quot;&gt;&lt;a href=&quot;#把Document映射为Object类&quot; class=&quot;headerlink&quot; title=&quot;把Document映射为Object类&quot;&gt;&lt;/a&gt;把Document映射为Object类&lt;/h2&gt;&lt;figu
    
    </summary>
    
      <category term="后台" scheme="http://yoursite.com/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="全文检索" scheme="http://yoursite.com/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
      <category term="Lucene" scheme="http://yoursite.com/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>Lucene建立索引笔记</title>
    <link href="http://yoursite.com/2017/01/28/Lucene%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/28/Lucene建立索引笔记/</id>
    <published>2017-01-28T03:03:52.000Z</published>
    <updated>2017-01-28T03:04:29.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在项目中需要用到全文检索，根据搜索关键字来返回满足条件的商品，同时需要满足一定的商品类别和商城代码，刚好学下lucene来初步简单实现下这个需求。</p>
<h2 id="连接Mysql数据库和导出数据"><a href="#连接Mysql数据库和导出数据" class="headerlink" title="连接Mysql数据库和导出数据"></a>连接Mysql数据库和导出数据</h2><p>首先我自己先封装一个很简单的数据库操作工具类<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class DBUtil &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> url;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> user;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> password;</div><div class="line">    <span class="keyword">private</span> Connection conn;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> DBUtil(<span class="keyword">String</span> url,<span class="keyword">String</span> user,<span class="keyword">String</span> password) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        <span class="keyword">this</span>.url=url;</div><div class="line">        <span class="keyword">this</span>.user=user;</div><div class="line">        <span class="keyword">this</span>.password=password;</div><div class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回一个数据库连接</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> Connection getConnection()&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span>(conn==<span class="keyword">null</span>)</div><div class="line">                conn= DriverManager.getConnection(url,user,password);</div><div class="line">            <span class="keyword">return</span> conn;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *关闭数据库连接</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> closeConnection()&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">                conn.close();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          conn=<span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="创建Docement"><a href="#创建Docement" class="headerlink" title="创建Docement"></a>创建Docement</h2><p>首先我们得先建立一个Docement，然后往Document加入Field,最后将Document写入索引<br>下面我把创建索引抽象成一个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DocumentCreator</span> </span>&#123;</div><div class="line">    <span class="function">Document <span class="title">createDocument</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后是一个具体的实现<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchGoodDocumentCreator</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">DocumentCreator</span></span> </span>&#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> Document createDocument(ResultSet rs) throws Exception &#123;</div><div class="line">        Document doc=<span class="keyword">new</span> <span class="type">Document</span>();</div><div class="line">        doc.add(<span class="keyword">new</span> <span class="type">StoredField</span>(<span class="string">"id"</span>,rs.getString(<span class="string">"id"</span>)));</div><div class="line">        doc.add(<span class="keyword">new</span> <span class="type">TextField</span>(<span class="string">"title"</span>,rs.getString(<span class="string">"title"</span>), Field.Store.YES));</div><div class="line">        doc.add(<span class="keyword">new</span> <span class="type">StringField</span>(<span class="string">"type"</span>,rs.getString(<span class="string">"type"</span>), Field.Store.YES));</div><div class="line">        doc.add(<span class="keyword">new</span> <span class="type">StringField</span>(<span class="string">"mall"</span>,rs.getString(<span class="string">"mall"</span>), Field.Store.YES));</div><div class="line">        doc.add(<span class="keyword">new</span> <span class="type">DoubleField</span>(<span class="string">"rank_score"</span>,rs.getDouble(<span class="string">"rank_score"</span>), Field.Store.YES));</div><div class="line">        doc.add(<span class="keyword">new</span> <span class="type">DoubleDocValuesField</span>(<span class="string">"rank_score"</span>,rs.getDouble(<span class="string">"rank_score"</span>)));</div><div class="line">        doc.add(<span class="keyword">new</span> <span class="type">StoredField</span>(<span class="string">"urls"</span>,rs.getString(<span class="string">"urls"</span>)));</div><div class="line">        doc.add(<span class="keyword">new</span> <span class="type">StoredField</span>(<span class="string">"pic_urls"</span>,rs.getString(<span class="string">"pic_urls"</span>)));</div><div class="line">        doc.add(<span class="keyword">new</span> <span class="type">StoredField</span>(<span class="string">"comment_num"</span>,rs.getString(<span class="string">"comment_num"</span>)));</div><div class="line"></div><div class="line">        doc.add(<span class="keyword">new</span> <span class="type">SortedDocValuesField</span>(<span class="string">"id"</span>,<span class="keyword">new</span> <span class="type">BytesRef</span>(rs.getString(<span class="string">"id"</span>))));</div><div class="line"></div><div class="line">        <span class="keyword">return</span> doc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于Field的选择有以下几种常用的情况   </p>
<ul>
<li><code>StringField</code>: 该Field不会被分词，所以在建立完索引后想要搜索它则必须完全符合才行，因为我在搜索商品的时候<code>type</code>字段和<code>mall</code>字段都是明确的，所以我使用<code>StringField</code>，并且考虑到到时候搜索返回的Document结果也依然能够拿到当时存储的<code>type</code>和<code>mall</code>，所以我在创建该字段的时候还需声明<code>Field.Store.YES</code>。</li>
<li><code>TextField</code>：它与<code>StringField</code>的区别是它会先经过Analyzer进行分词后再建立索引，因为我是通过商品名字的关键字来搜索的，所以在创建<code>title</code>的Field时用TextField。如果需要存储原来还未经过分词的原子段以便在搜索得到的结果中能够获取原子段的话，就加多<code>Field.Store.YES</code>。</li>
<li><code>DoubleField</code>，<code>IntField</code>，<code>LongField</code>等：只索引不存储，在这里。如果需要存储原来还未经过分词的原子段以便在搜索得到的结果中能够获取原子段的话，就加多<code>Field.Store.YES</code>。</li>
<li><code>DoubleDocValuesField</code>：用于对<code>double</code>字段排序，在这里我需要根据商品评分来对已经检索得到的商品集合进行排序。并且我还需要在搜到的商品中仍然能保存着<code>rankScore</code>字段，所以我还对<code>rankScore</code>用了<code>DoubleField</code>。</li>
<li><code>StoredField</code>： 只存储不建立索引。因为我不需要通过搜索<code>urls</code>,<code>pic_urls</code>和<code>comment_num</code>来获得商品，所以只需要存储就行了。</li>
</ul>
<h2 id="通过IndexWriter写入Document"><a href="#通过IndexWriter写入Document" class="headerlink" title="通过IndexWriter写入Document"></a>通过IndexWriter写入Document</h2><p>主要的步骤：</p>
<ol>
<li>创建<code>Analyzer</code></li>
<li>创建<code>IndexWriterConfig</code></li>
<li>创建<code>Directory</code></li>
<li>创建<code>IndexWriter</code> </li>
<li>用<code>IndexWriter</code>把创建好的<code>Document</code>依次写入<code>Directory</code></li>
</ol>
<p>因为项目中商品的名字是中文，所以在建立索引和检索中都需要中文分词，所以使用了<code>IKAnalyzer</code>或者<code>SmartChineseAnalyzer</code>等支持中文分词的<code>Analyzer</code>。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexBuilder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line">    <span class="keyword">private</span> String user;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="keyword">private</span> String sql;</div><div class="line">    <span class="keyword">private</span> DBUtil dbUtil;</div><div class="line">    <span class="keyword">private</span> Analyzer analyzer=<span class="keyword">new</span> SmartChineseAnalyzer();</div><div class="line">    <span class="keyword">private</span> String indexDirUrl ;</div><div class="line">    <span class="keyword">private</span> DocumentCreator documentCreator;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setAnalyzer</span><span class="params">(Analyzer analyzer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.analyzer = analyzer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setDbUtil</span><span class="params">(DBUtil dbUtil)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dbUtil = dbUtil;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setDocumentCreator</span><span class="params">(DocumentCreator documentCreator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.documentCreator = documentCreator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setIndexDirUrl</span><span class="params">(String indexDirUrl)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.indexDirUrl = indexDirUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setSql</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sql = sql;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setUser</span><span class="params">(String user)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.user = user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IndexBuilder</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从数据库查询获取结果集</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> ClassNotFoundException</div><div class="line">     * <span class="doctag">@throws</span> SQLException</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function">ResultSet <span class="title">getResultSet</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</div><div class="line">        dbUtil=<span class="keyword">new</span> DBUtil(url,user,password);</div><div class="line">        Connection conn=dbUtil.getConnection();</div><div class="line">        Statement statement=conn.createStatement();</div><div class="line">        <span class="function"><span class="keyword">return</span> statement.<span class="title">executeQuery</span><span class="params">(sql)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 结束工作</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">complete</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(dbUtil!=<span class="keyword">null</span>)</div><div class="line">            dbUtil.closeConnection();</div><div class="line">        dbUtil=<span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 启动建立索引</div><div class="line">     * <span class="doctag">@throws</span> ClassNotFoundException</div><div class="line">     * <span class="doctag">@throws</span> SQLException</div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"luceneIndexBuilder start!"</span>);</div><div class="line">        <span class="keyword">long</span> startTime=System.currentTimeMillis();</div><div class="line"></div><div class="line">        ResultSet rs=getResultSet();</div><div class="line"></div><div class="line">        IndexWriterConfig indexWriterConfig = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE);</div><div class="line">        Directory directory= FSDirectory.open(Paths.get(indexDirUrl));</div><div class="line">        IndexWriter indexWriter=<span class="keyword">new</span> IndexWriter(directory,indexWriterConfig);</div><div class="line"></div><div class="line">        Document doc=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>(rs.next())&#123;</div><div class="line">            doc=documentCreator.createDocument(rs);</div><div class="line">            <span class="comment">//加入Document</span></div><div class="line">            indexWriter.addDocument(doc);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//记得调用close()才能确保索引真正写入</span></div><div class="line">        indexWriter.close();</div><div class="line">        complete();</div><div class="line">        <span class="keyword">long</span> endTime=System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"luceneIndexBuilder complete"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">    @Test</div><div class="line">    <span class="keyword">public</span> void testStart() throws Exception &#123;</div><div class="line">        System.out.println(<span class="string">"---testStrat()----"</span>);</div><div class="line">        <span class="keyword">String</span> url=<span class="string">"jdbc:mysql://123.12.123.12:3306/example_db?useUnicode=true&amp;characterEncoding=utf8"</span>;</div><div class="line">        <span class="keyword">String</span> user=<span class="string">"root"</span>;</div><div class="line">        <span class="keyword">String</span> password=<span class="string">"123456"</span>;</div><div class="line">        <span class="keyword">String</span> sql=<span class="string">"select id,title,type, mall,goods_rank.rank_score from goods;"</span>;</div><div class="line">        <span class="keyword">String</span> indexDirUrl = <span class="keyword">new</span> <span class="type">String</span>(<span class="string">"./indexDir/"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//SmartChineseAnalyzer和IKAnalyzer都支持中文分词</span></div><div class="line">        Analyzer analyzer=<span class="keyword">new</span> <span class="type">SmartChineseAnalyzer</span>();</div><div class="line"><span class="comment">//        Analyzer analyzer=new IKAnalyzer();</span></div><div class="line">        DocumentCreator documentCreator=<span class="keyword">new</span> <span class="type">SearchGoodDocumentCreator</span>();</div><div class="line"></div><div class="line">        <span class="comment">//配置indexBuilder</span></div><div class="line">        IndexBuilder indexBuilder=<span class="keyword">new</span> <span class="type">IndexBuilder</span>();</div><div class="line">        indexBuilder.setUrl(url);</div><div class="line">        indexBuilder.setUser(user);</div><div class="line">        indexBuilder.setPassword(password);</div><div class="line">        indexBuilder.setSql(sql);</div><div class="line">        indexBuilder.setAnalyzer(analyzer);</div><div class="line">        indexBuilder.setIndexDirUrl(indexDirUrl);</div><div class="line">        indexBuilder.setDocumentCreator(documentCreator);</div><div class="line"></div><div class="line">        indexBuilder.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前在项目中需要用到全文检索，根据搜索关键字来返回满足条件的商品，同时需要满足一定的商品类别和商城代码，刚好学下lucene来初步简单实现下
    
    </summary>
    
      <category term="后台" scheme="http://yoursite.com/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="全文检索" scheme="http://yoursite.com/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
      <category term="Lucene" scheme="http://yoursite.com/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>HTTP常见Content-Type比较</title>
    <link href="http://yoursite.com/2017/01/28/HTTP%E5%B8%B8%E8%A7%81Content-Type%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2017/01/28/HTTP常见Content-Type比较/</id>
    <published>2017-01-28T03:02:37.000Z</published>
    <updated>2017-01-28T03:03:32.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-application-x-www-form-urlencoded"><a href="#1-application-x-www-form-urlencoded" class="headerlink" title="1.   application/x-www-form-urlencoded"></a>1.   application/x-www-form-urlencoded</h2><p>最常见的 <code>POST</code> 提交数据的方式了。浏览器的原生 form 表单，如果不设置 <code>enctype</code> 属性，那么最终就会以 <code>application/x-www-form-urlencoded</code>方式提交数据。<br>传递的key/val会经过URL转码，所以如果传递的参数存在中文或者特殊字符需要注意。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//例子</span></div><div class="line"><span class="comment">//b=曹,a=1</span></div><div class="line"></div><div class="line"><span class="keyword">POST</span>  HTTP/1.1(CRLF)</div><div class="line">Host: www.example.com(CRLF)</div><div class="line">Content-<span class="keyword">Type</span>: application/x-www-<span class="keyword">form</span>-urlencoded(CRLF)</div><div class="line">Cache-Control: <span class="keyword">no</span>-cache(CRLF)</div><div class="line">(CRLF)</div><div class="line">b=%E6%9B%B9&amp;a=1(CRLF)</div><div class="line"><span class="comment">//这里b参数的值"曹"因为URL转码变成其他的字符串了</span></div></pre></td></tr></table></figure></p>
<h2 id="2-text-xml"><a href="#2-text-xml" class="headerlink" title="2. text/xml"></a>2. text/xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//例子</div><div class="line"></div><div class="line">POST http://www.example.com HTTP/1.1(CRLF) </div><div class="line">Content-Type: text/xml(CRLF)</div><div class="line">(CRLF)</div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>123<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">params</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>homeway<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>22<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">age</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">params</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3-application-json"><a href="#3-application-json" class="headerlink" title="3.application/json"></a>3.application/json</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//例子</span></div><div class="line"><span class="comment">//传递json</span></div><div class="line"></div><div class="line">POST  HTTP/<span class="number">1.1</span>(CRLF)</div><div class="line"><span class="string">Host:</span> www.example.com(CRLF)</div><div class="line">Content-<span class="string">Type:</span> application/json(CRLF)</div><div class="line">Cache-<span class="string">Control:</span> no-cache(CRLF)</div><div class="line">Content-<span class="string">Length:</span> <span class="number">24</span>(CRLF)</div><div class="line">(CRLF)</div><div class="line">&#123;</div><div class="line">    <span class="string">"a"</span>:<span class="number">1</span>,</div><div class="line">    <span class="string">"b"</span>:<span class="string">"hello"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-multipart-form-data"><a href="#4-multipart-form-data" class="headerlink" title="4. multipart/form-data"></a>4. multipart/form-data</h2><p>使用表单上传文件时，必须让 <code>form</code> 的 <code>enctyped</code> 等于这个值。<br>并且Http协议会使用boundary来分割上传的参数<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//例子</div><div class="line">//a="曹",file1是一个文件</div><div class="line"></div><div class="line">POST  HTTP/1.1(CRLF)</div><div class="line">Host: www.example.com(CRLF)</div><div class="line">//注意data;和boundary之间有一个空格,并且<span class="comment">----WebKitFormBoundary7MA4YWxkTrZu0gW是可以自定义的</span></div><div class="line">Content-Type: multipart/form-data; boundary=<span class="comment">----WebKitFormBoundary7MA4YWxkTrZu0gW(CRLF)</span></div><div class="line"><span class="keyword">Cache</span>-Control: <span class="keyword">no</span>-<span class="keyword">cache</span>(CRLF)</div><div class="line"><span class="keyword">Content</span>-<span class="keyword">Length</span>: <span class="number">728</span></div><div class="line">(CRLF)</div><div class="line">//如果有<span class="keyword">Content</span>-<span class="keyword">Length</span>的话，则<span class="keyword">Content</span>-<span class="keyword">Length</span>指下面所有的字节总数，包括boundary</div><div class="line">//这里用自定义的boundary来进行分割,注意会在头部加多<span class="string">"--"</span></div><div class="line"><span class="comment">------WebKitFormBoundary7MA4YWxkTrZu0gW(CRLF)</span></div><div class="line"><span class="keyword">Content</span>-Disposition: <span class="keyword">form</span>-<span class="keyword">data</span>; name="a"(CRLF)</div><div class="line">(CRLF)</div><div class="line">曹(CRLF)</div><div class="line"><span class="comment">------WebKitFormBoundary7MA4YWxkTrZu0gW(CRLF)</span></div><div class="line">Content-Disposition: form-data; name="file1"; filename="1.jpg"</div><div class="line">Content-Type: application/octet-stream(CRLF)</div><div class="line">(CRLF)</div><div class="line">//此处是参数file1 对应的文件的二进制数据</div><div class="line">[654dfasalk;af&amp;6…](CRLF)</div><div class="line">//最后一个boundary会分别在头部和尾部加多"<span class="comment">--"</span></div><div class="line"><span class="comment">------WebKitFormBoundary7MA4YWxkTrZu0gW--(CRLF)</span></div></pre></td></tr></table></figure></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment"></span></div><div class="line">//多个文件同时上传</div><div class="line"></div><div class="line">POST  HTTP/<span class="number">1.1</span>(<span class="literal">CRLF</span>)</div><div class="line">Host: www.example.com(<span class="literal">CRLF</span>)<span class="comment"></span></div><div class="line">//注意data;和boundary之间有一个空格,并且----WebKitFormBoundary7MA4YWxkTrZu0gW是可以自定义的</div><div class="line">Content-Type: multipart/form-data; boundary=<span class="comment">---------------------------418888951815204591197893077</span></div><div class="line">Cache-Control: no-cache(<span class="literal">CRLF</span>)</div><div class="line">Content-Length: <span class="number">12138</span>(<span class="literal">CRLF</span>)</div><div class="line">(<span class="literal">CRLF</span>)</div><div class="line"><span class="comment">-----------------------------418888951815204591197893077(CRLF)</span><span class="comment"></span></div><div class="line">// 文件1的头部boundary</div><div class="line">Content-Disposition: form-data; name=<span class="string">"userfile[]"</span>; filename=<span class="string">"文件1.md"</span>(<span class="literal">CRLF</span>)</div><div class="line">Content-Type: <span class="keyword">text</span>/markdown(<span class="literal">CRLF</span>)</div><div class="line">(<span class="literal">CRLF</span>)<span class="comment"></span></div><div class="line">// 文件1内容开始<span class="comment"></span></div><div class="line">// ...<span class="comment"></span></div><div class="line">// 文件1内容结束</div><div class="line"><span class="comment">-----------------------------418888951815204591197893077(CRLF)</span><span class="comment"></span></div><div class="line">// 文件2的头部boundary</div><div class="line">Content-Disposition: form-data; name=<span class="string">"userfile[]"</span>; filename=<span class="string">"文件2"</span>(<span class="literal">CRLF</span>)</div><div class="line">Content-Type: application/octet-stream(<span class="literal">CRLF</span>)</div><div class="line">(<span class="literal">CRLF</span>)<span class="comment"></span></div><div class="line">// 文件2内容开始<span class="comment"></span></div><div class="line">// ...<span class="comment"></span></div><div class="line">// 文件2内容结束</div><div class="line"><span class="comment">-----------------------------418888951815204591197893077(CRLF)</span><span class="comment"></span></div><div class="line">// 文件3的头部boundary</div><div class="line">Content-Disposition: form-data; name=<span class="string">"userfile[]"</span>; filename=<span class="string">"文件3"</span>(<span class="literal">CRLF</span>)</div><div class="line">Content-Type: application/octet-stream(<span class="literal">CRLF</span>)</div><div class="line">(<span class="literal">CRLF</span>)<span class="comment"></span></div><div class="line">// 文件3内容开始<span class="comment"></span></div><div class="line">// ...<span class="comment"></span></div><div class="line">// 文件3内容结束</div><div class="line"><span class="comment">-----------------------------418888951815204591197893077(CRLF)</span><span class="comment"></span></div><div class="line">// 参数username的头部boundary</div><div class="line">Content-Disposition: form-data; name=<span class="string">"username"</span>(<span class="literal">CRLF</span>)</div><div class="line">(<span class="literal">CRLF</span>)</div><div class="line">zhangsan</div><div class="line"><span class="comment">-----------------------------418888951815204591197893077(CRLF)</span><span class="comment"></span></div><div class="line">// 参数password的头部boundary</div><div class="line">Content-Disposition: form-data; name=<span class="string">"password"</span>(<span class="literal">CRLF</span>)</div><div class="line">(<span class="literal">CRLF</span>)</div><div class="line">zhangxx</div><div class="line"><span class="comment">-----------------------------418888951815204591197893077-- </span><span class="comment"></span></div><div class="line">// 尾部boundary，表示结束</div></pre></td></tr></table></figure>
<p><strong>注意</strong><br><strong><code>(CRLF)</code>指<code>\r\n</code></strong></p>
<p>附上其他一些博客<br><a href="https://callmeli.github.io/2016/08/22/http%E5%8D%8F%E8%AE%AE/" target="_blank" rel="external">http协议</a><br><a href="http://www.jianshu.com/p/abaf583f1183" target="_blank" rel="external">HTTP协议详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-application-x-www-form-urlencoded&quot;&gt;&lt;a href=&quot;#1-application-x-www-form-urlencoded&quot; class=&quot;headerlink&quot; title=&quot;1.   application/x-www
    
    </summary>
    
      <category term="网络协议" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="Http" scheme="http://yoursite.com/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>Lucene学习笔记</title>
    <link href="http://yoursite.com/2017/01/28/Lucene%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/28/Lucene学习笔记/</id>
    <published>2017-01-28T03:01:09.000Z</published>
    <updated>2017-01-28T03:02:10.063Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="http://iamyida.iteye.com/category/335240" target="_blank" rel="external">http://iamyida.iteye.com/category/335240</a></li>
<li><a href="https://yq.aliyun.com/users/1666458718707678?spm=5176.8091938.0.0.lfLyd9" target="_blank" rel="external">https://yq.aliyun.com/users/1666458718707678?spm=5176.8091938.0.0.lfLyd9</a></li>
<li><a href="http://blog.csdn.net/wuyinggui10000/article/category/3173543/1" target="_blank" rel="external">http://blog.csdn.net/wuyinggui10000/article/category/3173543/1</a></li>
<li><a href="http://codepub.cn/2016/05/20/Lucene-6-0-in-action-2-All-kinds-of-Field-and-sort-operations/" target="_blank" rel="external">Lucene 6.0 实战（2）-各种Field及排序操作</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://iamyida.iteye.com/category/335240&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://iamyida.iteye.com/category/335240&lt;/a&gt;&lt;/li&gt;
    
    </summary>
    
      <category term="后台" scheme="http://yoursite.com/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="全文检索" scheme="http://yoursite.com/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
      <category term="Lucene" scheme="http://yoursite.com/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>Lucene-Field.Store的Field.Index属性笔记</title>
    <link href="http://yoursite.com/2017/01/28/Lucene-Field-Store%E7%9A%84Field-Index%E5%B1%9E%E6%80%A7%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/28/Lucene-Field-Store的Field-Index属性笔记/</id>
    <published>2017-01-28T02:58:54.000Z</published>
    <updated>2017-01-28T03:00:35.447Z</updated>
    
    <content type="html"><![CDATA[<p>Field有两个属性可选：存储和索引。<br><strong>通过存储属性你可以控制是否对这个Field进行存储；</strong><br><strong>通过索引属性你可以控制是否对该Field进行索引。</strong></p>
<p>这两个属性的正确组合很重要。 </p>
<table>
<thead>
<tr>
<th style="text-align:center">Field.Index</th>
<th style="text-align:center">Field.Store</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TOKENIZED</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">被分词索引且存储</td>
</tr>
<tr>
<td style="text-align:center">TOKENIZED</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">被分词索引但不存储</td>
</tr>
<tr>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">这是不能被搜索的，它只是被搜索内容的附属物。如URL等</td>
</tr>
<tr>
<td style="text-align:center">UN_TOKENIZED</td>
<td style="text-align:center">YES/NO</td>
<td style="text-align:center">不被分词，它作为一个整体被搜索,搜一部分是搜不出来的</td>
</tr>
<tr>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">没有这种用法</td>
</tr>
</tbody>
</table>
<pre><code>Field.Store.YES:存储字段值（未分词前的字段值） 
Field.Store.NO:不存储,存储与索引没有关系 
Field.Store.COMPRESS:压缩存储,用于长文本或二进制，但性能受损 
Field.Index.ANALYZED:分词建索引 
Field.Index.ANALYZED_NO_NORMS:分词建索引，但是Field的值不像通常那样被保存，而是只取一个byte，这样节约存储空间 
Field.Index.NOT_ANALYZED:不分词且索引 
Field.Index.NOT_ANALYZED_NO_NORMS:不分词建索引，Field的值去一个byte保存 
TermVector表示文档的条目（由一个Document和Field定位）和它们在当前文档中所出现的次数 
Field.TermVector.YES:为每个文档（Document）存储该字段的TermVector 
Field.TermVector.NO:不存储TermVector 
Field.TermVector.WITH_POSITIONS:存储位置 
Field.TermVector.WITH_OFFSETS:存储偏移量 
Field.TermVector.WITH_POSITIONS_OFFSETS:存储位置和偏移量
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Field有两个属性可选：存储和索引。&lt;br&gt;&lt;strong&gt;通过存储属性你可以控制是否对这个Field进行存储；&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;通过索引属性你可以控制是否对该Field进行索引。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这两个属性的正确组合很重要。 &lt;/
    
    </summary>
    
      <category term="后台" scheme="http://yoursite.com/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="全文检索" scheme="http://yoursite.com/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
      <category term="Lucene" scheme="http://yoursite.com/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>Idea配置JUnit4单元测试笔记</title>
    <link href="http://yoursite.com/2017/01/28/Idea%E9%85%8D%E7%BD%AEJUnit4%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/28/Idea配置JUnit4单元测试笔记/</id>
    <published>2017-01-28T02:57:05.000Z</published>
    <updated>2017-01-28T02:58:34.467Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>pom.xml文件配置</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后创建一个和src同级别的文件夹叫test(逻辑代码放src里，测试代码放test里是个好习惯)。<br>接着在IntelliJ IDEA里还要把这个test文件夹要设置成测试文件的根目录,右键选中 <code>Mark Directory As -&gt; Test Sources Root</code>。<br>然后创建测试类(包名一致，类名在要测试的类名后加上Test也是个好习惯)。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexBuilderTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStart</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"---testStrat()----"</span>);</div><div class="line">        IndexBuilder indexBuilder=<span class="keyword">new</span> IndexBuilder();</div><div class="line">        indexBuilder.start();</div><div class="line"><span class="comment">//        assertEquals(true,false);</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后选中MathTest类ctrl + shift + F10运行一下。</p>
<p>JUnit4利用JDK5的新特性Annotation，使用注解来定义测试规则。<br>这里讲一下以下几个常用的注解：</p>
<pre><code>@Test：把一个方法标记为测试方法
@Before：每一个测试方法执行前自动调用一次
@After：每一个测试方法执行完自动调用一次
@BeforeClass：所有测试方法执行前执行一次，在测试类还没有实例化就已经被加载，所以用static修饰
@AfterClass：所有测试方法执行完执行一次，在测试类还没有实例化就已经被加载，所以用static修饰
@Ignore：暂不执行该测试方法
</code></pre><p><a href="http://www.jianshu.com/p/7088822e21a3" target="_blank" rel="external">另外一个比较详细的入门教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;pom.xml文件配置&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;li
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="单元测试" scheme="http://yoursite.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>简易弹幕</title>
    <link href="http://yoursite.com/2017/01/28/%E7%AE%80%E6%98%93%E5%BC%B9%E5%B9%95/"/>
    <id>http://yoursite.com/2017/01/28/简易弹幕/</id>
    <published>2017-01-28T02:54:47.000Z</published>
    <updated>2017-01-28T02:56:03.666Z</updated>
    
    <content type="html"><![CDATA[<p>先放入效果图</p>
<p>实现环节</p>
<ol>
<li>前端实现将把信息发送到后台和接收后台发送过来的信息并且将其发射弹幕到浏览器上</li>
<li>通过websocket与每个服务端连接，当接收到来自任何一个前端发来的信息，就将该信息群发至所有的客户端(也就是浏览器)</li>
</ol>
<p><strong>前端代码：</strong></p>
<figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span></div><div class="line">pageEncoding=<span class="string">"UTF-8"</span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Keywords"</span> <span class="attr">content</span>=<span class="string">"danmu"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>弹幕网站<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">body &#123;</div><div class="line">background: url(images/01.jpg); no-repeat top center;</div><div class="line">font-size: 12px;</div><div class="line">font-family: "微软雅黑";</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">* &#123;</div><div class="line">margin: 0;</div><div class="line">padding: 0;</div><div class="line">&#125;</div><div class="line">/* screen start*/</div><div class="line">.screen &#123;</div><div class="line">width: 300px;</div><div class="line">height: 100px;</div><div class="line">background: #669900;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.dm &#123;</div><div class="line">width: 100%;</div><div class="line">height: 100%;</div><div class="line">position: absolute;</div><div class="line">top: 0;</div><div class="line">left: 0;</div><div class="line">display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.dm .d_screen .d_del &#123;</div><div class="line">width: 38px;</div><div class="line">height: 38px;</div><div class="line">background: #600;</div><div class="line">display: block;</div><div class="line">text-align: center;</div><div class="line">line-height: 38px;</div><div class="line">text-decoration: none;</div><div class="line">font-size: 20px;</div><div class="line">color: #fff;</div><div class="line">border-radius: 19px;</div><div class="line">border: 1px solid #fff;</div><div class="line">z-index: 2;</div><div class="line">position: absolute;</div><div class="line">right: 20px;</div><div class="line">top: 20px;</div><div class="line">outline: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.dm .d_screen .d_del:hover &#123;</div><div class="line">background: #F00;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.dm .d_screen .d_mask &#123;</div><div class="line">width: 100%;</div><div class="line">height: 100%;</div><div class="line">background: #000;</div><div class="line">position: absolute;</div><div class="line">top: 0;</div><div class="line">left: 0;</div><div class="line">opacity: 0.6;</div><div class="line">filter: alpha(opacity = 60);</div><div class="line">z-index: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.dm .d_screen .d_show &#123;</div><div class="line">position: relative;</div><div class="line">z-index: 2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.dm .d_screen .d_show div &#123;</div><div class="line">font-size: 26px;</div><div class="line">line-height: 36px;</div><div class="line">font-weight: 500;</div><div class="line">position: absolute;</div><div class="line">top: 76px;</div><div class="line">left: 10;</div><div class="line">color: #fff;</div><div class="line">&#125;</div><div class="line">/*end screen*/</div><div class="line"></div><div class="line"></div><div class="line">/*send start*/</div><div class="line">.send &#123;</div><div class="line">width: 100%;</div><div class="line">height: 76px;</div><div class="line">position: absolute;</div><div class="line">bottom: 0;</div><div class="line">left: 0;</div><div class="line">border: 1px solid red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.send .s_filter &#123;</div><div class="line">width: 100%;</div><div class="line">height: 76px;</div><div class="line">background: #000;</div><div class="line">position: absolute;</div><div class="line">bottom: 0;</div><div class="line">left: 0;</div><div class="line">opacity: 0.6;</div><div class="line">filter: alpha(opacity = 60);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.send  .s_con &#123;</div><div class="line">width: 100%;</div><div class="line">height: 76px;</div><div class="line">position: absolute;</div><div class="line">top: 0;</div><div class="line">left: 0;</div><div class="line">z-index: 2;</div><div class="line">text-align: center;</div><div class="line">line-height: 76px;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.send .s_con .s_text &#123;</div><div class="line">width: 800px;</div><div class="line">height: 36px;</div><div class="line">border: 0;</div><div class="line">border-radius: 6px 0 0 6px;</div><div class="line">outline: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.send .s_con .s_submit &#123;</div><div class="line">width: 100px;</div><div class="line">height: 36px;</div><div class="line">border-radius: 0 6px 6px 0;</div><div class="line">outline: none;</div><div class="line">font-size: 14px;</div><div class="line">color: #fff;</div><div class="line">background: #65c33d;</div><div class="line">font-family: "微软雅黑";</div><div class="line">cursor: pointer;</div><div class="line">border: 1px solid #5bba32;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.send .s_con .s_submit:hover &#123;</div><div class="line">background: #3eaf0e;</div><div class="line">&#125;</div><div class="line">/*end send*/</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"startDm"</span>&gt;</span>开启弹幕<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- dm start --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dm"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- d_screen start --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d_screen"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"d_del"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d_mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d_show"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- end d_screen --&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- send start --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"send"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s_filter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s_con"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"s_text"</span> /&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span></span></div><div class="line"><span class="attr">value</span>=<span class="string">"发表评论"</span> <span class="attr">class</span>=<span class="string">"s_submit"</span> <span class="attr">id</span>=<span class="string">"btn"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- end send --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- end dm--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></div><div class="line"><span class="attr">src</span>=<span class="string">"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.0.js"</span>&gt;<span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"websocket.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">$(<span class="string">"#startDm,.d_del"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">$(<span class="string">"#startDm,.dm"</span>).toggle(<span class="number">1000</span>);</div><div class="line"><span class="comment">//init_screen();</span></div><div class="line">&#125;);</div><div class="line">$(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">send();</div><div class="line">&#125;);</div><div class="line">$(<span class="string">".s_text"</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> code = <span class="built_in">window</span>.event.keyCode;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (code == <span class="number">13</span>)<span class="comment">//回车键按下时，输出到弹幕</span></div><div class="line"></div><div class="line"></div><div class="line">&#123;</div><div class="line">send();</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">launch</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> _height = $(<span class="built_in">window</span>).height();</div><div class="line"><span class="keyword">var</span> _left = $(<span class="built_in">window</span>).width() - $(<span class="string">"#"</span>+index).width();</div><div class="line"><span class="keyword">var</span> time=<span class="number">10000</span>;</div><div class="line"><span class="keyword">if</span>(index%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">time=<span class="number">20000</span>;</div><div class="line">_top+=<span class="number">80</span>;</div><div class="line"><span class="keyword">if</span>(_top&gt;_height<span class="number">-100</span>)</div><div class="line">_top=<span class="number">80</span>;</div><div class="line">$(<span class="string">"#"</span>+index).css(&#123;</div><div class="line"><span class="attr">left</span>:_left,</div><div class="line"><span class="attr">top</span>:_top,</div><div class="line"><span class="attr">color</span>:getRandomColor()</div><div class="line"></div><div class="line">&#125;);</div><div class="line">$(<span class="string">"#"</span>+index).animate(&#123;</div><div class="line"><span class="attr">left</span>:<span class="string">"-"</span>+_left+<span class="string">"px"</span>&#125;,</div><div class="line">time,</div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div><div class="line">index++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* //初始化弹幕</span></div><div class="line">function init_screen() &#123;</div><div class="line">var _top = 0;</div><div class="line">var _height = $(window).height();</div><div class="line">$(".d_show").find("div").show().each(function() &#123;</div><div class="line">var _left = $(window).width() - $(this).width();</div><div class="line">var time=10000;</div><div class="line">if($(this).index()%2==0)</div><div class="line">time=20000;</div><div class="line">_top+=80;</div><div class="line">if(_top&gt;_height-100)</div><div class="line">_top=80;</div><div class="line">$(this).css(&#123;</div><div class="line">left:_left,</div><div class="line">top:_top,</div><div class="line">color:getRandomColor()</div><div class="line"></div><div class="line">&#125;);</div><div class="line">$(this).animate(&#123;</div><div class="line">left:"-"+_left+"px"&#125;,</div><div class="line">time,</div><div class="line">function()&#123;&#125;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;);</div><div class="line">&#125; */</div><div class="line"></div><div class="line"><span class="comment">//随机获取颜色值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">'#'</span> + (<span class="function"><span class="keyword">function</span>(<span class="params">h</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span> - h.length).join(<span class="string">"0"</span>) + h</div><div class="line">&#125;)((<span class="built_in">Math</span>.random() * <span class="number">0x1000000</span> &lt;&lt; <span class="number">0</span>).toString(<span class="number">16</span>))</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>websocket.js文件代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> websocket=<span class="literal">null</span>;</div><div class="line"><span class="keyword">var</span> _top=<span class="number">80</span>;</div><div class="line"><span class="keyword">var</span> index=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> host=<span class="built_in">window</span>.location.host;</div><div class="line"><span class="comment">//判断当前浏览器是否支持WebSocket</span></div><div class="line"><span class="keyword">if</span>(<span class="string">'WebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</div><div class="line">websocket=<span class="keyword">new</span> WebSocket(<span class="string">"ws://"</span>+host+<span class="string">"/Danmu/websocket"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">alert(<span class="string">"Not Support WebSocket!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//连接发生错误的回调方法</span></div><div class="line">websocket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    setMessageInnerHTML(<span class="string">"error"</span>);</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="comment">//连接成功建立的回调方法</span></div><div class="line">websocket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    setMessageInnerHTML(<span class="string">"open"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//接收到消息的回调方法</span></div><div class="line">websocket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    setMessageInnerHTML(event.data);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//连接关闭的回调方法</span></div><div class="line">websocket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    setMessageInnerHTML(<span class="string">"close"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></div><div class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    websocket.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//将消息显示在网页上</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setMessageInnerHTML</span>(<span class="params">innerHTML</span>)</span>&#123;</div><div class="line">$(<span class="string">".d_show"</span>).append(<span class="string">"&lt;div id='"</span>+index+<span class="string">"'&gt;"</span>+ innerHTML + <span class="string">"&lt;/div&gt;"</span>);</div><div class="line">launch();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//发送消息</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//var message = document.getElementById('text').value;</span></div><div class="line">    <span class="keyword">var</span> message = $(<span class="string">".s_text"</span>).val();</div><div class="line">    $(<span class="string">".s_text"</span>).val(<span class="string">""</span>);</div><div class="line">    websocket.send(message);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>服务端代码</strong></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.danmu.websocket;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.websocket.OnClose;</div><div class="line"><span class="keyword">import</span> javax.websocket.OnError;</div><div class="line"><span class="keyword">import</span> javax.websocket.OnMessage;</div><div class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</div><div class="line"><span class="keyword">import</span> javax.websocket.Session;</div><div class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//每个客户端连接成功的时候在后台都会创建一个相应的MyWebsocket类</span></div><div class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/websocket"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebsocket</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。若要实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;MyWebsocket&gt; websocketPools=<span class="keyword">new</span> CopyOnWriteArraySet&lt;MyWebsocket&gt;();</div><div class="line"></div><div class="line"><span class="comment">//与某个客户端的连接会话，需要通过它来给客户端发送数据</span></div><div class="line"><span class="keyword">private</span> Session session;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">     * 连接建立成功调用的方法</div><div class="line">     * <span class="doctag">@param</span> session  可选的参数。session为与某个客户端的连接会话，需要通过它来给客户端发送数据</div><div class="line">     */</div><div class="line"><span class="meta">@OnOpen</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">this</span>.session=session;</div><div class="line">websocketPools.add(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@OnClose</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">websocketPools.remove(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@OnMessage</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message,Session session)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(MyWebsocket item:websocketPools)</div><div class="line">&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">item.send(message);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line"><span class="keyword">this</span>.session.getAsyncRemote().sendText(message);</div><div class="line"><span class="comment">//this.session.getBasicRemote().sendText(message);</span></div><div class="line">        </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@OnError</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable <span class="keyword">error</span>)</span></span></div><div class="line">&#123;</div><div class="line">System.out.println(<span class="string">"发生错误"</span>);</div><div class="line">        <span class="keyword">error</span>.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先放入效果图&lt;/p&gt;
&lt;p&gt;实现环节&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前端实现将把信息发送到后台和接收后台发送过来的信息并且将其发射弹幕到浏览器上&lt;/li&gt;
&lt;li&gt;通过websocket与每个服务端连接，当接收到来自任何一个前端发来的信息，就将该信息群发至所有的客户端(也就是浏
    
    </summary>
    
      <category term="后台" scheme="http://yoursite.com/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ThreadPoolExecutor的PriorityBlockingQueue类型转化问题</title>
    <link href="http://yoursite.com/2017/01/28/ThreadPoolExecutor%E7%9A%84PriorityBlockingQueue%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/01/28/ThreadPoolExecutor的PriorityBlockingQueue类型转化问题/</id>
    <published>2017-01-28T02:53:32.000Z</published>
    <updated>2017-01-28T02:54:18.020Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用ThreadPoolExecutor的时候碰到点问题,因为项目原因在使用ThreadPoolExecutor准备把BlockingQueue替换为PriorityBlockingQueue,从而实现对优先级任务处理的线程池,贴下代码先<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public abstract <span class="class"><span class="keyword">class</span> <span class="title">Event</span>&lt;T&gt; <span class="title">implements</span> <span class="title">Callable</span>&lt;T&gt;,<span class="title">Comparable</span>&lt;Event&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ExecutorService executorService=<span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,TimeUnit.SECONDS,<span class="keyword">new</span> <span class="type">PriorityBlockingQueue</span>());</div></pre></td></tr></table></figure>
<p>然后当我进行以下操作的时候</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">executorService.submit(<span class="keyword">new</span> Event&lt;Object&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function">Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                ...</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>出现了如下错误</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">java<span class="selector-class">.lang</span><span class="selector-class">.ClassCastException</span>: java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.FutureTask</span> cannot be cast to java<span class="selector-class">.lang</span><span class="selector-class">.Comparable</span></div><div class="line">    at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.PriorityBlockingQueue</span><span class="selector-class">.siftUpComparable</span>(PriorityBlockingQueue<span class="selector-class">.java</span>:<span class="number">357</span>)</div><div class="line">    at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.PriorityBlockingQueue</span><span class="selector-class">.offer</span>(PriorityBlockingQueue<span class="selector-class">.java</span>:<span class="number">489</span>)</div><div class="line">    at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.ThreadPoolExecutor</span><span class="selector-class">.execute</span>(ThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">1361</span>)</div><div class="line">    at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.AbstractExecutorService</span><span class="selector-class">.submit</span>(AbstractExecutorService<span class="selector-class">.java</span>:<span class="number">134</span>)</div></pre></td></tr></table></figure>
<p>找到java.util.concurrent.PriorityBlockingQueue.siftUpComparable方法： </p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> siftUpComparable(<span class="built_in">int</span> k, T x, <span class="keyword">Object</span>[] array) &#123;</div><div class="line">        Comparable&lt;? <span class="keyword">super</span> T&gt; <span class="built_in">key</span> = (Comparable&lt;? <span class="keyword">super</span> T&gt;) x;</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">            <span class="keyword">Object</span> e = array[parent];</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">key</span>.compareTo((T) e) &gt;= <span class="number">0</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            array[k] = e;</div><div class="line">            k = parent;</div><div class="line">        &#125;</div><div class="line">        array[k] = <span class="built_in">key</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>是在<code>Comparable&lt;? super T&gt; key = (Comparable&lt;? super T&gt;) x;</code>上出现问题，根据<code>java.util.concurrent.FutureTask cannot be cast to java.lang.Comparable</code>知道x的类型是<code>java.util.concurrent.FutureTask</code>。现在看看<code>FutureTask</code>：</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt;</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可见FutureTask的确没有实现Comparable接口,但是我提交的<code>Event</code>是实现了<code>Comparable</code>接口的,究竟是因为什么原因导致其成为了FutureTask呢，结果在<code>ThreadPoolExecutor的submit(Callable&lt;T&gt; task)</code>找到原因，它是在<code>AbstractExecutorService</code>中实现的。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; <span class="keyword">task</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">task</span> == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        RunnableFuture&lt;T&gt; ftask = newTaskFor(<span class="keyword">task</span>);</div><div class="line">        execute(ftask);</div><div class="line">        <span class="keyword">return</span> ftask;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>重点在<code>newTaskFor</code>方法</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">protected &lt;T&gt; RunnableFuture&lt;T&gt; <span class="keyword">new</span><span class="type">TaskFor</span>(Callable&lt;T&gt; callable) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">FutureTask</span>&lt;T&gt;(callable);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>所以我提交的<code>Event</code>被转化为了<code>FutureTask</code>了，而<code>FutureTask</code>没有实现<code>Comparable</code>，所以才会报错</strong><br>现在解决的方法有:</p>
<ul>
<li>用一个<code>ComparableFutureTask</code>继承<code>FutureTask</code>并实现<code>Comparable</code>接口，但也必须要override <code>ThreadPoolExecutor</code>的<code>newTaskFor</code>方法</li>
</ul>
<p><strong>另外需要注意的是<code>PriorityBlockingQueue</code>的实现是一个最小堆.</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用ThreadPoolExecutor的时候碰到点问题,因为项目原因在使用ThreadPoolExecutor准备把BlockingQueue替换为PriorityBlockingQueue,从而实现对优先级任务处理的线程池,贴下代码先&lt;br&gt;&lt;figure cla
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>在遍历List的过程中删除元素</title>
    <link href="http://yoursite.com/2017/01/28/%E5%9C%A8%E9%81%8D%E5%8E%86List%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2017/01/28/在遍历List的过程中删除元素/</id>
    <published>2017-01-28T02:51:33.000Z</published>
    <updated>2017-01-28T02:52:39.709Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先遍历List的方式有以下几种"><a href="#首先遍历List的方式有以下几种" class="headerlink" title="首先遍历List的方式有以下几种:"></a>首先遍历List的方式有以下几种:</h3><ul>
<li>普通for循环</li>
<li>foreach循环</li>
<li>使用迭代器(Iterator)</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 使用foeach循环 </div><div class="line">     * 在循环过程中从List中删除元素以后，继续循环List时会抛出</div><div class="line">     * ConcurrentModificationException </div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">listRemove</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Handler&gt; handlers = <span class="keyword">this</span>.handlers();</div><div class="line">        <span class="keyword">for</span> (Handler <span class="keyword">handler</span> : handlers) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">handler</span>.getId() == <span class="number">2</span>)</div><div class="line">                handlers.remove(<span class="keyword">handler</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 像这种foreach循环+break操作对List进行遍历删除，但删除之后马上就跳出的也</div><div class="line"> * 不会出现异常 </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">listRemoveBreak</span><span class="params">()</span> </span>&#123;  </div><div class="line">    List&lt;Handler&gt; handlers = <span class="keyword">this</span>.Handlers();  </div><div class="line">    <span class="keyword">for</span> (Handler <span class="keyword">handler</span> : handlers) &#123;  </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">handler</span>.getId() == <span class="number">2</span>) &#123;  </div><div class="line">            handlers.remove(<span class="keyword">handler</span>);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 这种遍历有可能会遗漏某个元素,因为删除元素后List的size在 </div><div class="line"> * 变化，元素的索引也在变化，比如你循环到第2个元素的时候你把它删了， </div><div class="line"> * 接下来你去访问第3个元素，实际上访问到的是原先的第4个元素。当访问的元</div><div class="line"> * 素 </div><div class="line"> * 索引超过了当前的List的size后还会出现数组越界的异常，当然这里不会出现</div><div class="line"> * 这种异常， </div><div class="line"> * 因为这里每遍历一次都重新拿了一次当前List的size。 </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> listRemove2() &#123;  </div><div class="line">    List&lt;handlers&gt; handlers = <span class="keyword">this</span>.getHandlers();  </div><div class="line">    <span class="built_in">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;handlers.<span class="built_in">size</span>(); i++) &#123;  </div><div class="line">        <span class="built_in">if</span> (handlers.<span class="built_in">get</span>(i).getId() == <span class="number">1</span>) &#123;  </div><div class="line">            Handler handler = handlers.<span class="built_in">get</span>(i);  </div><div class="line">            handlers.<span class="built_in">remove</span>(handler);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 使用Iterator的方式也可以顺利删除和遍历 </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">iteratorRemove</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">    List&lt;Handlers&gt; handlers = <span class="keyword">this</span>.getHandlers();  </div><div class="line">    System.<span class="keyword">out</span>.println(handlers);  </div><div class="line">    Iterator&lt;Handler&gt; handlIter = handlers.iterator();  </div><div class="line">    <span class="keyword">while</span> (handlIter.hasNext()) &#123;  </div><div class="line">        Handler handler = handlIter.next();  </div><div class="line">        <span class="keyword">if</span> (handler.getId()  == <span class="number">1</span>)  </div><div class="line">            handlIter.<span class="keyword">remove</span>();<span class="comment">//这里要使用Iterator的remove方法移除当前对象，如果使用List的remove方法，则同样会出现ConcurrentModificationException  </span></div><div class="line">    &#125;  </div><div class="line">    System.<span class="keyword">out</span>.println(handlers);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如果是在遍历操作远多于可变操作的时候，还可以可以考虑CopyOnWriteArrayList"><a href="#如果是在遍历操作远多于可变操作的时候，还可以可以考虑CopyOnWriteArrayList" class="headerlink" title="如果是在遍历操作远多于可变操作的时候，还可以可以考虑CopyOnWriteArrayList"></a>如果是在遍历操作远多于可变操作的时候，还可以可以考虑CopyOnWriteArrayList</h3><pre><code>这一般需要很大的开销，但是当遍历操作的数量大大超过可变操作的数量时，这种方法可能比其他替代方法更 有效。在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时，它也很有用。“快照”风格的迭代器方法在创建迭代器时使用了对数组状态的引用。此数组在迭代器的生存期内不会更改，因此不可能发生冲突，并且迭代器保证不会抛出ConcurrentModificationException。创建迭代器以后，迭代器就不会反映列表的添加、移除或者更改。在迭代器上进行的元素更改操作（remove、set和add）不受支持。这些方法将抛出UnsupportedOperationException。允许使用所有元素，包括null。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先遍历List的方式有以下几种&quot;&gt;&lt;a href=&quot;#首先遍历List的方式有以下几种&quot; class=&quot;headerlink&quot; title=&quot;首先遍历List的方式有以下几种:&quot;&gt;&lt;/a&gt;首先遍历List的方式有以下几种:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;普通for循
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>pandas 常用操作</title>
    <link href="http://yoursite.com/2017/01/28/pandas-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/01/28/pandas-常用操作/</id>
    <published>2017-01-28T02:49:40.000Z</published>
    <updated>2017-01-28T02:50:27.079Z</updated>
    
    <content type="html"><![CDATA[<p>###删除操作</p>
<ul>
<li>删除列：<br><code>df=df.drop(&#39;column_label&#39;,axis=1)</code></li>
<li>删除行：<br><code>df=df.drop(&#39;row_label&#39;)</code></li>
<li>删除重复的行: <code>df=df.drop_duplicates([&#39;column_label_one&#39;,&#39;column_label_two&#39;])</code></li>
</ul>
<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><ul>
<li>查看行数<br><code>len(df) or len(df.index) or df.shape[0]</code></li>
<li>列数<br><code>len(df.columns) or df.shape[1]</code></li>
<li>数据类型<br><code>df.dtypes</code></li>
</ul>
<p>###重命名</p>
<ul>
<li>列标签的重命名<br><code>df.rename(columns={&quot;old label&quot;: &quot;new label&quot;})​</code></li>
<li>行标签的重命名<br><code>df.rename(index={&quot;old label&quot;: &quot;new label&quot;}​</code></li>
</ul>
<h3 id="时间序列的操作"><a href="#时间序列的操作" class="headerlink" title="时间序列的操作"></a>时间序列的操作</h3><ul>
<li>将时间字符串转换成datetime数据<br><code>dt[&#39;StartTime&#39;] = pd.to_datetime(dt[&#39;StartTime&#39;])</code></li>
</ul>
<p>###排序</p>
<ul>
<li>按值排序，可指定列名和排序方式，默认的是升序排序<br><code>dt.sort([&#39;StartTime&#39;], inplace=True) or dt.sort([&#39;StartTime&#39;])</code> </li>
<li>照索引（行名）或者列名进行排序,指定axis=0表示按索引（行名）排序，axis=1表示按列名排序，并可指定升序或者降序：<br><code>df.sort_index(axis=1, ascending=False)</code></li>
</ul>
<p>###读写操作</p>
<ul>
<li><p>读csv<br><code>pd.read_csv(&#39;input.csv&#39;) | pd.read_table(&#39;input.csv&#39;, sep=&#39;,&#39;)</code></p>
<ul>
<li>参数 header = None pandas分配默认列名</li>
<li>参数 name = [‘a’, ‘b’, ‘c’] 指定列名</li>
<li>参数 index_col=’idx 指定索引</li>
<li>参数 shiprows = [0, 2, 4] 跳过文件部分行</li>
<li>参数 nrows = 20 只读取文件前xx行</li>
<li>参数 chunksize = 10000 指定每次读取行数，分块读取，返回TextParse对象</li>
</ul>
</li>
<li><p>写csv<br><code>pd.to_csv(&#39;output.csv&#39;)</code></p>
<ul>
<li>参数 na_rep = ‘NULL’ 缺失值输出为指定标记值，默认为空字符串</li>
<li>参数 index = False, header = False 禁止输出行和列的标签, 默认输出</li>
<li>参数 cols=[‘a’, ‘b’] 指定输出以部分列，并以指定顺序排序</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###删除操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除列：&lt;br&gt;&lt;code&gt;df=df.drop(&amp;#39;column_label&amp;#39;,axis=1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除行：&lt;br&gt;&lt;code&gt;df=df.drop(&amp;#39;row_label&amp;#39;
    
    </summary>
    
      <category term="数据处理" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
    
      <category term="Pandas" scheme="http://yoursite.com/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>mysql操作笔记</title>
    <link href="http://yoursite.com/2017/01/28/mysql%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/28/mysql操作笔记/</id>
    <published>2017-01-28T02:48:25.000Z</published>
    <updated>2017-01-28T02:49:13.259Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/xuejie/archive/2013/01/11/2856911.html" target="_blank" rel="external">传送门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/xuejie/archive/2013/01/11/2856911.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装 Tomcat</title>
    <link href="http://yoursite.com/2017/01/28/CentOS-7-%E5%AE%89%E8%A3%85-Tomcat/"/>
    <id>http://yoursite.com/2017/01/28/CentOS-7-安装-Tomcat/</id>
    <published>2017-01-28T02:46:29.000Z</published>
    <updated>2017-01-28T02:47:05.930Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://yq.aliyun.com/articles/47252" target="_blank" rel="external">传送门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/47252&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="后台" scheme="http://yoursite.com/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>java读取配置文件的几种方式</title>
    <link href="http://yoursite.com/2017/01/28/java%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/01/28/java读取配置文件的几种方式/</id>
    <published>2017-01-28T02:44:16.000Z</published>
    <updated>2017-01-28T02:52:52.793Z</updated>
    
    <content type="html"><![CDATA[<p>##1.使用绝对路径(不推荐,移植性差)</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> picTempDirUrl;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> picStoreDir;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        Properties properties=<span class="keyword">new</span> <span class="type">Properties</span>();</div><div class="line">        InputStream <span class="keyword">in</span>=<span class="keyword">new</span> <span class="type">FileInputStream</span>(<span class="string">"/home/ubuntu/img/config.properties"</span>);<span class="comment">//配置文件在磁盘的绝对路径</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            properties.load(<span class="keyword">in</span>);</div><div class="line">            <span class="keyword">in</span>.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        picTempDirUrl= (<span class="keyword">String</span>) properties.<span class="keyword">get</span>(<span class="string">"picTempDirUrl"</span>);</div><div class="line">        picStoreDir= (<span class="keyword">String</span>) properties.<span class="keyword">get</span>(<span class="string">"picStoreDir"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##2.使用getResourceAsStream</p>
<p>###Class.getResourceAsStream(String path) ：</p>
<blockquote>
<p>路径名不以’/‘开头时默认是从此类所在的包下取资源，以’/‘开头则是从ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。</p>
</blockquote>
<p>###Class.getClassLoader.getResourceAsStream(String path) </p>
<blockquote>
<p>默认则是从ClassPath根下获取，经过测试无论path是不是以’/‘开头，都是从ClassPath根下开始操作，最终是由ClassLoader获取资源。</p>
</blockquote>
<p><strong>以下是用Class.getClassLoader.getResourceAsStream(String path)获取配置文件的一个例子</strong><br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> picTempDirUrl;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> picStoreDir;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        Properties properties=<span class="keyword">new</span> <span class="type">Properties</span>();</div><div class="line">        InputStream <span class="keyword">in</span>=Configuration.class.getClassLoader().getResourceAsStream(<span class="string">"config.properties"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            properties.load(<span class="keyword">in</span>);</div><div class="line">            <span class="keyword">in</span>.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        picTempDirUrl= (<span class="keyword">String</span>) properties.<span class="keyword">get</span>(<span class="string">"picTempDirUrl"</span>);</div><div class="line">        picStoreDir= (<span class="keyword">String</span>) properties.<span class="keyword">get</span>(<span class="string">"picStoreDir"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>配置文件可以放在src目录里或者resource目录里</strong></p>
<p>##3.ServletContext.getResourceAsStream() </p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Properties <span class="built_in">properties</span> = <span class="built_in">new</span> Properties();</div><div class="line"><span class="built_in">properties</span>.<span class="built_in">load</span>(getServletContext().getResourceAsStream(<span class="string">"/WEB-INF/filename.properties"</span>));</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##1.使用绝对路径(不推荐,移植性差)&lt;/p&gt;
&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java-动态代理学习笔记</title>
    <link href="http://yoursite.com/2017/01/28/java-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/28/java-动态代理学习笔记/</id>
    <published>2017-01-28T02:17:36.000Z</published>
    <updated>2017-01-28T02:53:02.013Z</updated>
    
    <content type="html"><![CDATA[<p><strong>代理模式</strong><br>    给某个对象提供一个代理对象，并由代理对象控制对于原对象的访问，即客户不直接操控原对象，而是通过代理对象间接地操控原对象。<br><strong>其中代理可以分为两种方式,分别是静态代理和动态代理</strong></p>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><figure class="figure"><img src="http://oke2lzov9.bkt.clouddn.com/blog/images/3_01"></figure>
<pre><code>大概的思想就是如果我想创建一个对RealSubject类进行代理的代理类，那么我可以创建一个代理类Proxy，让它实现和RealSubject同样的接口或者同样的函数，也就是实现Subject接口或者继承Subject，这样Proxy也就可以被当做为Subject类来使用，然后让该Proxy类拥有一个RealSubject类的实例，在Proxy类的request()方法中再去调用RealSubject实例的request()方法和做一些其他的处理。
</code></pre><p>直接上代码吧</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">        RealSubject subject = <span class="keyword">new</span> RealSubject();</div><div class="line">        Proxy p = <span class="keyword">new</span> Proxy(subject);</div><div class="line">        p.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"request"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Subject subject;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Subject subject)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.subject = subject;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"PreProcess"</span>);</div><div class="line">        subject.request();</div><div class="line">        System.out.println(<span class="string">"PostProcess"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>如果大量使用前面的静态代理可能就会有人想抱怨了，“我靠，每次实现一个代理我都得去写多一个类”，而且再考虑下以下这种场景：</p>
<blockquote>
<p>假如我有3个类 AC,BC,CC 分别实现了(换成继承关系也没关系)A,B,C接口， 而且分别实现了fa(),fb(),fc()函数，然后我想通过代理来实现计算fa(),fb(),fc()的执行时间，在这里就简单认为在执行函数前加多个fp()函数吧，如果我是用静态代理的话，那么就意味着我需要分别写多3个代理类，分别为AP,BP,CP类，而且都各自实现A,B,C接口，然后还得在各自代理的函数中加入<strong>同一句</strong>函数fp()，可见这样实现多么死板，这时候我们就需要动态代理来搞定这问题啦!</p>
</blockquote>
<p><strong>首先说下几个词的概念先</strong></p>
<ul>
<li>委托类和委托对象：委托类是一个类，委托对象是委托类的实例。</li>
<li>代理类和代理对象：代理类是一个类，代理对象是代理类的实例。</li>
</ul>
<p><strong>java实现动态代理有两种:</strong></p>
<ul>
<li>JDK动态代理</li>
<li>cglib动态代理</li>
</ul>
<h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>考虑这么一个例子，假如我有下面这些类<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">HelloService</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello world!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</div><div class="line">        HelloService helloService=<span class="keyword">new</span> HelloServiceImpl();</div><div class="line">        helloService.sayHello();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先执行结果应该为<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello world!</div></pre></td></tr></table></figure></p>
<p> 这时候我想通过代理才实现在输出<code>hello world!</code>之前先输出<code>welcome yuan!</code>,然后在输出<code>hello world!</code>之后再输出<code>bye!</code>,这时候我需要这么写:</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxyFactory</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//委托对象</span></div><div class="line">    <span class="keyword">private</span> Object <span class="keyword">target</span>;</div><div class="line"></div><div class="line">    <span class="comment">//构造函数，在此传入将要被代理的对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyProxyFactory</span><span class="params">(Object <span class="keyword">target</span>)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">target</span>=<span class="keyword">target</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">//在执行委托对象的函数之前</span></div><div class="line">        System.out.println(<span class="string">"welcom yuan!"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//执行委托对象的函数(target是委托对象，args是这个函数需要的形参)</span></div><div class="line">        Object result=method.invoke(<span class="keyword">target</span>,args);</div><div class="line"></div><div class="line">        <span class="comment">//在执行委托对象的函数之后</span></div><div class="line">        System.out.println(<span class="string">"bye!"</span>);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//自己封装返回一个代理对象实例</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">getProxyInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">target</span>.getClass().getClassLoader(),<span class="keyword">target</span>.getClass().getInterfaces(),<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后main函数改一下<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args)&#123;</div><div class="line">        HelloService helloService=<span class="keyword">new</span> <span class="type">HelloServiceImpl</span>();</div><div class="line">        MyProxyFactory myProxyFactory=<span class="keyword">new</span> <span class="type">MyProxyFactory</span>(helloService);</div><div class="line">        HelloService helloService1Proxy= (HelloService) myProxyFactory.getProxyInstance();</div><div class="line">        helloService1Proxy.sayHello();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果为</p>
<figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">welcom yuan!</div><div class="line">hello world!</div><div class="line">bye!</div></pre></td></tr></table></figure>
<p>现在解释下关于JDK动态代理用到的类</p>
<ol>
<li><code>java.lang.reflect.Proxy</code>:这是生成代理类的主类，通过 Proxy 类生成的代理类都继承了 Proxy 类。我们主要通过<code>Proxy</code>的</li>
<li><code>java.lang.reflect.InvocationHandler</code>:需要自己定义一个实现该接口的类，我们动态生成的代理类需要完成的具体操作将在该接口的<code>invoke</code>方法内实现。 第一个参数是代理对象（表示哪个代理对象调用了method方法），第二个参数是 Method 对象（表示哪个方法被调用了），第三个参数是指定调用方法的参数。这个函数是在代理对象调用任何一个方法时都会调用的，方法不同会导致第二个参数method不同。如果你想对特定的函数进行处理，可以自己在<code>invoke</code>方法内自己做些判断，或许还有其他的方法可以实现…</li>
</ol>
<p><strong>JDK动态代理的局限性</strong></p>
<blockquote>
<p>因为 Java 的单继承特性（每个代理类都继承了 Proxy 类），只能针对接口创建代理类，不能针对类创建代理类。</p>
</blockquote>
<p><strong>附加资料</strong><br><a href="http://blog.csdn.net/liushuijinger/article/details/37829049" target="_blank" rel="external">JDK动态代理的实现原理和模拟-重要</a><br><a href="http://www.jianshu.com/p/6f6bb2f0ece9" target="_blank" rel="external">Java 动态代理</a></p>
<h2 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h2><blockquote>
<p>使用JDK动态代理使用到一个Proxy类和一个InvocationHandler接口。<br>Proxy已经设计得非常优美，但是还是有一点点小小的遗憾之处，那就是它仅支持interface代理（也就是代理类必须实现接口），因为它的设计注定了这个遗憾。对于上面说到JDK仅支持对实现接口的委托类进行代理的缺陷，这个问题CGLIB给予了很好的补位，解决了这个问题，使其委托类也可是非接口实现类。<br>CGLIB内部使用到ASM，所以下面的例子需要引入asm-3.3.jar、cglib-2.2.2.jar</p>
</blockquote>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hello</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hi"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglibProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//需要实现的接口函数</span></div><div class="line">    <span class="comment">//注意！这里的o对象跟被代理对象实例不是同一个</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//过滤那些由Object类继承过来的方法</span></div><div class="line">        <span class="comment">//boolean flag=!(method.getDeclaringClass().getName().equals("java.lang.Object"));</span></div><div class="line"></div><div class="line">        <span class="comment">//或者检查要拦截的方法的名字，如果是sayHello方法才进行拦截</span></div><div class="line">        <span class="keyword">boolean</span> flag=method.getName().equals(<span class="string">"sayHello"</span>);</div><div class="line">        <span class="keyword">if</span>(flag==<span class="keyword">true</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"welcome yuan!"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//我们一般使用proxy.invokeSuper(obj,args)方法。这个很好理解，就是执行原始类的方法。还有一个方法proxy.invoke(obj,args)，这是执行生成子类的方法。</span></div><div class="line">      <span class="comment">//如果传入的obj就是子类的话，会发生内存溢出，因为子类的方法不挺地进入intercept方法，而这个方法又去调用子类的方法，两个方法直接循环调用了。</span></div><div class="line">        Object result=methodProxy.invokeSuper(o,args);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(flag==<span class="keyword">true</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"bybe"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回代理对象实例</div><div class="line">     * <span class="doctag">@param</span> target 被代理的对象实例</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">getProxyInstance</span><span class="params">(Object <span class="keyword">target</span>)</span></span>&#123;</div><div class="line">        <span class="comment">//该类用于生成代理对象</span></div><div class="line">        Enhancer enhancer=<span class="keyword">new</span> Enhancer();</div><div class="line">        <span class="comment">//设置父类</span></div><div class="line">        enhancer.setSuperclass(<span class="keyword">target</span>.getClass());</div><div class="line">        <span class="comment">//设置回调用对象为本身</span></div><div class="line">        enhancer.setCallback(<span class="keyword">this</span>);</div><div class="line">        <span class="function"><span class="keyword">return</span> enhancer.<span class="title">create</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args)&#123;</div><div class="line">        Hello hello=<span class="keyword">new</span> <span class="type">Hello</span>();</div><div class="line">        MyCglibProxyFactory myCglibProxyFactory=<span class="keyword">new</span> <span class="type">MyCglibProxyFactory</span>();</div><div class="line">        Hello helloProxy=(Hello)myCglibProxyFactory.getProxyInstance(hello);</div><div class="line">        helloProxy.sayHello();</div><div class="line">        helloProxy.sayHi();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>输出结果:</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">welcome</span> yuan!</div><div class="line"><span class="symbol">hello</span></div><div class="line"><span class="keyword">bybe</span></div><div class="line"><span class="symbol">hi</span></div></pre></td></tr></table></figure>
<p>其中<code>sayHello()</code>方法得到处理，而<code>sayHi()</code>方法则没有。</p>
<p><strong>附加资料</strong><br><a href="http://blog.csdn.net/catoop/article/details/50730530" target="_blank" rel="external">cglib参考资料</a></p>
<p><strong><a href="http://www.kancloud.cn/evankaka/springlearning/119667" target="_blank" rel="external">JDK动态代理和CGLib的比较</a></strong></p>
<blockquote>
<p>CGLib所创建的动态代理对象的性能比JDK所创建的代理对象性能高不少，大概10倍，但CGLib在创建代理对象时所花费的时间却比JDK动态代理多大概8倍，所以对于singleton的代理对象或者具有实例池的代理，因为无需频繁的创建新的实例，所以比较适合CGLib动态代理技术，反之则适用于JDK动态代理技术。另外，由于CGLib采用动态创建子类的方式生成代理对象，所以不能对目标类中的final，private等方法进行处理。所以，大家需要根据实际的情况选择使用什么样的代理了。同样的，Spring的AOP编程中相关的ProxyFactory代理工厂内部就是使用JDK动态代理或CGLib动态代理的，通过动态代理，将增强（advice)应用到目标类中。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;代理模式&lt;/strong&gt;&lt;br&gt;    给某个对象提供一个代理对象，并由代理对象控制对于原对象的访问，即客户不直接操控原对象，而是通过代理对象间接地操控原对象。&lt;br&gt;&lt;strong&gt;其中代理可以分为两种方式,分别是静态代理和动态代理&lt;/strong&gt;&lt;/
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis &lt;if&gt; 判断的坑</title>
    <link href="http://yoursite.com/2017/01/28/Mybatis-if-%E5%88%A4%E6%96%AD%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2017/01/28/Mybatis-if-判断的坑/</id>
    <published>2017-01-28T02:14:44.000Z</published>
    <updated>2017-01-28T02:15:36.663Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">if</span> test=<span class="string">"type=='y'"</span>&gt;  </div><div class="line">    <span class="keyword">and</span> <span class="built_in">status</span> = <span class="number">0</span>   </div><div class="line">&lt;/<span class="keyword">if</span>&gt;</div></pre></td></tr></table></figure>
<p>当传入的type的值为y的时候，if判断内的sql也不会执行，抱着这个疑问就去看了mybatis是怎么解析sql的。下面我们一起来看一下mybatis 的执行过程。</p>
<p><strong>DefaultSqlSession.class</strong></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(String statement, Object parameter, RowBounds rowBounds, ResultHandler <span class="keyword">handler</span>)</span> </span>&#123;  </div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">      MappedStatement ms = configuration.getMappedStatement(statement);  </div><div class="line">      executor.query(ms, wrapCollection(parameter), rowBounds, <span class="keyword">handler</span>);  </div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error querying database.  Cause: "</span> + e, e);  </div><div class="line">    &#125; <span class="keyword">finally</span> &#123;  </div><div class="line">      ErrorContext.instance().reset();  </div><div class="line">    &#125;  </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>在 <code>executor.query(ms, wrapCollection(parameter), rowBounds, handler);</code><br>执行到BaseExecutor.class执行器中的query方法 </p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object <span class="keyword">parameter</span>, RowBounds <span class="comment">rowBounds, ResultHandler resultHandler) throws SQLException &#123;</span>  </div><div class="line">    BoundSql <span class="comment">boundSql = ms.getBoundSql(parameter)</span>;  </div><div class="line">    CacheKey key = createCacheKey(ms, <span class="keyword">parameter</span>, rowBounds, boundSql);  </div><div class="line">    return query(ms, <span class="keyword">parameter</span>, rowBounds, resultHandler, key, boundSql);  </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>在<code>query</code>的方法中看到<code>boundSql</code>，是通过 <code>ms.getBoundSql(parameter);</code>获取的。</p>
<p>再点进去可以看到<code>MappedStatement.class</code>类中的<code>getBoundSql</code>方法 </p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public BoundSql getBoundSql(Object parameterObject) &#123;  </div><div class="line">    BoundSql boundSql = sqlSource.getBoundSql(parameterObject);  </div><div class="line">    List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();  </div><div class="line">   <span class="built_in"> if </span>(parameterMappings == null || parameterMappings.size() &lt;= 0) &#123;  </div><div class="line">      boundSql =<span class="built_in"> new </span>BoundSql(configuration, boundSql.getSql(), parameterMap.getParameterMappings(), parameterObject);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    //<span class="built_in"> check </span>for nested result maps in parameter mappings (issue <span class="comment">#30)  </span></div><div class="line">    for (ParameterMapping pm<span class="keyword"> :</span> boundSql.getParameterMappings()) &#123;  </div><div class="line">      String rmId = pm.getResultMapId();  </div><div class="line">     <span class="built_in"> if </span>(rmId != null) &#123;  </div><div class="line">        ResultMap rm = configuration.getResultMap(rmId);  </div><div class="line">       <span class="built_in"> if </span>(rm != null) &#123;  </div><div class="line">          hasNestedResultMaps |= rm.hasNestedResultMaps();  </div><div class="line">        &#125;  </div><div class="line">      &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">   <span class="built_in"> return </span>boundSql;  </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>看到其中有<code>sqlSource.getBoundSql(parameterObject);</code> <code>sqlsource</code>是一个接口。<br>类中<code>getBoundSql</code>是一个核心方法，mybatis 也是通过这个方法来为我们构建sql。<code>BoundSql</code> 对象其中保存了经过参数解析，以及判断解析完成sql语句。比如<if> <code>&lt;choose&gt; &lt;when&gt;</code> 都会在这一层完成，具体的完成方法往下看，那最常用<code>sqlSource</code>的实现类是<code>DynamicSqlSource.class</code> </if></p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class DynamicSqlSource implements SqlSource &#123;  </div><div class="line">  </div><div class="line">  private Configuration configuration<span class="comment">;  </span></div><div class="line">  private SqlNode rootSqlNode<span class="comment">;  </span></div><div class="line">  </div><div class="line">  public DynamicSqlSource(Configuration configuration, SqlNode rootSqlNode) &#123;  </div><div class="line">    this.configuration = configuration<span class="comment">;  </span></div><div class="line">    this.rootSqlNode = rootSqlNode<span class="comment">;  </span></div><div class="line">  &#125;  </div><div class="line">  </div><div class="line">  public <span class="keyword">BoundSql </span>getBoundSql(Object parameterObject) &#123;  </div><div class="line">    DynamicContext <span class="built_in">context</span> = new DynamicContext(configuration, parameterObject)<span class="comment">;  </span></div><div class="line">    rootSqlNode.apply(<span class="built_in">context</span>)<span class="comment">;  </span></div><div class="line">    SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration)<span class="comment">;  </span></div><div class="line">    Class&lt;?&gt; parameterType = parameterObject == null ? Object.class : parameterObject.getClass()<span class="comment">;  </span></div><div class="line">    SqlSource sqlSource = sqlSourceParser.parse(<span class="built_in">context</span>.getSql(), parameterType, <span class="built_in">context</span>.getBindings())<span class="comment">;  </span></div><div class="line">    <span class="keyword">BoundSql </span><span class="keyword">boundSql </span>= sqlSource.getBoundSql(parameterObject)<span class="comment">;  </span></div><div class="line">    for (Map.Entry&lt;String, Object&gt; entry : <span class="built_in">context</span>.getBindings().entrySet()) &#123;  </div><div class="line">      <span class="keyword">boundSql.setAdditionalParameter(entry.getKey(), </span>entry.getValue())<span class="comment">;  </span></div><div class="line">    &#125;  </div><div class="line">    return <span class="keyword">boundSql; </span> </div><div class="line">  &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>核心方法是调用了<code>rootSqlNode.apply(context);</code> <code>rootSqlNode</code>是一个接口 .</p>
<p>可以看到类中 <code>rootSqlNode.apply(context);</code> 的方法执行就是一个递归的调用，通过不同的<br>实现类执行不同的标签，每一次appll是完成了我们<code>&lt;&gt;&lt;/&gt;</code>一次标签中的sql创建，计算出标签中的那一段sql，mybatis通过不停的递归调用，来为我们完成了整个sql的拼接。那我们主要来看IF的实现类<code>IfSqlNode.class</code></p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfSqlNode</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">SqlNode</span></span> </span>&#123;  </div><div class="line">  <span class="keyword">private</span> ExpressionEvaluator evaluator;  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">String</span> test;  </div><div class="line">  <span class="keyword">private</span> SqlNode contents;  </div><div class="line">  </div><div class="line">  <span class="keyword">public</span> IfSqlNode(SqlNode contents, <span class="keyword">String</span> test) &#123;  </div><div class="line">    <span class="built_in">this</span>.test = test;  </div><div class="line">    <span class="built_in">this</span>.contents = contents;  </div><div class="line">    <span class="built_in">this</span>.evaluator = <span class="keyword">new</span> <span class="type">ExpressionEvaluator</span>();  </div><div class="line">  &#125;  </div><div class="line">  </div><div class="line">  <span class="keyword">public</span> boolean apply(DynamicContext context) &#123;  </div><div class="line">    <span class="keyword">if</span> (evaluator.evaluateBoolean(test, context.getBindings())) &#123;  </div><div class="line">      contents.apply(context);  </div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </div><div class="line">  &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到IF的实现中，执行了 if (evaluator.evaluateBoolean(test, context.getBindings()))<code>如果返回是false的话直接返回，否则继续递归解析IF标签以下的标签，并且返回</code>true<code>。那继续来看</code>evaluator.evaluateBoolean` 的方法 </p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> ExpressionEvaluator &#123;  </div><div class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> evaluateBoolean(<span class="built_in">String</span> expression, <span class="built_in">Object</span> parameterObject) &#123;  </div><div class="line">    <span class="built_in">Object</span> value = OgnlCache.getValue(expression, parameterObject);  </div><div class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>) <span class="keyword">return</span> (<span class="built_in">Boolean</span>) value;  </div><div class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Number</span>) <span class="keyword">return</span> !<span class="keyword">new</span> BigDecimal(<span class="built_in">String</span>.valueOf(value)).equals(BigDecimal.ZERO);  </div><div class="line">    <span class="keyword">return</span> value != <span class="literal">null</span>;  </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>关键点就在于这里，在<code>OgnlCache.getValue</code>中调用了<code>Ognl.getValue</code>，看到这里恍然大悟，mybatis是使用的OGNL表达式来进行解析的，在OGNL的表达式中，<code>&#39;y&#39;</code>会被解析成字符，因为java是<strong>强类型</strong>的，<code>char</code> 和 一个<code>String</code> 会导致不等。所以<code>if标签</code>中的sql不会被解析。具体的请参照 OGNL 表达式的语法。到这里，上面的问题终于解决了，只需要把代码修改成：</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">if</span> test='<span class="class"><span class="keyword">type</span></span>==<span class="string">"y"</span>'&gt;  <span class="comment">//注意是双引号，不是单引号！！！</span></div><div class="line">    <span class="keyword">and</span> status = <span class="number">0</span>   </div><div class="line">&lt;/<span class="keyword">if</span>&gt;</div></pre></td></tr></table></figure>
<p>就可以执行了，这样<code>&quot;y&quot;</code>解析出来是一个字符串，两者相等！ </p>
<p>附上作者源地址：<a href="http://cheng-xinwei.iteye.com/blog/2008200" target="_blank" rel="external">点我进入原作者博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>前端使用FormData实现上传文件</title>
    <link href="http://yoursite.com/2017/01/27/%E5%89%8D%E7%AB%AF%E4%BD%BF%E7%94%A8FormData%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/01/27/前端使用FormData实现上传文件/</id>
    <published>2017-01-27T14:36:06.000Z</published>
    <updated>2017-01-28T02:44:39.809Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>场景: 用户通过点击图片弹出上传文件的框框，然后选择将要替换的图片，选择后实时预览，点击确定后通过ajax上传到服务器.</p>
</blockquote>
<p><strong>前端html</strong><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"img_div"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"file"</span> <span class="built_in">id</span>=<span class="string">"img_upload"</span>&gt;</div><div class="line">    &lt;img <span class="built_in">id</span>=<span class="string">"picture"</span> src=<span class="string">"$picturePath$"</span> alt=<span class="string">"头像"</span> <span class="built_in">class</span>=<span class="string">"img-rounded"</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p><strong>将上述html中的上传input元素的透明度设置为0，并且设置宽度和高度，用它来遮住a标签,注意设置外部div的position</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#img_div</span>&#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#img_upload</span>&#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">9</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>JS代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为头像上传设置实时预览监听器</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setOnchangeListener</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"body"</span>).on(<span class="string">"change"</span>,<span class="string">"#img_upload"</span>,previewFile);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//实时预览上传图片</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">previewFile</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> preview=$(<span class="string">"#picture"</span>);</div><div class="line">    <span class="keyword">var</span> file=$(<span class="string">"#img_upload"</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> reader=<span class="keyword">new</span> FileReader();</div><div class="line">    reader.addEventListener(<span class="string">"load"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       preview.prop(<span class="string">"src"</span>,reader.result);</div><div class="line">    &#125;,<span class="literal">false</span>);</div><div class="line">    <span class="keyword">if</span>(file)&#123;</div><div class="line">        reader.readAsDataURL(file);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//上传图片</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setPicture</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> file=$(<span class="string">"#img_upload"</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span>(file==<span class="literal">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> formData=<span class="keyword">new</span> FormData();</div><div class="line">    formData.append(<span class="string">'file'</span>,file);</div><div class="line">    <span class="keyword">var</span> url=serverUrl+<span class="string">"uploadPic"</span>;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>:url,</div><div class="line">        <span class="attr">type</span>:<span class="string">'POST'</span>,</div><div class="line">        <span class="attr">cache</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">data</span>:formData,</div><div class="line">        <span class="attr">processData</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">contentType</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">xhrFields</span>: &#123;</div><div class="line">            <span class="attr">withCredentials</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">crossDomain</span>: <span class="literal">true</span>,</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>其中</strong></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">processData:</span><span class="literal">false</span>,</div><div class="line"><span class="string">contentType:</span><span class="literal">false</span>,</div></pre></td></tr></table></figure>
<p><strong>的设置需要注意。</strong></p>
<p><strong>这里后台我用的是java web（SpringMVC）就贴一下控制器接收上传文件的代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/uploadPic"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Object  <span class="title">handleUploadPic</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span>MultipartFile file, HttpServletRequest request)</span>&#123;</div><div class="line">        String userName=cookieService.getUserName(request);</div><div class="line">        String picUrl=fileService.saveImg(file);</div><div class="line">        String oldPicUrl=manageService.getPicUrl(userName);</div><div class="line">        fileService.deleteFile(oldPicUrl);</div><div class="line">        manageService.setPicUrl(userName,picUrl);</div><div class="line">        Map&lt;String,Object&gt; result=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">        result.put(keyStatus,valueStatusOk);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>其中file就是接收到的上传文件</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;场景: 用户通过点击图片弹出上传文件的框框，然后选择将要替换的图片，选择后实时预览，点击确定后通过ajax上传到服务器.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;前端html&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket介绍</title>
    <link href="http://yoursite.com/2016/07/18/WebSocket%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2016/07/18/WebSocket介绍/</id>
    <published>2016-07-18T08:06:18.000Z</published>
    <updated>2017-02-18T08:33:40.282Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们先来看看HTTP这种非持久的协议的一些特点     </p>
<ul>
<li>HTTP的生命周期通过Request来界定，也就是一个Request 一个Response，那么在HTTP1.0中，这次HTTP请求就结束了。   </li>
<li>在HTTP1.1中进行了改进，使得有一个keep-alive，也就是说，在一个HTTP连接中，可以发送多个Request，接收多个Response。     </li>
<li>但是一个request只能有一个response。而且这个response也是被动的，不能主动发起。      </li>
</ul>
<p>在WebSocket还没出现之前有以下实现长连接的方式    </p>
<h3 id="ajax轮询"><a href="#ajax轮询" class="headerlink" title="ajax轮询"></a>ajax轮询</h3><p>ajax轮询 的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。<br>这种方式需要服务器有很快的处理速度和资源。     </p>
<h3 id="long-poll"><a href="#long-poll" class="headerlink" title="long poll"></a>long poll</h3><p>long poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。<br>这种方式需要服务端有很高的并发，也就是说同时接待客户的能力。     </p>
<p>从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，然后等待服务端处理，可以体现HTTP协议的另外一个特点，被动性。何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。       </p>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>WebSocket协议本质上是一个基于TCP的协议，它由通信协议和编程API组成，WebSocket能够在浏览器和服务器之间建立双向连接，以基于事件的方式，赋予浏览器实时通信能力。既然是双向通信，就意味着服务器端和客户端可以同时发送并响应请求，而不再像HTTP的请求和响应，解决了上面同步有延迟，而且还非常消耗资源的这种情况。   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我们先来看看HTTP这种非持久的协议的一些特点     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP的生命周期通过Request来界定，也就是一个Request 一个Response，那么在HTTP1.0中，这次HTTP请求就结束了。   &lt;/li&gt;
&lt;li&gt;在HTTP1.1中
    
    </summary>
    
      <category term="网络协议" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="WebSocket" scheme="http://yoursite.com/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket数据编码</title>
    <link href="http://yoursite.com/2016/02/23/WebSocket%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81/"/>
    <id>http://yoursite.com/2016/02/23/WebSocket数据编码/</id>
    <published>2016-02-23T09:22:39.000Z</published>
    <updated>2017-02-18T09:26:45.570Z</updated>
    
    <content type="html"><![CDATA[<p>WebSocket传输的数据都是以Frame（帧）的形式实现的，就像TCP/UDP协议中的报文段Segment。下面就是一个Frame：（以bit为单位表示）   </p>
<pre><code> 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-------+-+-------------+-------------------------------+
|F|R|R|R| opcode|M| Payload len |    Extended payload length    |
|I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
|N|V|V|V|       |S|             |   (if payload len==126/127)   |
| |1|2|3|       |K|             |                               |
+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
|     Extended payload length continued, if payload len == 127  |
+ - - - - - - - - - - - - - - - +-------------------------------+
|                               |Masking-key, if MASK set to 1  |
+-------------------------------+-------------------------------+
| Masking-key (continued)       |          Payload Data         |
+-------------------------------- - - - - - - - - - - - - - - - +
:                     Payload Data continued ...                :
+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
|                     Payload Data continued ...                |
+---------------------------------------------------------------+
</code></pre><h3 id="各字段解释"><a href="#各字段解释" class="headerlink" title="各字段解释"></a>各字段解释</h3><h4 id="FIN：1-bit"><a href="#FIN：1-bit" class="headerlink" title="FIN：1 bit"></a>FIN：1 bit</h4><p>表示这是一个消息的最后的一帧。第一个帧也可能是最后一个。    </p>
<ul>
<li>0 : 还有后续帧     </li>
<li>1 : 最后一帧    </li>
</ul>
<h4 id="RSV1、2、3：-1-bit-each"><a href="#RSV1、2、3：-1-bit-each" class="headerlink" title="RSV1、2、3： 1 bit each"></a>RSV1、2、3： 1 bit each</h4><p>除非一个扩展经过协商赋予了非零值以某种含义，否则必须为0<br>如果没有定义非零值，并且收到了非零的RSV，则websocket链接会失败    </p>
<h4 id="Opcode：-4-bit"><a href="#Opcode：-4-bit" class="headerlink" title="Opcode： 4 bit"></a>Opcode： 4 bit</h4><p>解释说明 “Payload data” 的用途/功能<br>如果收到了未知的opcode，最后会断开链接<br>定义了以下几个opcode值:   </p>
<ul>
<li>0 : 代表连续的帧   </li>
<li>1 : text帧   </li>
<li>2 ： binary帧      </li>
<li>3-7 ： 为非控制帧而预留的     </li>
<li>8 ： 关闭握手帧    </li>
<li>9 ： ping帧    </li>
<li>A :  pong帧      </li>
<li>B-F ： 为非控制帧而预留的     </li>
</ul>
<h4 id="Mask：-1-bit"><a href="#Mask：-1-bit" class="headerlink" title="Mask： 1 bit"></a>Mask： 1 bit</h4><p>定义“payload data”是否被添加掩码<br>如果置1， “Masking-key”就会被赋值<br><strong>所有从客户端发往服务器的帧都会被置1</strong>        </p>
<h4 id="Payload-length：-7-bit-7-16-bit-7-64-bit"><a href="#Payload-length：-7-bit-7-16-bit-7-64-bit" class="headerlink" title="Payload length： 7 bit | 7+16 bit | 7+64 bit"></a>Payload length： 7 bit | 7+16 bit | 7+64 bit</h4><ul>
<li>payload data 的长度如果在0~125 bytes范围内，它就是payload length，  </li>
<li>如果是126， 紧随其后的被表示为16 bits的2 bytes无符号整型就是payload length，     </li>
<li>如果是127， 紧随其后的被表示为64 bits的8 bytes无符号整型就是payload length   </li>
</ul>
<h4 id="Masking-key：-0-or-4-bytes"><a href="#Masking-key：-0-or-4-bytes" class="headerlink" title="Masking-key： 0 or 4 bytes"></a>Masking-key： 0 or 4 bytes</h4><p>所有从客户端发送到服务器的帧都包含一个32 bits的掩码（如果“mask bit”被设置成1），否则为0 bit。<br>一旦掩码被设置，所有接收到的payload data都必须与该值以一种算法做异或运算来获取真实值。   </p>
<h4 id="Payload-data-x-y-bytes"><a href="#Payload-data-x-y-bytes" class="headerlink" title="Payload data: (x+y) bytes"></a>Payload data: (x+y) bytes</h4><p>它是”Extension data”和”Application data”的总和，一般扩展数据为空。</p>
<h4 id="Extension-data-x-bytes"><a href="#Extension-data-x-bytes" class="headerlink" title="Extension data: x bytes"></a>Extension data: x bytes</h4><ul>
<li>除非扩展被定义，否则就是0   </li>
<li>任何扩展必须指定其Extension data的长度   </li>
</ul>
<h4 id="Application-data-y-bytes"><a href="#Application-data-y-bytes" class="headerlink" title="Application data: y bytes"></a>Application data: y bytes</h4><p>占据”Extension data”之后的剩余帧的空间   </p>
<h2 id="Masking"><a href="#Masking" class="headerlink" title="Masking"></a>Masking</h2><p>当mask字段的值为1时，payload-data字段的数据需要经这个掩码进行解密。   </p>
<ul>
<li>服务器推送到客户端的消息中，mask字段是0,也就是说Masking-key为空。这样的话，数据的解析就不涉及到掩码，直接使用就行。    </li>
<li>如果消息是从客户端发送到服务器，那么mask一定是1,Masking-key一定是一个32bit的值。    </li>
</ul>
<p>下面为mask为1的一个例子   </p>
<p>当读取到payload-data时，首先将数据按byte依次与Masking-key中的4个byte按照如下算法做异或。    </p>
<pre><code class="java"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">maskPayload</span><span class="params">(<span class="keyword">byte</span>[] payload)</span> </span>{
   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;payload.length;i++){
        payload[i]^=mask[i%<span class="number">4</span>];
    }
}
</code></pre>
<h2 id="帧的类别"><a href="#帧的类别" class="headerlink" title="帧的类别"></a>帧的类别</h2><h3 id="控制帧"><a href="#控制帧" class="headerlink" title="控制帧"></a>控制帧</h3><ul>
<li>控制帧用来说明WebSocket的状态信息，用来控制分片、连接的关闭等等。所有的控制帧必须有一个小于等于125字节的payload，并且control Frames不允许被分片。     </li>
<li>Opcode为0x0（持续的帧），0x8（关闭连接），0x9（Ping帧）和0xA（Pong帧）代表控制帧     </li>
</ul>
<h3 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h3><p>前面我们总是谈到“控制帧”和“非控制帧”，想必大家已經看出来一些门路。其实数据帧就是非控制帧。因为这个帧并不是用来提供协议连接状态信息的。<br>数据帧由最高符号位是0的Opcode确定，现在可用的几个数据帧的Opcode是0x1（utf-8文本）、0x2（二进制数据）。      </p>
<h2 id="分片（Fragment）"><a href="#分片（Fragment）" class="headerlink" title="分片（Fragment）"></a>分片（Fragment）</h2><p>理论上来说，每个帧（Frame）的大小是没有限制的，因为payload-data在整个帧的最后。但是发送的数据有不能太大，否则 WebSocket 很可能无法高效的利用网络带宽。那如果我们想传点大数据该怎么办呢？WebSocket协议给我们提供了一个方法：分片，将原本一个大的帧拆分成数个小的帧。下面是把一个大的Frame分片的图示：   </p>
<blockquote>
<p> 编号：      0  1  ….  n-2 n-1<br>  分片：     |——|——|……|——|——|<br>  FIN：      0  0  ….   0  1<br>  Opcode：   !0 0  ….   0  0   </p>
</blockquote>
<p>由图可知，    </p>
<ul>
<li>第一个分片的FIN为0，Opcode为非0值（0x1或0x2）   </li>
<li>最后一个分片的FIN为1，Opcode为0    </li>
<li>中间分片的FIN和Opcode二者均为0     </li>
</ul>
<h2 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h2><p>正常的连接关闭流程   </p>
<ol>
<li>发送关闭连接请求（Close Handshake）<br>即发送Close Frame（Opcode为0x8）。一旦一端发送/接收了一个Close Frame，就开始了Close Handshake，并且连接状态变为Closing。   </li>
<li>Close Frame中如果包含Payload data，则data的前2字节必须为两字节的无符号整形，（同样遵循网络字节序：BE）用于表示状态码，如果2byte之后仍有内容，则应包含utf-8编码的关闭理由。     </li>
<li>如果一端在之前未发送过Close Frame，则当他收到一个Close Frame时，必须回复一个Close Frame。但如果它正在发送数据，则可以推迟到当前数据发送完，再发送Close Frame。比如Close Frame在分片发送时到达，则要等到所有剩余分片发送完之后，才可以作出回复。   </li>
<li>关闭WebSocket连接   </li>
<li>当一端已经收到Close Frame，并已发送了Close Frame时，就可以关闭连接了，close handshake过程结束。这时丢弃所有已经接收到的末尾字节。   </li>
<li>关闭TCP连接   </li>
<li>当底层TCP连接关闭时，连接状态变为Closed。     </li>
</ol>
<h3 id="clean-closed"><a href="#clean-closed" class="headerlink" title="clean closed"></a>clean closed</h3><ul>
<li>如果TCP连接在Close handshake完成之后关闭，就表示WebSocket连接已经clean closed（彻底关闭）了。   </li>
<li>如果WebSocket连接并未成功建立，状态也为连接已关闭，但并不是clean closed。   </li>
</ul>
<h3 id="正常关闭"><a href="#正常关闭" class="headerlink" title="正常关闭"></a>正常关闭</h3><p>正常关闭过程属于clean close，应当包含close handshake。  </p>
<p>通常来讲，应该由服务器关闭底层TCP连接，而客户端应该等待服务器关闭连接，除非等待超时的话，那么自己关闭底层TCP连接。    </p>
<h3 id="异常关闭"><a href="#异常关闭" class="headerlink" title="异常关闭"></a>异常关闭</h3><p>由于某种算法或规定，一端直接关闭连接。（特指在open handshake（打开连接）阶段）<br>底层连接丢失导致的连接中断。 </p>
<h3 id="连接失败"><a href="#连接失败" class="headerlink" title="连接失败"></a>连接失败</h3><p>由于某种算法或规范要求指定连接失败。这时，客户端和服务器必须关闭WebSocket连接。当一端得知连接失败时，不准再处理数据，包括响应close frame。     </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WebSocket传输的数据都是以Frame（帧）的形式实现的，就像TCP/UDP协议中的报文段Segment。下面就是一个Frame：（以bit为单位表示）   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 0                   1                 
    
    </summary>
    
      <category term="网络协议" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="WebSocket" scheme="http://yoursite.com/tags/WebSocket/"/>
    
  </entry>
  
</feed>
