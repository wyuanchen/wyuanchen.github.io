<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wYuan&#39;s Blog</title>
  <subtitle>Enjoy the world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-31T15:46:29.631Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wenyuan Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TreeMap原理学习</title>
    <link href="http://yoursite.com/2017/03/31/TreeMap%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/03/31/TreeMap原理学习/</id>
    <published>2017-03-31T15:31:22.000Z</published>
    <updated>2017-03-31T15:46:29.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p><code>TreeMap</code>底层是由红黑树实现的，所以满足红黑树的性质：</p>
<ul>
<li><p>每个结点要么是红的，要么是黑的。  </p>
</li>
<li><p>根结点是黑的。  </p>
</li>
<li><p>每个叶结点（叶结点即指树尾端<code>NIL</code>指针或<code>NULL</code>结点）是黑的。  </p>
</li>
<li><p>如果一个结点是红的，那么它的俩个儿子都是黑的。  </p>
</li>
<li><p>对于任一结点而言，其到叶结点树尾端NIL指针的每一条路径都包含相同数目的黑结点。</p>
</li>
</ul>
<p>红黑树，本质上来说就是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为<code>O(log n)</code>。</p>
<a id="more"></a>
<p>下面是一棵红黑树的示意图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1637925-4973e62518192bcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="内部结点"><a href="#内部结点" class="headerlink" title="内部结点"></a>内部结点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    K key;</div><div class="line">    V value;</div><div class="line">    Entry&lt;K,V&gt; left;</div><div class="line">    Entry&lt;K,V&gt; right;</div><div class="line">    Entry&lt;K,V&gt; parent;</div><div class="line">    <span class="keyword">boolean</span> color = BLACK;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Make a new cell with given key, value, and parent, and with</div><div class="line">     * &#123;<span class="doctag">@code</span> null&#125; child links, and BLACK color.</div><div class="line">     */</div><div class="line">    Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">this</span>.parent = parent;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</div><div class="line">        V oldValue = <span class="keyword">this</span>.value;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> valEquals(key,e.getKey()) &amp;&amp; valEquals(value,e.getValue());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> keyHash = (key==<span class="keyword">null</span> ? <span class="number">0</span> : key.hashCode());</div><div class="line">        <span class="keyword">int</span> valueHash = (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</div><div class="line">        <span class="keyword">return</span> keyHash ^ valueHash;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> key + <span class="string">"="</span> + value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h2><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><p><img src="http://upload-images.jianshu.io/upload_images/1637925-fbb109dbaa9b2c48.gif?imageMogr2/auto-orient/strip" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateLeft</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">        Entry&lt;K,V&gt; r = p.right;</div><div class="line">        p.right = r.left;</div><div class="line">        <span class="keyword">if</span> (r.left != <span class="keyword">null</span>)</div><div class="line">            r.left.parent = p;</div><div class="line">        r.parent = p.parent;</div><div class="line">        <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</div><div class="line">            root = r;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p.parent.left == p)</div><div class="line">            p.parent.left = r;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            p.parent.right = r;</div><div class="line">        r.left = p;</div><div class="line">        p.parent = r;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><p><img src="http://upload-images.jianshu.io/upload_images/1637925-185dea52a871f85e.gif?imageMogr2/auto-orient/strip" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">        Entry&lt;K,V&gt; l = p.left;</div><div class="line">        p.left = l.right;</div><div class="line">        <span class="keyword">if</span> (l.right != <span class="keyword">null</span>) l.right.parent = p;</div><div class="line">        l.parent = p.parent;</div><div class="line">        <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</div><div class="line">            root = l;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p.parent.right == p)</div><div class="line">            p.parent.right = l;</div><div class="line">        <span class="keyword">else</span> p.parent.left = l;</div><div class="line">        l.right = p;</div><div class="line">        p.parent = l;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><ul>
<li><p>红黑树每次插入的新结点都是红色。</p>
</li>
<li><p>红黑树的插入相当于在二叉查找树插入的基础上，为了重新恢复平衡，继续做了插入修复操作。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123; </div><div class="line">    <span class="comment">// 先以 t 保存链表的 root 结点</span></div><div class="line">    Entry&lt;K,V&gt; t = root; </div><div class="line">    <span class="comment">// 如果 t==null，表明是一个空链表，即该 TreeMap 里没有任何 Entry </span></div><div class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>) </div><div class="line">    &#123; </div><div class="line">        <span class="comment">// 将新的 key-value 创建一个 Entry，并将该 Entry 作为 root </span></div><div class="line">        root = <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, <span class="keyword">null</span>); </div><div class="line">        <span class="comment">// 设置该 Map 集合的 size 为 1，代表包含一个 Entry </span></div><div class="line">        size = <span class="number">1</span>; </div><div class="line">        <span class="comment">// 记录修改次数为 1 </span></div><div class="line">        modCount++; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">int</span> cmp; </div><div class="line">    Entry&lt;K,V&gt; parent; </div><div class="line">    Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator; </div><div class="line">    <span class="comment">// 如果比较器 cpr 不为 null，即表明采用定制排序</span></div><div class="line">    <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) </div><div class="line">    &#123; </div><div class="line">        <span class="keyword">do</span> &#123; </div><div class="line">            <span class="comment">// 使用 parent 上次循环后的 t 所引用的 Entry </span></div><div class="line">            parent = t; </div><div class="line">            <span class="comment">// 拿新插入 key 和 t 的 key 进行比较</span></div><div class="line">            cmp = cpr.compare(key, t.key); </div><div class="line">            <span class="comment">// 如果新插入的 key 小于 t 的 key，t 等于 t 的左边结点</span></div><div class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) </div><div class="line">                t = t.left; </div><div class="line">            <span class="comment">// 如果新插入的 key 大于 t 的 key，t 等于 t 的右边结点</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) </div><div class="line">                t = t.right; </div><div class="line">            <span class="comment">// 如果两个 key 相等，新的 value 覆盖原有的 value，</span></div><div class="line">            <span class="comment">// 并返回原有的 value </span></div><div class="line">            <span class="keyword">else</span> </div><div class="line">                <span class="keyword">return</span> t.setValue(value); </div><div class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> </div><div class="line">    &#123; </div><div class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(); </div><div class="line">        Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key; </div><div class="line">        <span class="keyword">do</span> &#123; </div><div class="line">            <span class="comment">// 使用 parent 上次循环后的 t 所引用的 Entry </span></div><div class="line">            parent = t; </div><div class="line">            <span class="comment">// 拿新插入 key 和 t 的 key 进行比较</span></div><div class="line">            cmp = k.compareTo(t.key); </div><div class="line">            <span class="comment">// 如果新插入的 key 小于 t 的 key，t 等于 t 的左边结点</span></div><div class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) </div><div class="line">                t = t.left; </div><div class="line">            <span class="comment">// 如果新插入的 key 大于 t 的 key，t 等于 t 的右边结点</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) </div><div class="line">                t = t.right; </div><div class="line">            <span class="comment">// 如果两个 key 相等，新的 value 覆盖原有的 value，</span></div><div class="line">            <span class="comment">// 并返回原有的 value </span></div><div class="line">            <span class="keyword">else</span> </div><div class="line">                <span class="keyword">return</span> t.setValue(value); </div><div class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>); </div><div class="line">    &#125; </div><div class="line">    <span class="comment">// 将新插入的结点作为 parent 结点的子结点</span></div><div class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, parent); </div><div class="line">    <span class="comment">// 如果新插入 key 小于 parent 的 key，则 e 作为 parent 的左子结点</span></div><div class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) </div><div class="line">        parent.left = e; </div><div class="line">    <span class="comment">// 如果新插入 key 小于 parent 的 key，则 e 作为 parent 的右子结点</span></div><div class="line">    <span class="keyword">else</span> </div><div class="line">        parent.right = e; </div><div class="line">    <span class="comment">// 修复红黑树</span></div><div class="line">    fixAfterInsertion(e);                               </div><div class="line">    size++; </div><div class="line">    modCount++; </div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>; </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="插入后的平衡修复"><a href="#插入后的平衡修复" class="headerlink" title="插入后的平衡修复"></a>插入后的平衡修复</h3><p>新插入的结点都先被设置为红色。</p>
<p>无需修复的情况：</p>
<ol>
<li><p>如果插入的是根结点，因为原树是空树，所以直接把此结点涂为黑色。</p>
</li>
<li><p>如果插入的结点的父结点是黑色，红黑树没有被破坏，所以此时也是什么也不做。</p>
</li>
</ol>
<p>需要修复的情况：</p>
<ol>
<li><p>如果当前结点的父结点是红色且祖父结点的另一个子结点（叔叔结点）是红色</p>
</li>
<li><p>当前结点的父结点是红色，叔叔结点是黑色，当前结点是其父结点的右子</p>
</li>
<li><p>当前结点的父结点是红色，叔叔结点是黑色，当前结点是其父结点的左子</p>
</li>
</ol>
<h4 id="修复情况1：当前结点的父结点是红色且祖父结点的另一个子结点（叔叔结点）是红色"><a href="#修复情况1：当前结点的父结点是红色且祖父结点的另一个子结点（叔叔结点）是红色" class="headerlink" title="修复情况1：当前结点的父结点是红色且祖父结点的另一个子结点（叔叔结点）是红色"></a>修复情况1：当前结点的父结点是红色且祖父结点的另一个子结点（叔叔结点）是红色</h4><p>此时父结点的父结点一定存在，否则插入前就已不是红黑树。<br>与此同时，又分为父结点是祖父结点的左子还是右子，对于对称性，我们只要解开一个方向就可以了。</p>
<p>在此，我们只考虑父结点为祖父左子的情况。<br>同时，还可以分为当前结点是其父结点的左子还是右子，但是处理方式是一样的。我们将此归为同一类。   </p>
<h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>将当前结点的父结点和叔叔结点涂黑，祖父结点涂红，把当前结点指向祖父结点，从新的当前结点重新开始算法。</p>
<p>例子：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1637925-1008c055cb42f52e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>新插入结点N的父结点P和叔叔结点U都是红色。  </p>
<p>方法是：将祖父结点G设置为红色，父结点P和叔叔结点U设置为黑色，这时候就看似平衡了。   </p>
<p>但是，如果祖父结点G的父结点也是红色，这时候又违背规则（两个红色结点不能相邻），<br>方法是：将GPUN这一组看成一个新的结点，按照前面的方案递归；  </p>
<p>如果一直递归到根结点为红就违反规则（根结点必须为黑色）了，<br>方法是直接将根结点设置为黑色（两个连续黑色是没问题的）</p>
<h4 id="修复情况2：当前结点的父结点是红色-叔叔结点是黑色或者缺少，当前结点是其父结点的右子"><a href="#修复情况2：当前结点的父结点是红色-叔叔结点是黑色或者缺少，当前结点是其父结点的右子" class="headerlink" title="修复情况2：当前结点的父结点是红色,叔叔结点是黑色或者缺少，当前结点是其父结点的右子"></a>修复情况2：当前结点的父结点是红色,叔叔结点是黑色或者缺少，当前结点是其父结点的右子</h4><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>当前结点的父结点做为新的当前结点，以新当前结点为支点左旋。</p>
<p>例子：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1637925-a1989d9144ce89b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>左旋父结点P。左旋后N和P角色互换。</p>
<p>但是P和N还是连续的两个红色结点，还没有平衡，所以进入第三种修复情况。</p>
<h4 id="修复情况3：当前结点的父结点是红色-叔叔结点是黑色或者缺少，当前结点是其父结点的左子"><a href="#修复情况3：当前结点的父结点是红色-叔叔结点是黑色或者缺少，当前结点是其父结点的左子" class="headerlink" title="修复情况3：当前结点的父结点是红色,叔叔结点是黑色或者缺少，当前结点是其父结点的左子"></a>修复情况3：当前结点的父结点是红色,叔叔结点是黑色或者缺少，当前结点是其父结点的左子</h4><h5 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h5><p>父结点变为黑色，祖父结点变为红色，在<strong>祖父结点为支点</strong>右旋。<br>最后，把根结点涂为黑色，整棵红黑树便重新恢复了平衡</p>
<p>例子：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1637925-877db12aad3f2817.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>右旋祖父结点G，然后将P设置为黑色，G设置为红色，达到平衡。<br>此时父结点P是黑色，所有不用担心P的父结点是红色。</p>
<p><strong>上面讨论的3种情况都是当前结点N的父结点P是祖父结点G的左孩子，所以如果父结点P是祖父结点G的右孩子的情形是相应的一种对称，只需要把相应的左旋和右旋对调即可</strong></p>
<h3 id="TreeMap的插入修复代码"><a href="#TreeMap的插入修复代码" class="headerlink" title="TreeMap的插入修复代码"></a><code>TreeMap</code>的插入修复代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 插入结点后修复红黑树</span></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixAfterInsertion</span><span class="params">(Entry&lt;K,V&gt; x)</span> </span></div><div class="line"> &#123; </div><div class="line">    x.color = RED; </div><div class="line">    <span class="comment">// 直到 x 结点的父结点不是根，且 x 的父结点不是红色</span></div><div class="line">    <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; x != root </div><div class="line">        &amp;&amp; x.parent.color == RED) </div><div class="line">    &#123; </div><div class="line">        <span class="comment">// 如果 x 的父结点是其父结点的左子结点</span></div><div class="line">        <span class="keyword">if</span> (parentOf(x) == leftOf(parentOf(parentOf(x)))) </div><div class="line">        &#123; </div><div class="line">            <span class="comment">// 获取 x 的父结点的兄弟结点</span></div><div class="line">            Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x))); </div><div class="line">            <span class="comment">// 如果 x 的父结点的兄弟结点是红色</span></div><div class="line">            <span class="keyword">if</span> (colorOf(y) == RED) </div><div class="line">            &#123; </div><div class="line">                <span class="comment">// 将 x 的父结点设为黑色</span></div><div class="line">                setColor(parentOf(x), BLACK); </div><div class="line">                <span class="comment">// 将 x 的父结点的兄弟结点设为黑色</span></div><div class="line">                setColor(y, BLACK); </div><div class="line">                <span class="comment">// 将 x 的父结点的父结点设为红色</span></div><div class="line">                setColor(parentOf(parentOf(x)), RED); </div><div class="line">                x = parentOf(parentOf(x)); </div><div class="line">            &#125; </div><div class="line">            <span class="comment">// 如果 x 的父结点的兄弟结点是黑色</span></div><div class="line">            <span class="keyword">else</span> </div><div class="line">            &#123; </div><div class="line">                <span class="comment">// 如果 x 是其父结点的右子结点</span></div><div class="line">                <span class="keyword">if</span> (x == rightOf(parentOf(x))) </div><div class="line">                &#123; </div><div class="line">                    <span class="comment">// 将 x 的父结点设为 x </span></div><div class="line">                    x = parentOf(x); </div><div class="line">                    rotateLeft(x); </div><div class="line">                &#125; </div><div class="line">                <span class="comment">// 把 x 的父结点设为黑色</span></div><div class="line">                setColor(parentOf(x), BLACK); </div><div class="line">                <span class="comment">// 把 x 的父结点的父结点设为红色</span></div><div class="line">                setColor(parentOf(parentOf(x)), RED); </div><div class="line">                rotateRight(parentOf(parentOf(x))); </div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">        <span class="comment">// 如果 x 的父结点是其父结点的右子结点</span></div><div class="line">        <span class="keyword">else</span> </div><div class="line">        &#123; </div><div class="line">            <span class="comment">// 获取 x 的父结点的兄弟结点</span></div><div class="line">            Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x))); </div><div class="line">            <span class="comment">// 如果 x 的父结点的兄弟结点是红色</span></div><div class="line">            <span class="keyword">if</span> (colorOf(y) == RED) </div><div class="line">            &#123; </div><div class="line">                <span class="comment">// 将 x 的父结点设为黑色。</span></div><div class="line">                setColor(parentOf(x), BLACK); </div><div class="line">                <span class="comment">// 将 x 的父结点的兄弟结点设为黑色</span></div><div class="line">                setColor(y, BLACK); </div><div class="line">                <span class="comment">// 将 x 的父结点的父结点设为红色</span></div><div class="line">                setColor(parentOf(parentOf(x)), RED); </div><div class="line">                <span class="comment">// 将 x 设为 x 的父结点的结点</span></div><div class="line">                x = parentOf(parentOf(x)); </div><div class="line">            &#125; </div><div class="line">            <span class="comment">// 如果 x 的父结点的兄弟结点是黑色</span></div><div class="line">            <span class="keyword">else</span> </div><div class="line">            &#123; </div><div class="line">                <span class="comment">// 如果 x 是其父结点的左子结点</span></div><div class="line">                <span class="keyword">if</span> (x == leftOf(parentOf(x))) </div><div class="line">                &#123; </div><div class="line">                    <span class="comment">// 将 x 的父结点设为 x </span></div><div class="line">                    x = parentOf(x); </div><div class="line">                    rotateRight(x); </div><div class="line">                &#125; </div><div class="line">                <span class="comment">// 把 x 的父结点设为黑色</span></div><div class="line">                setColor(parentOf(x), BLACK); </div><div class="line">                <span class="comment">// 把 x 的父结点的父结点设为红色</span></div><div class="line">                setColor(parentOf(parentOf(x)), RED); </div><div class="line">                rotateLeft(parentOf(parentOf(x))); </div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="comment">// 将根结点设为黑色</span></div><div class="line">    root.color = BLACK; </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>当程序从排序二叉树中删除一个结点之后，为了让它依然保持为排序二叉树，程序必须对该排序二叉树进行维护。维护可分为如下几种情况：</p>
<ul>
<li><p>被删除的结点是叶子结点，则只需将它从其父结点中删除即可。</p>
</li>
<li><p>被删除结点 p 只有左子树，将 p 的左子树 pL 添加成 p 的父结点的左子树即可；被删除结点 p 只有右子树，将 p 的右子树 pR 添加成 p 的父结点的右子树即可。</p>
</li>
<li><p>若被删除结点 p 的左、右子树均非空，以 p 结点的中序后继替代 p 所指结点，然后再从原排序二叉树中删去中序后继结点即可</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteEntry</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span></div><div class="line"> &#123; </div><div class="line">    modCount++; </div><div class="line">    size--; </div><div class="line">    <span class="comment">// 如果被删除结点的左子树、右子树都不为空</span></div><div class="line">    <span class="keyword">if</span> (p.left != <span class="keyword">null</span> &amp;&amp; p.right != <span class="keyword">null</span>) </div><div class="line">    &#123; </div><div class="line">        <span class="comment">// 用 p 结点的中序后继结点代替 p 结点</span></div><div class="line">        Entry&lt;K,V&gt; s = successor (p); </div><div class="line">        p.key = s.key; </div><div class="line">        p.value = s.value; </div><div class="line">        p = s; </div><div class="line">    &#125; </div><div class="line">    <span class="comment">// 如果 p 结点的左结点存在，replacement 代表左结点；否则代表右结点。</span></div><div class="line">    Entry&lt;K,V&gt; replacement = (p.left != <span class="keyword">null</span> ? p.left : p.right); </div><div class="line">    <span class="keyword">if</span> (replacement != <span class="keyword">null</span>) </div><div class="line">    &#123; </div><div class="line">        replacement.parent = p.parent; </div><div class="line">        <span class="comment">// 如果 p 没有父结点，则 replacemment 变成父结点</span></div><div class="line">        <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>) </div><div class="line">            root = replacement; </div><div class="line">        <span class="comment">// 如果 p 结点是其父结点的左子结点</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.left) </div><div class="line">            p.parent.left  = replacement; </div><div class="line">        <span class="comment">// 如果 p 结点是其父结点的右子结点</span></div><div class="line">        <span class="keyword">else</span> </div><div class="line">            p.parent.right = replacement; </div><div class="line">        p.left = p.right = p.parent = <span class="keyword">null</span>; </div><div class="line">        <span class="comment">// 修复红黑树</span></div><div class="line">        <span class="keyword">if</span> (p.color == BLACK) </div><div class="line">            fixAfterDeletion(replacement);       <span class="comment">// ①</span></div><div class="line">    &#125; </div><div class="line">    <span class="comment">// 如果 p 结点没有父结点</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>) </div><div class="line">    &#123; </div><div class="line">        root = <span class="keyword">null</span>; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> </div><div class="line">    &#123; </div><div class="line">        <span class="keyword">if</span> (p.color == BLACK) </div><div class="line">            <span class="comment">// 修复红黑树</span></div><div class="line">            fixAfterDeletion(p);                 <span class="comment">// ②</span></div><div class="line">        <span class="keyword">if</span> (p.parent != <span class="keyword">null</span>) </div><div class="line">        &#123; </div><div class="line">            <span class="comment">// 如果 p 是其父结点的左子结点</span></div><div class="line">            <span class="keyword">if</span> (p == p.parent.left) </div><div class="line">                p.parent.left = <span class="keyword">null</span>; </div><div class="line">            <span class="comment">// 如果 p 是其父结点的右子结点</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.right) </div><div class="line">                p.parent.right = <span class="keyword">null</span>; </div><div class="line">            p.parent = <span class="keyword">null</span>; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="删除后的平衡修复"><a href="#删除后的平衡修复" class="headerlink" title="删除后的平衡修复"></a>删除后的平衡修复</h3><p>无需修复的情况：</p>
<ul>
<li>如果删除的是红色结点，那么原红黑树的性质依旧保持，此时不用做修正操作</li>
</ul>
<p>如果删除的结点是黑色的话则需要进行修复</p>
<p>修复的情况有：</p>
<ol>
<li><p>当前结点为黑色，兄弟结点为红色</p>
</li>
<li><p>当前结点为黑色，兄弟结点为黑色，其兄弟结点的两个孩子节点都是黑色，父结点为任意颜色</p>
</li>
<li><p>当前结点为黑色，兄弟结点为黑色，且兄弟结点的左孩子为红色，右孩子为黑色，父结点为任意颜色</p>
</li>
<li><p>当前结点为黑色，兄弟结点为黑色，且兄弟结点的右孩子为红色，左孩子为任意颜色，父结点为任意颜色</p>
</li>
</ol>
<h4 id="情况1：当前结点为黑色，兄弟结点为红色"><a href="#情况1：当前结点为黑色，兄弟结点为红色" class="headerlink" title="情况1：当前结点为黑色，兄弟结点为红色"></a>情况1：当前结点为黑色，兄弟结点为红色</h4><p>因为兄弟结点为红色，所以父结点肯定为黑色。</p>
<h5 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h5><p>交换兄弟结点和父结点的颜色，然后左旋父结点。<br>调整还未平衡，进入情况2。</p>
<p>例子：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1637925-1a0af4d0f585cd9c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>交换P和B的颜色，左旋父节点P。此时并未完成平衡</p>
<h4 id="情况2：当前结点为黑色，兄弟结点为黑色，其兄弟结点的两个孩子节点都是黑色，父结点为任意颜色"><a href="#情况2：当前结点为黑色，兄弟结点为黑色，其兄弟结点的两个孩子节点都是黑色，父结点为任意颜色" class="headerlink" title="情况2：当前结点为黑色，兄弟结点为黑色，其兄弟结点的两个孩子节点都是黑色，父结点为任意颜色"></a>情况2：当前结点为黑色，兄弟结点为黑色，其兄弟结点的两个孩子节点都是黑色，父结点为任意颜色</h4><h5 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h5><p>把兄弟结点变为红色，然后把当前结点设为父结点，继续查看是否需要调整。</p>
<p>例子1：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1637925-be903bf2939fb2db.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>N的父节点P是黑色，且兄弟节点B和它的两个孩子节点也都是黑色。  </p>
<p>将N的兄弟节点B改为红色，这样从P出发到叶子节点的路径都包含了相同的黑色节点，但是，对于节点P这个子树，P的父节点G到P的叶子节点路径上的黑色节点就少了一个，此时需要将P整体看做一个节点，继续调整</p>
<p>例子2：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1637925-50e11d926d333e30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>N的父节点P为红色，兄弟节点B和它的两个孩子节点也都是黑色。</p>
<p>此时只需要交换P和B的颜色，将P改为黑色，B改为红色，则可到达平衡。这相当于既然节点N路径少了一个黑色节点，那么B路径也少一个黑色节点，这两个路径达到平衡，为了防止P路径少一个黑色节点，将P节点置黑，则达到最终平衡。</p>
<h4 id="情况3：当前结点为黑色，兄弟结点为黑色，且兄弟结点的左孩子为红色，右孩子为黑色，父结点为任意颜色"><a href="#情况3：当前结点为黑色，兄弟结点为黑色，且兄弟结点的左孩子为红色，右孩子为黑色，父结点为任意颜色" class="headerlink" title="情况3：当前结点为黑色，兄弟结点为黑色，且兄弟结点的左孩子为红色，右孩子为黑色，父结点为任意颜色"></a>情况3：当前结点为黑色，兄弟结点为黑色，且兄弟结点的左孩子为红色，右孩子为黑色，父结点为任意颜色</h4><h5 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h5><p>把兄弟结点颜色变红，兄弟结点的左孩子变黑，然后右旋兄弟结点，进入情况4。</p>
<p>例子：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1637925-a8487108d0214965.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>N的兄弟节点B是黑色，B的左孩子节点BL是红色，B的右孩子节点BR是黑色，P为任意颜色。</p>
<p>交换B和BL的颜色，右旋节点B。此时N子树路径并没有增加黑色节点，也就是没有达到平衡，此时进入情况4。</p>
<h4 id="情况4：当前结点为黑色，兄弟结点为黑色，且兄弟结点的右孩子为红色，左孩子为任意颜色，父结点为任意颜色"><a href="#情况4：当前结点为黑色，兄弟结点为黑色，且兄弟结点的右孩子为红色，左孩子为任意颜色，父结点为任意颜色" class="headerlink" title="情况4：当前结点为黑色，兄弟结点为黑色，且兄弟结点的右孩子为红色，左孩子为任意颜色，父结点为任意颜色"></a>情况4：当前结点为黑色，兄弟结点为黑色，且兄弟结点的右孩子为红色，左孩子为任意颜色，父结点为任意颜色</h4><h5 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h5><p>兄弟结点变为父结点的颜色，兄弟结点的右孩子变为黑色，父结点变为黑色，左旋父结点，这个时候已经达到平衡。</p>
<p>例子：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1637925-54d3ff73d1eba579.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>N的兄弟节点B是黑色，B的右孩子节点BR是红色，B的左孩子节点BL任意颜色，P任意颜色。  </p>
<p>BR变为黑色，P变为黑色，B变为P的颜色；左旋节点P。首先给N路径增加一个黑色节点P，P原位置上的颜色不变；S路径少了一个黑色节点，于是将BR改为黑色，最终达到了平衡。</p>
<h3 id="TreeMap的删除修复代码"><a href="#TreeMap的删除修复代码" class="headerlink" title="TreeMap的删除修复代码"></a><code>TreeMap</code>的删除修复代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 删除节点后修复红黑树</span></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixAfterDeletion</span><span class="params">(Entry&lt;K,V&gt; x)</span> </span></div><div class="line"> &#123; </div><div class="line">    <span class="comment">// 直到 x 不是根节点，且 x 的颜色是黑色</span></div><div class="line">    <span class="keyword">while</span> (x != root &amp;&amp; colorOf(x) == BLACK) </div><div class="line">    &#123; </div><div class="line">        <span class="comment">// 如果 x 是其父节点的左子节点</span></div><div class="line">        <span class="keyword">if</span> (x == leftOf(parentOf(x))) </div><div class="line">        &#123; </div><div class="line">            <span class="comment">// 获取 x 节点的兄弟节点</span></div><div class="line">            Entry&lt;K,V&gt; sib = rightOf(parentOf(x)); </div><div class="line">            <span class="comment">// 如果 sib 节点是红色</span></div><div class="line">            <span class="keyword">if</span> (colorOf(sib) == RED) </div><div class="line">            &#123; </div><div class="line">                <span class="comment">// 将 sib 节点设为黑色</span></div><div class="line">                setColor(sib, BLACK); </div><div class="line">                <span class="comment">// 将 x 的父节点设为红色</span></div><div class="line">                setColor(parentOf(x), RED); </div><div class="line">                rotateLeft(parentOf(x)); </div><div class="line">                <span class="comment">// 再次将 sib 设为 x 的父节点的右子节点</span></div><div class="line">                sib = rightOf(parentOf(x)); </div><div class="line">            &#125; </div><div class="line">            <span class="comment">// 如果 sib 的两个子节点都是黑色</span></div><div class="line">            <span class="keyword">if</span> (colorOf(leftOf(sib)) == BLACK </div><div class="line">                &amp;&amp; colorOf(rightOf(sib)) == BLACK) </div><div class="line">            &#123; </div><div class="line">                <span class="comment">// 将 sib 设为红色</span></div><div class="line">                setColor(sib, RED); </div><div class="line">                <span class="comment">// 让 x 等于 x 的父节点</span></div><div class="line">                x = parentOf(x); </div><div class="line">            &#125; </div><div class="line">            <span class="keyword">else</span> </div><div class="line">            &#123; </div><div class="line">                <span class="comment">// 如果 sib 的只有右子节点是黑色</span></div><div class="line">                <span class="keyword">if</span> (colorOf(rightOf(sib)) == BLACK) </div><div class="line">                &#123; </div><div class="line">                    <span class="comment">// 将 sib 的左子节点也设为黑色</span></div><div class="line">                    setColor(leftOf(sib), BLACK); </div><div class="line">                    <span class="comment">// 将 sib 设为红色</span></div><div class="line">                    setColor(sib, RED); </div><div class="line">                    rotateRight(sib); </div><div class="line">                    sib = rightOf(parentOf(x)); </div><div class="line">                &#125; </div><div class="line">                <span class="comment">// 设置 sib 的颜色与 x 的父节点的颜色相同</span></div><div class="line">                setColor(sib, colorOf(parentOf(x))); </div><div class="line">                <span class="comment">// 将 x 的父节点设为黑色</span></div><div class="line">                setColor(parentOf(x), BLACK); </div><div class="line">                <span class="comment">// 将 sib 的右子节点设为黑色</span></div><div class="line">                setColor(rightOf(sib), BLACK); </div><div class="line">                rotateLeft(parentOf(x)); </div><div class="line">                x = root; </div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">        <span class="comment">// 如果 x 是其父节点的右子节点</span></div><div class="line">        <span class="keyword">else</span> </div><div class="line">        &#123; </div><div class="line">            <span class="comment">// 获取 x 节点的兄弟节点</span></div><div class="line">            Entry&lt;K,V&gt; sib = leftOf(parentOf(x)); </div><div class="line">            <span class="comment">// 如果 sib 的颜色是红色</span></div><div class="line">            <span class="keyword">if</span> (colorOf(sib) == RED) </div><div class="line">            &#123; </div><div class="line">                <span class="comment">// 将 sib 的颜色设为黑色</span></div><div class="line">                setColor(sib, BLACK); </div><div class="line">                <span class="comment">// 将 sib 的父节点设为红色</span></div><div class="line">                setColor(parentOf(x), RED); </div><div class="line">                rotateRight(parentOf(x)); </div><div class="line">                sib = leftOf(parentOf(x)); </div><div class="line">            &#125; </div><div class="line">            <span class="comment">// 如果 sib 的两个子节点都是黑色</span></div><div class="line">            <span class="keyword">if</span> (colorOf(rightOf(sib)) == BLACK </div><div class="line">                &amp;&amp; colorOf(leftOf(sib)) == BLACK) </div><div class="line">            &#123; </div><div class="line">                <span class="comment">// 将 sib 设为红色</span></div><div class="line">                setColor(sib, RED); </div><div class="line">                <span class="comment">// 让 x 等于 x 的父节点</span></div><div class="line">                x = parentOf(x); </div><div class="line">            &#125; </div><div class="line">            <span class="keyword">else</span> </div><div class="line">            &#123; </div><div class="line">                <span class="comment">// 如果 sib 只有左子节点是黑色</span></div><div class="line">                <span class="keyword">if</span> (colorOf(leftOf(sib)) == BLACK) </div><div class="line">                &#123; </div><div class="line">                    <span class="comment">// 将 sib 的右子节点也设为黑色</span></div><div class="line">                    setColor(rightOf(sib), BLACK); </div><div class="line">                    <span class="comment">// 将 sib 设为红色</span></div><div class="line">                    setColor(sib, RED); </div><div class="line">                    rotateLeft(sib); </div><div class="line">                    sib = leftOf(parentOf(x)); </div><div class="line">                &#125; </div><div class="line">                <span class="comment">// 将 sib 的颜色设为与 x 的父节点颜色相同</span></div><div class="line">                setColor(sib, colorOf(parentOf(x))); </div><div class="line">                <span class="comment">// 将 x 的父节点设为黑色</span></div><div class="line">                setColor(parentOf(x), BLACK); </div><div class="line">                <span class="comment">// 将 sib 的左子节点设为黑色</span></div><div class="line">                setColor(leftOf(sib), BLACK); </div><div class="line">                rotateRight(parentOf(x)); </div><div class="line">                x = root; </div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    setColor(x, BLACK); </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="附加资料"><a href="#附加资料" class="headerlink" title="附加资料"></a>附加资料</h4><ul>
<li><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tree/" target="_blank" rel="external">通过分析 JDK 源代码研究 TreeMap 红黑树算法实现</a></p>
</li>
<li><p><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md" target="_blank" rel="external">教你透彻了解红黑树</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/210c2f4ca130" target="_blank" rel="external">Java集合干货系列-（四）TreeMap源码解析</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;性质&quot;&gt;&lt;a href=&quot;#性质&quot; class=&quot;headerlink&quot; title=&quot;性质&quot;&gt;&lt;/a&gt;性质&lt;/h2&gt;&lt;p&gt;&lt;code&gt;TreeMap&lt;/code&gt;底层是由红黑树实现的，所以满足红黑树的性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个结点要么是红的，要么是黑的。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根结点是黑的。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个叶结点（叶结点即指树尾端&lt;code&gt;NIL&lt;/code&gt;指针或&lt;code&gt;NULL&lt;/code&gt;结点）是黑的。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果一个结点是红的，那么它的俩个儿子都是黑的。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于任一结点而言，其到叶结点树尾端NIL指针的每一条路径都包含相同数目的黑结点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;红黑树，本质上来说就是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为&lt;code&gt;O(log n)&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>换了个新主题</title>
    <link href="http://yoursite.com/2017/03/30/%E6%8D%A2%E4%BA%86%E4%B8%AA%E6%96%B0%E4%B8%BB%E9%A2%98/"/>
    <id>http://yoursite.com/2017/03/30/换了个新主题/</id>
    <published>2017-03-30T15:49:06.000Z</published>
    <updated>2017-04-06T04:00:15.404Z</updated>
    
    <content type="html"><![CDATA[<p>换了个新主题NexT，看起来还不错，就是好像一些文章的排版出了问题。。。以后有时再慢慢搞吧=3=</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;换了个新主题NexT，看起来还不错，就是好像一些文章的排版出了问题。。。以后有时再慢慢搞吧=3=&lt;/p&gt;

    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>const关键字复习</title>
    <link href="http://yoursite.com/2017/03/17/const%E5%85%B3%E9%94%AE%E5%AD%97%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/03/17/const关键字复习/</id>
    <published>2017-03-17T15:56:06.000Z</published>
    <updated>2017-04-08T15:59:31.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="const对象默认为文件的局部变量"><a href="#const对象默认为文件的局部变量" class="headerlink" title="const对象默认为文件的局部变量"></a>const对象默认为文件的局部变量</h2><p>在全局作用域里定义非<code>const</code>变量时，它在整个程序中都可以访问，我们可以把一个非<code>const</code>变量定义在一个文件中，假设已经做了合适的声明，就可以在另外的文件中使用这个变量：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//file_1.cpp</span></div><div class="line"><span class="keyword">int</span> a; <span class="comment">//definition</span></div><div class="line"></div><div class="line"><span class="comment">//file_2.cpp</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a; <span class="comment">//使用的count来自file_1.cpp</span></div><div class="line">a++;</div></pre></td></tr></table></figure>
<p>与其他变量不同，除非特别说明，在全局作用域声明的<code>const</code>变量是定义该对象的文件的局部变量。此变量只存在于那个文件中，不能被其他文件访问。<br>通过指定<code>const</code>变量为<code>extern</code>，就可以在整个程序中访问<code>const</code>对象。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//file_1.cpp</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="comment">//file_2.cpp</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> V; <span class="comment">//使用的V来自file_1.cpp</span></div><div class="line">V++;</div></pre></td></tr></table></figure>
<h2 id="const对象的动态数组"><a href="#const对象的动态数组" class="headerlink" title="const对象的动态数组"></a>const对象的动态数组</h2><h3 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h3><p>如果我们在自由存储区中创建的数组存储了<strong>内置类型的<code>const</code>对象</strong>，则必须为这个数组提供初始化： 因为数组元素都是<code>const</code>对象，无法赋值。实现这个要求的唯一方法是对数组做值初始化。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p1 = <span class="keyword">new</span> <span class="keyword">const</span> <span class="keyword">int</span>[<span class="number">100</span>]; <span class="comment">//错误</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p2 = <span class="keyword">new</span> <span class="keyword">const</span> <span class="keyword">int</span>[<span class="number">100</span>](); <span class="comment">//正确</span></div></pre></td></tr></table></figure>
<h3 id="非内置类型"><a href="#非内置类型" class="headerlink" title="非内置类型"></a>非内置类型</h3><p>C++允许定义类类型的const数组，但该类类型必须提供默认构造函数：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> *p3 = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">100</span>]; <span class="comment">//这里会调用string类的默认构造函数初始化数组元素</span></div></pre></td></tr></table></figure>
<h2 id="用const修饰指针"><a href="#用const修饰指针" class="headerlink" title="用const修饰指针"></a>用const修饰指针</h2><ul>
<li><p>指针本身是常量不可变：<code>char* const pContent;</code></p>
</li>
<li><p>指针所指向的内容是常量不可变：<code>const char *pContent;</code></p>
</li>
<li><p>两者都不可变：<code>const char* const pContent;</code></p>
</li>
</ul>
<h2 id="用const修饰函数的参数"><a href="#用const修饰函数的参数" class="headerlink" title="用const修饰函数的参数"></a>用const修饰函数的参数</h2><h3 id="指针传递"><a href="#指针传递" class="headerlink" title="指针传递"></a>指针传递</h3><p>如果输入参数采用<strong>“指针传递”</strong>，那么加<code>const</code> 修饰可以防止意外地改动该指针，起到保护作用</p>
<h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><p>如果输入参数采用<strong>“值传递”</strong>，由于函数将自动产生临时变量用于复制该参数，该输入参数本来就无需保护，所以不要加<code>const</code> 修饰</p>
<h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><p>为了提高效率，可以将函数声明改为<code>void Func(A &amp;a)</code>，因为<strong>“引用传递”</strong>仅借用一下参数的别名而已，不需要产生临时对象。    </p>
<p>但是函数<code>void Func(A &amp;a)</code> 存在一个缺点：“引用传递”有可能改变参数a，这是我们不期望的。解决这个问题很容易，加<code>const</code>修饰即可，因此函数最终成为<code>void Func(const A &amp;a)</code>。</p>
<h4 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h4><p>对于<strong>内置数据类型</strong>的输入参数，不要将<strong>“值传递”</strong>的方式改为<strong>“<code>const</code> 引用传递”</strong>。否则既达不到提高效率的目的，又降低了函数的可理解性。    </p>
<p><strong>因为内部数据类型的参数不存在构造、析构的过程，而复制也非常快，“值传递”和“引用传递”的效率几乎相当</strong></p>
<p>例如<code>void Func(int x)</code> 不应该改为<code>void Func(const int &amp;x)</code>。</p>
<h4 id="非内置数据类型"><a href="#非内置数据类型" class="headerlink" title="非内置数据类型"></a>非内置数据类型</h4><p>对于非内置数据类型的输入参数，应该将<strong>“值传递”</strong>的方式改为<strong>“<code>const</code> 引用传递”</strong>，目的是提高效率。</p>
<p>例如将<code>void Func(A a)</code> 改为<code>void Func(const A &amp;a)</code>。</p>
<h2 id="用const-修饰函数的返回值"><a href="#用const-修饰函数的返回值" class="headerlink" title="用const 修饰函数的返回值"></a>用const 修饰函数的返回值</h2><p>如果给以“指针传递”方式的函数返回值加<code>const</code>修饰，那么函数返回值（即指针）的内容不能被修改，该返回值只能被赋给加<code>const</code>修饰的同类型指针。</p>
<p>例子：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">GetString</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//如下语句将出现编译错误：</span></div><div class="line"><span class="keyword">char</span> *str = GetString();</div><div class="line"></div><div class="line"><span class="comment">//正确的用法是</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str = GetString();</div></pre></td></tr></table></figure>
<h3 id="值传递方式"><a href="#值传递方式" class="headerlink" title="值传递方式"></a>值传递方式</h3><p>如果函数返回值采用<strong>“值传递方式”</strong>，由于函数会把返回值复制到外部临时的存储单元中，加<code>const</code> 修饰没有任何价值。</p>
<ul>
<li><p>例如不要把函数<code>int GetInt(void)</code> 写成<code>const int GetInt(void)</code>。</p>
</li>
<li><p>同理不要把函数<code>A GetA(void)</code>写成<code>const A GetA(void)</code>，其中<code>A</code> 为用户自定义的数据类型。</p>
</li>
</ul>
<p>如果<strong>返回值不是内部数据类型</strong>，将函数<code>A GetA(void)</code> 改写为<code>const A &amp; GetA(void)</code>的确能提高效率。<br>但此时千万千万要小心，<strong>一定要搞清楚函数究竟是想返回一个对象的“拷贝”还是仅返回“别名”就可以了，否则程序会出错</strong>。</p>
<h3 id="引用传递方式"><a href="#引用传递方式" class="headerlink" title="引用传递方式"></a>引用传递方式</h3><p>函数返回值采用“引用传递”的场合并不多，这种方式一般只出现在类的赋值函数中，目的是为了实现链式表达。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> A</div><div class="line">&#123;</div><div class="line">A &amp; operate = (<span class="keyword">const</span> A &amp;other); <span class="comment">// 赋值函数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">A a, b, c; <span class="comment">// a, b, c 为A 的对象</span></div><div class="line"></div><div class="line">a = b = c; <span class="comment">// 正常的链式赋值</span></div><div class="line">(a = b) = c; <span class="comment">// 不正常的链式赋值，但合法</span></div></pre></td></tr></table></figure>
<p>如果将赋值函数的返回值加<code>const</code>修饰，那么该返回值的内容不允许被改动。<br>上例中，语句 <code>a = b = c</code> 仍然正确，但是语句 <code>(a = b) = c</code> 则是非法的。</p>
<h2 id="const修饰成员变量"><a href="#const修饰成员变量" class="headerlink" title="const修饰成员变量"></a>const修饰成员变量</h2><ul>
<li><p><code>const</code>修饰类的成员函数，表示成员常量，不能被修改   </p>
</li>
<li><p><strong>同时它只能在初始化列表中赋值</strong></p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> A</div><div class="line">&#123; </div><div class="line">    ...</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> nValue;         <span class="comment">//成员常量不能被修改</span></div><div class="line">    ...</div><div class="line">    A(<span class="keyword">int</span> x): nValue(x) &#123; &#125; ; <span class="comment">//只能在初始化列表中赋值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h2><ul>
<li><p><code>const</code> 关键字只能放在函数声明的尾部，大概是因为其它地方都已经被占用了</p>
</li>
<li><p>一个函数通过在其后面加关键字<code>const</code>，它将被声明为常量函数</p>
</li>
<li><p>在C++，<strong>只有将成员函数声明为常量函数才有意义</strong></p>
</li>
<li><p><code>const</code>成员函数不可以修改对象的数据,不管对象是否具有<code>const</code>性质</p>
</li>
<li><p>在C++中，一个对象的所有方法都接收一个指向对象本身的隐含的<code>this</code>指针；常量方法则获取了一个<strong>隐含的常量<code>this</code>指针</strong>，所以：</p>
<ul>
<li><p>不可以修改对象的数据成员，不管该成员是否具有<code>const</code></p>
</li>
<li><p>不可以调用其他<strong>非<code>const</code>成员函数</strong>，因为任何非<code>const</code>成员函数会有修改成员变量的企图</p>
</li>
</ul>
</li>
<li><p><strong>常量函数可以被任何对象调用，而非常量函数则只能被非常量对象调用，不能被常量对象调用</strong>，因为任何非<code>const</code>成员函数会有修改成员变量的企图<br>  例如：</p>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Fred &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">inspect</span><span class="params">()</span> <span class="keyword">const</span></span>;   <span class="comment">// This member promises NOT to change *this</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">mutate</span><span class="params">()</span></span>;          <span class="comment">// This member function might change *this</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">userCode</span><span class="params">(Fred&amp; changeable, <span class="keyword">const</span> Fred&amp; unchangeable)</span></span></div><div class="line">&#123;</div><div class="line">  changeable.inspect();   <span class="comment">// OK: doesn't change a changeable object</span></div><div class="line">  changeable.mutate();    <span class="comment">// OK: changes a changeable object</span></div><div class="line"></div><div class="line">  unchangeable.inspect(); <span class="comment">// OK: doesn't change an unchangeable object</span></div><div class="line">  unchangeable.mutate();  <span class="comment">// ERROR: attempt to change unchangeable object</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在类中允许存在同名的常量函数和非常量函数（<strong>算是函数重载</strong>），编译器根据调用该函数的对象选择合适的函数</p>
<ul>
<li><p>当非常量对象调用该函数时，先调用非常量函数</p>
</li>
<li><p>当常量对象调用该函数时，只能调用常量函数</p>
<p>如果在类中只有常量函数而没有与其同名的非常量函数，则非常量与常量对象都可调用该常量函数。如： </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">class</span> A</div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"const function f is called"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"non-const function f is called"</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"non-const function g is called"</span>&lt;&lt;<span class="built_in">endl</span>; &#125; </div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        A a;</div><div class="line">        <span class="keyword">const</span> A&amp; ref_a = a;</div><div class="line">        a.f(); <span class="comment">//calls void f()</span></div><div class="line">        ref_a.f();<span class="comment">//calls void f () const</span></div><div class="line">        a.g(); <span class="comment">//ok, normal call</span></div><div class="line">        ref_a.g(); <span class="comment">//error, const object can not call non-const function</span></div><div class="line">    &#125;</div><div class="line">    ```  </div><div class="line"></div><div class="line">- `<span class="keyword">const</span>`关键字不能用在构造函数与析构函数中。因为构造函数和析构函数都必须更改对象</div><div class="line"></div><div class="line"></div><div class="line">## 将<span class="keyword">const</span>类型转化为非<span class="keyword">const</span>类型的方法</div><div class="line"></div><div class="line">### 用<span class="keyword">const_cast</span>来去除<span class="keyword">const</span>限定</div><div class="line"></div><div class="line">`<span class="keyword">const_cast</span>`转换符是用来移除变量的`<span class="keyword">const</span>`或`<span class="keyword">volatile</span>`限定符。</div><div class="line"></div><div class="line">例如：</div><div class="line"></div><div class="line">```cpp</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> constant = <span class="number">21</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span>* const_p = &amp;constant;</div><div class="line"><span class="keyword">int</span>* modifier = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>*&gt;(const_p); <span class="comment">//注意这行</span></div><div class="line">*modifier = <span class="number">7</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="传统转换方式实现const-cast运算符"><a href="#传统转换方式实现const-cast运算符" class="headerlink" title="传统转换方式实现const_cast运算符"></a>传统转换方式实现const_cast运算符</h3><p>准转换运算符是可以用传统转换方式实现的。   </p>
<p><code>const_cast</code>实现原因就在于<strong>C++对于指针的转换是任意的，它不会检查类型，任何指针之间都可以进行互相转换</strong>，因此<code>const_cast</code>就可以直接使用显式转换<code>(int*)</code>来代替：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> constant = <span class="number">21</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span>* const_p = &amp;constant;</div><div class="line"><span class="keyword">int</span>* modifier = (<span class="keyword">int</span>*)(const_p);</div></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>C++里是<code>const</code>，就是<code>const</code>，外界千变万变，我就不变。不然真的会乱套了，<code>const</code>也没有存在的意义了。</p>
<p><code>const_cast</code>用来丢弃变量的<code>const</code>声明，但不能改变变量所指向的对象的const属性。     即：<code>const_cast</code>用于原本非<code>const</code>的对象；如果用于原本<code>const</code>的对象，结果不可预知（C++语言未对此种情况进行规定）</p>
<p>一般情况下<code>const_cast</code>是用于这种情形：<br><code>const</code>指针（变量）指向非const对象，程序员确认这一点（所指向的对象非<code>const</code>）时，使用<code>const_cast</code>操作符丢弃变量的<code>const</code>修饰获得一个非<code>const</code>指针</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;const对象默认为文件的局部变量&quot;&gt;&lt;a href=&quot;#const对象默认为文件的局部变量&quot; class=&quot;headerlink&quot; title=&quot;const对象默认为文件的局部变量&quot;&gt;&lt;/a&gt;const对象默认为文件的局部变量&lt;/h2&gt;&lt;p&gt;在全局作用域里定义非&lt;code&gt;const&lt;/code&gt;变量时，它在整个程序中都可以访问，我们可以把一个非&lt;code&gt;const&lt;/code&gt;变量定义在一个文件中，假设已经做了合适的声明，就可以在另外的文件中使用这个变量：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//file_1.cpp&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a; &lt;span class=&quot;comment&quot;&gt;//definition&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//file_2.cpp&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a; &lt;span class=&quot;comment&quot;&gt;//使用的count来自file_1.cpp&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a++;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;与其他变量不同，除非特别说明，在全局作用域声明的&lt;code&gt;const&lt;/code&gt;变量是定义该对象的文件的局部变量。此变量只存在于那个文件中，不能被其他文件访问。&lt;br&gt;通过指定&lt;code&gt;const&lt;/code&gt;变量为&lt;code&gt;extern&lt;/code&gt;，就可以在整个程序中访问&lt;code&gt;const&lt;/code&gt;对象。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>ScheduledThreadPoolExecutor内部任务获取机制</title>
    <link href="http://yoursite.com/2017/02/18/ScheduledThreadPoolExecutor%E5%86%85%E9%83%A8%E4%BB%BB%E5%8A%A1%E8%8E%B7%E5%8F%96%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/02/18/ScheduledThreadPoolExecutor内部任务获取机制/</id>
    <published>2017-02-18T14:17:50.000Z</published>
    <updated>2017-03-05T13:40:03.017Z</updated>
    
    <content type="html"><![CDATA[<p>去大概看了ScheduledThreadPoolExecutor的源码，发现内部是用一个队列来存储提交的任务，而使用的队列实质上是一个最小堆，具体的比较是任务执行时间与当前时间的延迟差，也就是说任务应该执行的时间点越近，就处于堆的越上端，也就是越靠近队列的头部。    </p>
<a id="more"></a>
<p>下面是向队列加入新任务的方法。     </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(Runnable x)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (x == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    RunnableScheduledFuture&lt;?&gt; e = (RunnableScheduledFuture&lt;?&gt;)x;</div><div class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">    lock.lock();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">int</span> i = size;</div><div class="line">        <span class="keyword">if</span> (i &gt;= queue.length)</div><div class="line">            grow();</div><div class="line">        size = i + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">            queue[<span class="number">0</span>] = e;</div><div class="line">            setIndex(e, <span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            siftUp(i, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (queue[<span class="number">0</span>] == e) &#123;</div><div class="line">            leader = <span class="keyword">null</span>;</div><div class="line">            available.signal();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>过程大概就是   </p>
<ol>
<li>查看容量是否够，不够则扩充   </li>
<li>往堆插入新任务，然后根据任务的执行时间点到当前时间的差距来调整任务的位置     </li>
<li>调整完位置后检测一下新任务是不是位于堆的顶点，也就是队列头部，如果是就发出信号唤醒其他等待获取任务的线程。       </li>
</ol>
<p>下面是获取任务的方法   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> RunnableScheduledFuture&lt;?&gt; take() <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">  <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">    lock.lockInterruptibly();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            RunnableScheduledFuture&lt;?&gt; first = queue[<span class="number">0</span>];</div><div class="line">            <span class="keyword">if</span> (first == <span class="keyword">null</span>)</div><div class="line">                available.await();</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">long</span> delay = first.getDelay(NANOSECONDS);</div><div class="line">                <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>)</div><div class="line">                    <span class="keyword">return</span> finishPoll(first);</div><div class="line">                first = <span class="keyword">null</span>; <span class="comment">// don't retain ref while waiting</span></div><div class="line">                <span class="keyword">if</span> (leader != <span class="keyword">null</span>)</div><div class="line">                    available.await();</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    Thread thisThread = Thread.currentThread();</div><div class="line">                    leader = thisThread;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        available.awaitNanos(delay);</div><div class="line">                    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                        <span class="keyword">if</span> (leader == thisThread)</div><div class="line">                            leader = <span class="keyword">null</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (leader == <span class="keyword">null</span> &amp;&amp; queue[<span class="number">0</span>] != <span class="keyword">null</span>)</div><div class="line">            available.signal();</div><div class="line">        lock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>过程大概为   </p>
<ol>
<li>查看队列是否有任务，如果没有就进入等待  </li>
<li>如果有任务，再判断下任务是否能够马上执行，如果行就直接执行    </li>
<li>如果任务还没到执行的时间，则查看当前线程是不是第一个等待线程，如果不是则直接进入等待   </li>
<li>如果当前线程是第一个等待线程则更新leader，并且进入等待，等待的最长时间设置为距离任务能够执行的时间差        </li>
</ol>
<p>如果在等待的过程中又有一个任务提交了，并且这个任务是可以马上执行的，则被唤醒的线程会重新获取队列首部的任务，也就是新提交的任务了。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去大概看了ScheduledThreadPoolExecutor的源码，发现内部是用一个队列来存储提交的任务，而使用的队列实质上是一个最小堆，具体的比较是任务执行时间与当前时间的延迟差，也就是说任务应该执行的时间点越近，就处于堆的越上端，也就是越靠近队列的头部。    &lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>WeakHashMap原理学习</title>
    <link href="http://yoursite.com/2017/02/13/WeakHashMap%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/02/13/WeakHashMap原理学习/</id>
    <published>2017-02-13T12:31:22.000Z</published>
    <updated>2017-03-15T15:47:25.657Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>WeakHashMap，此种Map的特点是，当除了自身有对key的引用外，此key没有其他引用那么此map会自动丢弃此值   </li>
</ul>
<h2 id="内部Entry构造"><a href="#内部Entry构造" class="headerlink" title="内部Entry构造"></a>内部Entry构造</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">Object</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        V value;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line">        Entry&lt;K,V&gt; next;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Creates new entry.</div><div class="line">         */</div><div class="line">        Entry(Object key, V value,</div><div class="line">              ReferenceQueue&lt;Object&gt; queue,</div><div class="line">              <span class="keyword">int</span> hash, Entry&lt;K,V&gt; next) &#123;</div><div class="line">            <span class="keyword">super</span>(key, queue);</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">            <span class="keyword">this</span>.hash  = hash;</div><div class="line">            <span class="keyword">this</span>.next  = next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意它构造父类的语句：<code>super(key, queue);</code>，传入的是<code>key</code>，因此<code>key</code>才是进行弱引用的，<code>value</code>是直接强引用关联在<code>this.value</code>之中  </p>
<a id="more"></a>
<h2 id="引用队列（Reference-Quene）"><a href="#引用队列（Reference-Quene）" class="headerlink" title="引用队列（Reference Quene）"></a>引用队列（Reference Quene）</h2><p>一旦弱引用返回null值，那么其指向的对象（即Widget）就变成了垃圾，这个弱引用对象(即weakWidget)也就没有用了。这通常意味着要进行一定方式的清理（cleanup）。</p>
<p>WeakHashmap将会移除一些死亡的的entry，避免持有过多死的弱引用    </p>
<p><code>ReferenceQuene</code>能够轻易的追踪这些死掉的弱引用。可以讲ReferenceQuene传入WeakHashmap的构造方法（constructor）中，这样，一旦这个弱引用指向的对象成为垃圾，这个弱引用将加入ReferenceQuene中。</p>
<h2 id="清理无效的项目"><a href="#清理无效的项目" class="headerlink" title="清理无效的项目"></a>清理无效的项目</h2><ul>
<li><p>WeakHashMap是主要通过<code>expungeStaleEntries</code>这个函数的来实现移除其内部不用的条目从而达到的自动释放内存的目的的.基本上只要对WeakHashMap的内容进行访问就会调用这个函数，从而达到清除其内部不在为外部引用的条目。</p>
</li>
<li><p><code>expungeStaleEntries</code>方法只有在以下方法中才被调用：</p>
<ul>
<li><p><code>size()</code></p>
</li>
<li><p><code>resize(int newCapacity)</code></p>
</li>
<li><p><code>private Entry&lt;K,V&gt;[] getTable()</code></p>
<p>而<code>getTable</code>方法在很多方法中被调用，基本上对<code>WeakHashMap</code>的每一次访问都会调用到，例如：  </p>
</li>
<li><p><code>public V get(Object key)</code></p>
</li>
<li><p><code>Entry&lt;K,V&gt; getEntry(Object key)</code>  </p>
</li>
<li><p><code>public V put(K key, V value)</code></p>
</li>
<li><p><code>public boolean containsValue(Object value)</code></p>
</li>
<li><p><code>private boolean containsNullValue()</code></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Expunges stale entries from the table.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expungeStaleEntries</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Object x; (x = queue.poll()) != <span class="keyword">null</span>; ) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (queue) &#123;</div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) x;</div><div class="line">                <span class="keyword">int</span> i = indexFor(e.hash, table.length);</div><div class="line"></div><div class="line">                Entry&lt;K,V&gt; prev = table[i];</div><div class="line">                Entry&lt;K,V&gt; p = prev;</div><div class="line">                <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">                    Entry&lt;K,V&gt; next = p.next;</div><div class="line">                    <span class="keyword">if</span> (p == e) &#123;</div><div class="line">                        <span class="keyword">if</span> (prev == e)</div><div class="line">                            table[i] = next;</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                            prev.next = next;</div><div class="line">                        <span class="comment">// Must not null out e.next;</span></div><div class="line">                        <span class="comment">// stale entries may be in use by a HashIterator</span></div><div class="line">                        e.value = <span class="keyword">null</span>; <span class="comment">// Help GC</span></div><div class="line">                        size--;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    prev = p;</div><div class="line">                    p = next;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;WeakHashMap，此种Map的特点是，当除了自身有对key的引用外，此key没有其他引用那么此map会自动丢弃此值   &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;内部Entry构造&quot;&gt;&lt;a href=&quot;#内部Entry构造&quot; class=&quot;headerlink&quot; title=&quot;内部Entry构造&quot;&gt;&lt;/a&gt;内部Entry构造&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Entry&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WeakReference&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Object&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Map&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Entry&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        V value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hash;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Entry&amp;lt;K,V&amp;gt; next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         * Creates new entry.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Entry(Object key, V value,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              ReferenceQueue&amp;lt;Object&amp;gt; queue,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hash, Entry&amp;lt;K,V&amp;gt; next) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(key, queue);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.value = value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.hash  = hash;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.next  = next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请注意它构造父类的语句：&lt;code&gt;super(key, queue);&lt;/code&gt;，传入的是&lt;code&gt;key&lt;/code&gt;，因此&lt;code&gt;key&lt;/code&gt;才是进行弱引用的，&lt;code&gt;value&lt;/code&gt;是直接强引用关联在&lt;code&gt;this.value&lt;/code&gt;之中  &lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>HashMap工作原理学习</title>
    <link href="http://yoursite.com/2017/02/07/HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/02/07/HashMap工作原理学习/</id>
    <published>2017-02-07T14:21:18.000Z</published>
    <updated>2017-04-01T06:27:07.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;    <span class="comment">//用来定位数组索引位置</span></div><div class="line">        <span class="keyword">final</span> K key;</div><div class="line">        V value;</div><div class="line">        Node&lt;K,V&gt; next;   <span class="comment">//链表的下一个node</span></div><div class="line"></div><div class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span></span>&#123; ... &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123; ... &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://tech.meituan.com/img/java-hashmap/hashMap%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt=""></p>
<h2 id="两个重要的参数"><a href="#两个重要的参数" class="headerlink" title="两个重要的参数"></a>两个重要的参数</h2><p>在HashMap中有两个很重要的参数：</p>
<ul>
<li>容量(Capacity)   </li>
<li>负载因子(Load factor)</li>
</ul>
<p><code>Capacity</code>就是bucket的大小，<code>Load factor</code>就是bucket填满程度的最大比例，默认是<code>0.75</code>。 </p>
<p>当bucket中的entries的数目大于<code>capacity*load factor</code>时就需要调整bucket的大小为当前的2倍。</p>
<h2 id="hash函数的实现"><a href="#hash函数的实现" class="headerlink" title="hash函数的实现"></a>hash函数的实现</h2><p>以<code>Entry[]</code>数组实现的哈希桶数组(bucket)，用<code>Key</code>的哈希值取模桶数组的大小可得到数组下标。</p>
<p><code>HashMap</code>跟<code>HashTable</code>的区别之一就是：</p>
<ul>
<li><p><code>HashTable</code>直接用<code>Key</code>对象的<code>hashCode()</code>作为hash值</p>
</li>
<li><p><code>HashMap</code>会先调用多一个<code>hash()</code>对<code>Key</code>对象的<code>hashCode</code>进行计算从而得出最终的hash值</p>
</li>
</ul>
<p>在<code>get</code>和<code>put</code>的过程中，先对hashCode进行hash操作，然后再通过hash值进一步计算下标</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h;</div><div class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>HashMap</code>允许<code>key</code>为<code>null</code>，并且当<code>key</code>为<code>null</code>的时候，<code>hash</code>值都为0</p>
<p><img src="https://cloud.githubusercontent.com/assets/1736354/6957712/293b52fc-d932-11e4-854d-cb47be67949a.png" alt=""></p>
<h3 id="计算下标"><a href="#计算下标" class="headerlink" title="计算下标"></a>计算下标</h3><p>因为目前的table长度n为2的幂，而计算下标的时候，是这样实现的(使用<code>&amp;</code>位操作，而非<code>%</code>求余)： <code>（n - 1）&amp; hash</code></p>
<p>因此数组的大小永远是2的N次方， 你随便给一个初始值比如17会转为32。<br>默认初始容量是16。</p>
<h2 id="put"><a href="#put" class="headerlink" title="put"></a>put</h2><p><code>put</code>方法大致的流程为</p>
<ol>
<li><p>用<code>Key</code>对象的<code>hashCode()</code>去计算<code>hash</code>值，进而求下标</p>
</li>
<li><p>如果没碰撞直接放到bucket里</p>
</li>
<li><p>如果碰撞了，以链表的形式存在buckets后面</p>
</li>
<li><p>如果碰撞导致链表过长（大于等于<code>TREEIFY_THRESHOLD</code>，默认是8），就把链表转换成红黑树</p>
</li>
<li><p>如果节点已经存在就替换<code>old value</code></p>
</li>
<li><p>如果<code>bucket</code>满了(超过<code>load factor*current capacity</code>)，就要<code>resize()</code></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Implements Map.put and related methods</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> hash hash for key</div><div class="line"> * <span class="doctag">@param</span> key the key</div><div class="line"> * <span class="doctag">@param</span> value the value to put</div><div class="line"> * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</div><div class="line"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</div><div class="line"> * <span class="doctag">@return</span> previous value, or null if none</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></div><div class="line">               <span class="keyword">boolean</span> evict) &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</div><div class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">        n = (tab = resize()).length;</div><div class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</div><div class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        Node&lt;K,V&gt; e; K k;</div><div class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</div><div class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            e = p;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</div><div class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</div><div class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</div><div class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></div><div class="line">                        treeifyBin(tab, hash);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                p = e;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></div><div class="line">            V oldValue = e.value;</div><div class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</div><div class="line">                e.value = value;</div><div class="line">            afterNodeAccess(e);</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ++modCount;</div><div class="line">    <span class="keyword">if</span> (++size &gt; threshold)</div><div class="line">        resize();</div><div class="line">    afterNodeInsertion(evict);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><p>大致流程为</p>
<ol>
<li><p>如果是bucket里的第一个节点，则直接命中</p>
</li>
<li><p>如果有冲突：</p>
<ol>
<li><p>若为链表，则遍历链表查找，<code>O(n)</code></p>
</li>
<li><p>若为树，则在树中通过查找，<code>O(logn)</code></p>
</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; e;</div><div class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Implements Map.get and related methods</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> hash hash for key</div><div class="line"> * <span class="doctag">@param</span> key the key</div><div class="line"> * <span class="doctag">@return</span> the node, or null if none</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></div><div class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="keyword">return</span> first;</div><div class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Java8-对HashMap的改进"><a href="#Java8-对HashMap的改进" class="headerlink" title="Java8 对HashMap的改进"></a>Java8 对<code>HashMap</code>的改进</h2><blockquote>
<p>Improve the performance of java.util.HashMap under high hash-collision conditions by using balanced trees rather than linked lists to store map entries. Implement the same improvement in the LinkedHashMap class.</p>
</blockquote>
<p>在Java 8之前的实现中是用链表解决冲突的，在产生碰撞的情况下，进行get时，两步的时间复杂度是<code>O(1)+O(n)</code>。因此，当碰撞很厉害的时候<code>n</code>很大，<code>O(n)</code>的速度显然降低效率。</p>
<p>因此在Java 8中，利用<strong>红黑树</strong>替换链表，这样复杂度就变成了<code>O(1)+O(logn)</code>了，这样在<code>n</code>很大的时候，能够比较理想的解决这个问题。</p>
<h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h2><p>当<code>put</code>时，如果发现目前的<code>bucket</code>占用程度已经超过了<code>Load Factor</code>所希望的比例，那么就会发生<code>resize</code>。</p>
<p>在resize的过程，简单的说就是把bucket扩充为2倍，之后重新计算index，把节点再放到新的bucket中。  </p>
<p>因为<code>bucket</code>的长度一直是2次幂，所以在长度变为两倍后，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。</p>
<p>例如我们从16扩展为32时，具体的变化如下所示</p>
<p><img src="https://cloud.githubusercontent.com/assets/1736354/6958256/ceb6e6ac-d93b-11e4-98e7-c5a5a07da8c4.png" alt=""></p>
<p>因此元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p>
<p><img src="https://cloud.githubusercontent.com/assets/1736354/6958301/519be432-d93c-11e4-85bb-dff0a03af9d3.png" alt=""></p>
<p>因此，在扩充HashMap的时候，不需要重新计算hash，只需要看看原来的hash值新增的那个bit是<code>1</code>还是<code>0</code>就好了，</p>
<ul>
<li>是<code>0</code>的话索引没变  </li>
<li>是<code>1</code>的话索引变成<code>原索引+oldCap</code></li>
</ul>
<p>这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。</p>
<p>16扩充为32的resize示意图：</p>
<p><img src="https://cloud.githubusercontent.com/assets/1736354/6958677/d7acbad8-d941-11e4-9493-2c5e69d084c0.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Initializes or doubles table size.  If null, allocates in</div><div class="line"> * accord with initial capacity target held in field threshold.</div><div class="line"> * Otherwise, because we are using power-of-two expansion, the</div><div class="line"> * elements from each bin must either stay at same index, or move</div><div class="line"> * with a power of two offset in the new table.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> the table</div><div class="line"> */</div><div class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</div><div class="line">    Node&lt;K,V&gt;[] oldTab = table;</div><div class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</div><div class="line">    <span class="keyword">int</span> oldThr = threshold;</div><div class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class="line">            threshold = Integer.MAX_VALUE;</div><div class="line">            <span class="keyword">return</span> oldTab;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></div><div class="line">        newCap = oldThr;</div><div class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></div><div class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</div><div class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</div><div class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</div><div class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</div><div class="line">    &#125;</div><div class="line">    threshold = newThr;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</div><div class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</div><div class="line">    table = newTab;</div><div class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</div><div class="line">            Node&lt;K,V&gt; e;</div><div class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</div><div class="line">                oldTab[j] = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</div><div class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</div><div class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></div><div class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">                    Node&lt;K,V&gt; next;</div><div class="line">                    <span class="keyword">do</span> &#123;</div><div class="line">                        next = e.next;</div><div class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</div><div class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</div><div class="line">                                loHead = e;</div><div class="line">                            <span class="keyword">else</span></div><div class="line">                                loTail.next = e;</div><div class="line">                            loTail = e;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</div><div class="line">                                hiHead = e;</div><div class="line">                            <span class="keyword">else</span></div><div class="line">                                hiTail.next = e;</div><div class="line">                            hiTail = e;</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</div><div class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</div><div class="line">                        loTail.next = <span class="keyword">null</span>;</div><div class="line">                        newTab[j] = loHead;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</div><div class="line">                        hiTail.next = <span class="keyword">null</span>;</div><div class="line">                        newTab[j + oldCap] = hiHead;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newTab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/#5-_hash函数的实现" target="_blank" rel="external">Java HashMap工作原理及实现</a></li>
<li><a href="http://tech.meituan.com/java-hashmap.html" target="_blank" rel="external">Java 8系列之重新认识HashMap</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;存储结构&quot;&gt;&lt;a href=&quot;#存储结构&quot; class=&quot;headerlink&quot; title=&quot;存储结构&quot;&gt;&lt;/a&gt;存储结构&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Map&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Entry&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hash;    &lt;span class=&quot;comment&quot;&gt;//用来定位数组索引位置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; K key;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        V value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Node&amp;lt;K,V&amp;gt; next;   &lt;span class=&quot;comment&quot;&gt;//链表的下一个node&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Node(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hash, K key, V value, Node&amp;lt;K,V&amp;gt; next) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; K &lt;span class=&quot;title&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; V &lt;span class=&quot;title&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; V &lt;span class=&quot;title&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(V newValue)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object o)&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Lucene检索笔记</title>
    <link href="http://yoursite.com/2017/01/28/Lucene%E6%A3%80%E7%B4%A2%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/28/Lucene检索笔记/</id>
    <published>2017-01-28T03:04:45.000Z</published>
    <updated>2017-03-11T01:53:24.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="把Document映射为Object类"><a href="#把Document映射为Object类" class="headerlink" title="把Document映射为Object类"></a>把Document映射为Object类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Doc2ObjectMapper</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将多个Document映射成一个对象</div><div class="line">     * <span class="doctag">@param</span> documents</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">Object <span class="title">mapDocumentsToObject</span><span class="params">(List&lt;Document&gt; documents)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将单个Document映射成一个对象</div><div class="line">     * <span class="doctag">@param</span> document</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">Object <span class="title">mapDocumentToObject</span><span class="params">(Document document)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="普通检索"><a href="#普通检索" class="headerlink" title="普通检索"></a>普通检索</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchHelper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Analyzer analyzer;</div><div class="line">    <span class="keyword">private</span> String indexDirUrl;</div><div class="line">    <span class="keyword">private</span> Directory directory;</div><div class="line">    <span class="keyword">private</span> IndexReader reader;</div><div class="line">    <span class="keyword">private</span> IndexSearcher indexSearcher;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchHelper</span><span class="params">(String indexDirUrl,Analyzer analyzer)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.indexDirUrl=indexDirUrl;</div><div class="line">        <span class="keyword">this</span>.analyzer=analyzer;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            init();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchHelper</span><span class="params">(String indexDirUrl)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>(indexDirUrl, <span class="keyword">new</span> SmartChineseAnalyzer());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        directory=FSDirectory.open(Paths.get(indexDirUrl));</div><div class="line">        reader= DirectoryReader.open(directory);</div><div class="line">        indexSearcher=<span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询并且返回经过映射后的对象List</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> offset</div><div class="line">     * <span class="doctag">@param</span> topN</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">search</span><span class="params">(Query query,<span class="keyword">int</span> offset,<span class="keyword">int</span> topN,Sort sort,Doc2ObjectMapper doc2ObjectMapper)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        TopDocs topDocs=<span class="keyword">null</span>;</div><div class="line">        ScoreDoc after=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(offset&gt;<span class="number">0</span>)&#123;</div><div class="line">            TopDocs docsBefore=indexSearcher.search(query,offset,sort);</div><div class="line">            ScoreDoc[] scoreDocs=docsBefore.scoreDocs;</div><div class="line">            <span class="keyword">if</span>(scoreDocs.length&gt;<span class="number">0</span>)</div><div class="line">                after=scoreDocs[scoreDocs.length-<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        topDocs=indexSearcher.searchAfter(after,query,topN,sort);</div><div class="line">        <span class="keyword">return</span> creatObjectList(topDocs.scoreDocs,doc2ObjectMapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 没有Sort的search</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> offset</div><div class="line">     * <span class="doctag">@param</span> topN</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">search</span><span class="params">(Query query,<span class="keyword">int</span> offset,<span class="keyword">int</span> topN,Doc2ObjectMapper doc2ObjectMapper)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        TopDocs topDocs=<span class="keyword">null</span>;</div><div class="line">        ScoreDoc after=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(offset&gt;<span class="number">0</span>)&#123;</div><div class="line">            TopDocs docsBefore=indexSearcher.search(query,offset);</div><div class="line">            ScoreDoc[] scoreDocs=docsBefore.scoreDocs;</div><div class="line">            <span class="keyword">if</span>(scoreDocs.length&gt;<span class="number">0</span>)</div><div class="line">                after=scoreDocs[scoreDocs.length-<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        topDocs=indexSearcher.searchAfter(after,query,topN);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> creatObjectList(topDocs.scoreDocs,doc2ObjectMapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取查询到的总数量</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(Query query)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> indexSearcher.search(query,<span class="number">1</span>).totalHits;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;Object&gt; <span class="title">creatObjectList</span><span class="params">(ScoreDoc[] scoreDocs,Doc2ObjectMapper doc2ObjectMapper)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        List&lt;Object&gt; result=<span class="keyword">new</span> LinkedList&lt;Object&gt;();</div><div class="line">        <span class="keyword">for</span>(ScoreDoc scoreDoc:scoreDocs)&#123;</div><div class="line">            result.add(doc2ObjectMapper.mapDocumentToObject(indexSearcher.doc(scoreDoc.doc)));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基于Group-by的检索"><a href="#基于Group-by的检索" class="headerlink" title="基于Group by的检索"></a>基于Group by的检索</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用Group by进行搜索</div><div class="line"> * Created by yuan on 1/8/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupSearcherHelper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Analyzer analyzer;</div><div class="line">    <span class="keyword">private</span> String indexDirUrl;</div><div class="line">    <span class="keyword">private</span> Directory directory;</div><div class="line">    <span class="keyword">private</span> IndexReader reader;</div><div class="line">    <span class="keyword">private</span> IndexSearcher indexSearcher;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> maxCacheRAMMB;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isCacheScores=<span class="keyword">true</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> ifFillFields=<span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> DEFAULT_MAX_CACHE_RAM_MB=<span class="number">4.0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupSearcherHelper</span><span class="params">(String indexDirUrl,Analyzer analyzer,<span class="keyword">double</span> maxCacheRAMMB)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.indexDirUrl=indexDirUrl;</div><div class="line">        <span class="keyword">this</span>.analyzer=analyzer;</div><div class="line">        <span class="keyword">this</span>.maxCacheRAMMB=maxCacheRAMMB;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            init();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupSearcherHelper</span><span class="params">(String indexDirUrl,Analyzer analyzer)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>(indexDirUrl,analyzer,DEFAULT_MAX_CACHE_RAM_MB);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupSearcherHelper</span><span class="params">(String indexDirUrl)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>(indexDirUrl,<span class="keyword">new</span> SmartChineseAnalyzer());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        directory= FSDirectory.open(Paths.get(indexDirUrl));</div><div class="line">        reader= DirectoryReader.open(directory);</div><div class="line">        indexSearcher=<span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 搜索返回文档分组</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> groupFieldName</div><div class="line">     * <span class="doctag">@param</span> groupSort</div><div class="line">     * <span class="doctag">@param</span> withinGroupSort</div><div class="line">     * <span class="doctag">@param</span> groupOffset</div><div class="line">     * <span class="doctag">@param</span> topNGroups</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Document&gt;&gt; searchDocument(Query query, String groupFieldName, Sort groupSort, Sort withinGroupSort, <span class="keyword">int</span> groupOffset, <span class="keyword">int</span> topNGroups) <span class="keyword">throws</span> IOException &#123;</div><div class="line">        List&lt;List&lt;Document&gt;&gt; result=<span class="keyword">new</span> LinkedList&lt;List&lt;Document&gt;&gt;();</div><div class="line">        TopGroups&lt;BytesRef&gt; topGroupsResult=searchHelp(query,groupFieldName,groupSort,withinGroupSort,groupOffset,topNGroups);</div><div class="line">        <span class="keyword">if</span>(topGroupsResult==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        GroupDocs&lt;BytesRef&gt;[] groupDocses=topGroupsResult.groups;</div><div class="line">        <span class="keyword">for</span>(GroupDocs&lt;BytesRef&gt; groupDocs:groupDocses)&#123;</div><div class="line">            List&lt;Document&gt; subList=<span class="keyword">new</span> LinkedList&lt;Document&gt;();</div><div class="line">            <span class="keyword">for</span>(ScoreDoc scoreDoc:groupDocs.scoreDocs)&#123;</div><div class="line">                Document document=indexSearcher.doc(scoreDoc.doc);</div><div class="line">                subList.add(document);</div><div class="line">            &#125;</div><div class="line">            result.add(subList);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用默认Sort的searchDocument</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> groupFieldName</div><div class="line">     * <span class="doctag">@param</span> groupOffset</div><div class="line">     * <span class="doctag">@param</span> topNGroups</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Document&gt;&gt; searchDocument(Query query, String groupFieldName, <span class="keyword">int</span> groupOffset, <span class="keyword">int</span> topNGroups) <span class="keyword">throws</span> IOException &#123;</div><div class="line">        <span class="keyword">return</span> searchDocument(query,groupFieldName,Sort.INDEXORDER,Sort.INDEXORDER,groupOffset,topNGroups);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分组搜索并且将每一组Document映射成一个对象并且返回所有对象组成的List</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> groupFieldName</div><div class="line">     * <span class="doctag">@param</span> groupSort</div><div class="line">     * <span class="doctag">@param</span> withinGroupSort</div><div class="line">     * <span class="doctag">@param</span> groupOffset</div><div class="line">     * <span class="doctag">@param</span> topNGroups</div><div class="line">     * <span class="doctag">@param</span> mapper</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">search</span><span class="params">(Query query, String groupFieldName, Sort groupSort, Sort withinGroupSort, <span class="keyword">int</span> groupOffset, <span class="keyword">int</span> topNGroups, Doc2ObjectMapper mapper)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        List&lt;Object&gt; result=<span class="keyword">new</span> LinkedList&lt;Object&gt;();</div><div class="line">        List&lt;List&lt;Document&gt;&gt; documentsList=searchDocument(query,groupFieldName,groupSort,withinGroupSort,groupOffset,topNGroups);</div><div class="line">        <span class="keyword">if</span>(documentsList.size()==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        Object o=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span>(List&lt;Document&gt; documents:documentsList)&#123;</div><div class="line">            o=mapper.mapDocumentsToObject(documents);</div><div class="line">            result.add(o);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用默认Sort的search</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> groupFieldName</div><div class="line">     * <span class="doctag">@param</span> groupOffset</div><div class="line">     * <span class="doctag">@param</span> topNGroups</div><div class="line">     * <span class="doctag">@param</span> mapper</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">search</span><span class="params">(Query query, String groupFieldName,  <span class="keyword">int</span> groupOffset, <span class="keyword">int</span> topNGroups, Doc2ObjectMapper mapper)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> search(query,groupFieldName,Sort.INDEXORDER,Sort.INDEXORDER,groupOffset,topNGroups,mapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function">TopGroups&lt;BytesRef&gt; <span class="title">searchHelp</span><span class="params">(Query query, String groupFieldName, Sort groupSort, Sort withinGroupSort, <span class="keyword">int</span> groupOffset, <span class="keyword">int</span> topNGroups)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        TermFirstPassGroupingCollector c1=<span class="keyword">new</span> TermFirstPassGroupingCollector(groupFieldName,groupSort,groupOffset+topNGroups);</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 将TermFirstPassGroupingCollector包装成CachingCollector，为第一次查询加缓存，避免重复评分</div><div class="line">         *  CachingCollector就是用来为结果收集器添加缓存功能的</div><div class="line">         */</div><div class="line">        CachingCollector cachingCollector=CachingCollector.create(c1,isCacheScores,maxCacheRAMMB);</div><div class="line">        <span class="comment">//开始第一次分组统计</span></div><div class="line">        indexSearcher.search(query,cachingCollector);</div><div class="line"></div><div class="line">        <span class="comment">/**第一次查询返回的结果集TopGroups中只有分组域值以及每组总的评分，至于每个分组里有几条，分别哪些索引文档，则需要进行第二次查询获取*/</span></div><div class="line">        Collection&lt;SearchGroup&lt;BytesRef&gt;&gt; topGroups=c1.getTopGroups(groupOffset,ifFillFields);</div><div class="line">        <span class="keyword">if</span>(topGroups==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Collector secondPassCollector=<span class="keyword">null</span>;</div><div class="line">        <span class="comment">// 是否获取每个分组内部每个索引的评分</span></div><div class="line">        <span class="keyword">boolean</span> ifGetScores=<span class="keyword">true</span>;</div><div class="line">        <span class="comment">// 是否计算最大评分</span></div><div class="line">        <span class="keyword">boolean</span> ifGetMaxScores=<span class="keyword">true</span>;</div><div class="line">        <span class="keyword">int</span> maxDocsPerGroup=<span class="number">10</span>;</div><div class="line">        <span class="comment">// 如果需要对Lucene的score进行修正，则需要重载TermSecondPassGroupingCollector</span></div><div class="line">        TermSecondPassGroupingCollector c2=<span class="keyword">new</span> TermSecondPassGroupingCollector(groupFieldName,topGroups,</div><div class="line">                groupSort,withinGroupSort,</div><div class="line">                maxDocsPerGroup,ifGetScores,ifGetMaxScores,ifFillFields);</div><div class="line"></div><div class="line">        secondPassCollector=c2;</div><div class="line"></div><div class="line">        <span class="comment">/**如果第一次查询已经加了缓存，则直接从缓存中取*/</span></div><div class="line">        <span class="keyword">if</span>(cachingCollector.isCached())&#123;</div><div class="line">            <span class="comment">//第二次查询直接从缓存中取</span></div><div class="line">            cachingCollector.replay(secondPassCollector);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">// 开始第二次分组查询</span></div><div class="line">            indexSearcher.search(query,secondPassCollector);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        TopGroups&lt;BytesRef&gt; topGroupsResult=c2.getTopGroups(<span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> topGroupsResult;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询符合条件的分组总数量</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     * <span class="doctag">@param</span> groupFieldName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGroupSum</span><span class="params">(Query query,String groupFieldName)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        TermFirstPassGroupingCollector c1=<span class="keyword">new</span> TermFirstPassGroupingCollector(groupFieldName,Sort.INDEXORDER,<span class="number">1</span>);</div><div class="line">        TermAllGroupsCollector termAllGroupsCollector=<span class="keyword">new</span> TermAllGroupsCollector(groupFieldName);</div><div class="line">        Collector collector=  MultiCollector.wrap(c1,termAllGroupsCollector);</div><div class="line">        indexSearcher.search(query,collector);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> termAllGroupsCollector.getGroupCount();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;把Document映射为Object类&quot;&gt;&lt;a href=&quot;#把Document映射为Object类&quot; class=&quot;headerlink&quot; title=&quot;把Document映射为Object类&quot;&gt;&lt;/a&gt;把Document映射为Object类&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Doc2ObjectMapper&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * 将多个Document映射成一个对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; documents&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Object &lt;span class=&quot;title&quot;&gt;mapDocumentsToObject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Document&amp;gt; documents)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * 将单个Document映射成一个对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; document&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Object &lt;span class=&quot;title&quot;&gt;mapDocumentToObject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Document document)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="后台" scheme="http://yoursite.com/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="全文检索" scheme="http://yoursite.com/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
      <category term="Lucene" scheme="http://yoursite.com/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>Lucene建立索引笔记</title>
    <link href="http://yoursite.com/2017/01/28/Lucene%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/28/Lucene建立索引笔记/</id>
    <published>2017-01-28T03:03:52.000Z</published>
    <updated>2017-03-11T01:52:55.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在项目中需要用到全文检索，根据搜索关键字来返回满足条件的商品，同时需要满足一定的商品类别和商城代码，刚好学下lucene来初步简单实现下这个需求。 </p>
<a id="more"></a>
<h2 id="连接Mysql数据库和导出数据"><a href="#连接Mysql数据库和导出数据" class="headerlink" title="连接Mysql数据库和导出数据"></a>连接Mysql数据库和导出数据</h2><p>首先我自己先封装一个很简单的数据库操作工具类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line">    <span class="keyword">private</span> String user;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="keyword">private</span> Connection conn;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBUtil</span><span class="params">(String url,String user,String password)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url=url;</div><div class="line">        <span class="keyword">this</span>.user=user;</div><div class="line">        <span class="keyword">this</span>.password=password;</div><div class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回一个数据库连接</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span>(conn==<span class="keyword">null</span>)</div><div class="line">                conn= DriverManager.getConnection(url,user,password);</div><div class="line">            <span class="keyword">return</span> conn;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *关闭数据库连接</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">                conn.close();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          conn=<span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="创建Docement"><a href="#创建Docement" class="headerlink" title="创建Docement"></a>创建Docement</h2><p>首先我们得先建立一个Docement，然后往Document加入Field,最后将Document写入索引<br>下面我把创建索引抽象成一个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DocumentCreator</span> </span>&#123;</div><div class="line">    <span class="function">Document <span class="title">createDocument</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后是一个具体的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchGoodDocumentCreator</span> <span class="keyword">implements</span> <span class="title">DocumentCreator</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Document <span class="title">createDocument</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Document doc=<span class="keyword">new</span> Document();</div><div class="line">        doc.add(<span class="keyword">new</span> StoredField(<span class="string">"id"</span>,rs.getString(<span class="string">"id"</span>)));</div><div class="line">        doc.add(<span class="keyword">new</span> TextField(<span class="string">"title"</span>,rs.getString(<span class="string">"title"</span>), Field.Store.YES));</div><div class="line">        doc.add(<span class="keyword">new</span> StringField(<span class="string">"type"</span>,rs.getString(<span class="string">"type"</span>), Field.Store.YES));</div><div class="line">        doc.add(<span class="keyword">new</span> StringField(<span class="string">"mall"</span>,rs.getString(<span class="string">"mall"</span>), Field.Store.YES));</div><div class="line">        doc.add(<span class="keyword">new</span> DoubleField(<span class="string">"rank_score"</span>,rs.getDouble(<span class="string">"rank_score"</span>), Field.Store.YES));</div><div class="line">        doc.add(<span class="keyword">new</span> DoubleDocValuesField(<span class="string">"rank_score"</span>,rs.getDouble(<span class="string">"rank_score"</span>)));</div><div class="line">        doc.add(<span class="keyword">new</span> StoredField(<span class="string">"urls"</span>,rs.getString(<span class="string">"urls"</span>)));</div><div class="line">        doc.add(<span class="keyword">new</span> StoredField(<span class="string">"pic_urls"</span>,rs.getString(<span class="string">"pic_urls"</span>)));</div><div class="line">        doc.add(<span class="keyword">new</span> StoredField(<span class="string">"comment_num"</span>,rs.getString(<span class="string">"comment_num"</span>)));</div><div class="line"></div><div class="line">        doc.add(<span class="keyword">new</span> SortedDocValuesField(<span class="string">"id"</span>,<span class="keyword">new</span> BytesRef(rs.getString(<span class="string">"id"</span>))));</div><div class="line"></div><div class="line">        <span class="keyword">return</span> doc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于Field的选择有以下几种常用的情况   </p>
<ul>
<li><code>StringField</code>: 该Field不会被分词，所以在建立完索引后想要搜索它则必须完全符合才行，因为我在搜索商品的时候<code>type</code>字段和<code>mall</code>字段都是明确的，所以我使用<code>StringField</code>，并且考虑到到时候搜索返回的Document结果也依然能够拿到当时存储的<code>type</code>和<code>mall</code>，所以我在创建该字段的时候还需声明<code>Field.Store.YES</code>。</li>
<li><code>TextField</code>：它与<code>StringField</code>的区别是它会先经过Analyzer进行分词后再建立索引，因为我是通过商品名字的关键字来搜索的，所以在创建<code>title</code>的Field时用TextField。如果需要存储原来还未经过分词的原子段以便在搜索得到的结果中能够获取原子段的话，就加多<code>Field.Store.YES</code>。</li>
<li><code>DoubleField</code>，<code>IntField</code>，<code>LongField</code>等：只索引不存储，在这里。如果需要存储原来还未经过分词的原子段以便在搜索得到的结果中能够获取原子段的话，就加多<code>Field.Store.YES</code>。</li>
<li><code>DoubleDocValuesField</code>：用于对<code>double</code>字段排序，在这里我需要根据商品评分来对已经检索得到的商品集合进行排序。并且我还需要在搜到的商品中仍然能保存着<code>rankScore</code>字段，所以我还对<code>rankScore</code>用了<code>DoubleField</code>。</li>
<li><code>StoredField</code>： 只存储不建立索引。因为我不需要通过搜索<code>urls</code>,<code>pic_urls</code>和<code>comment_num</code>来获得商品，所以只需要存储就行了。</li>
</ul>
<h2 id="通过IndexWriter写入Document"><a href="#通过IndexWriter写入Document" class="headerlink" title="通过IndexWriter写入Document"></a>通过IndexWriter写入Document</h2><p>主要的步骤：</p>
<ol>
<li>创建<code>Analyzer</code></li>
<li>创建<code>IndexWriterConfig</code></li>
<li>创建<code>Directory</code></li>
<li>创建<code>IndexWriter</code> </li>
<li>用<code>IndexWriter</code>把创建好的<code>Document</code>依次写入<code>Directory</code></li>
</ol>
<p>因为项目中商品的名字是中文，所以在建立索引和检索中都需要中文分词，所以使用了<code>IKAnalyzer</code>或者<code>SmartChineseAnalyzer</code>等支持中文分词的<code>Analyzer</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexBuilder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line">    <span class="keyword">private</span> String user;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="keyword">private</span> String sql;</div><div class="line">    <span class="keyword">private</span> DBUtil dbUtil;</div><div class="line">    <span class="keyword">private</span> Analyzer analyzer=<span class="keyword">new</span> SmartChineseAnalyzer();</div><div class="line">    <span class="keyword">private</span> String indexDirUrl ;</div><div class="line">    <span class="keyword">private</span> DocumentCreator documentCreator;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnalyzer</span><span class="params">(Analyzer analyzer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.analyzer = analyzer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDbUtil</span><span class="params">(DBUtil dbUtil)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dbUtil = dbUtil;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDocumentCreator</span><span class="params">(DocumentCreator documentCreator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.documentCreator = documentCreator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndexDirUrl</span><span class="params">(String indexDirUrl)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.indexDirUrl = indexDirUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSql</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sql = sql;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(String user)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.user = user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IndexBuilder</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从数据库查询获取结果集</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> ClassNotFoundException</div><div class="line">     * <span class="doctag">@throws</span> SQLException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ResultSet <span class="title">getResultSet</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</div><div class="line">        dbUtil=<span class="keyword">new</span> DBUtil(url,user,password);</div><div class="line">        Connection conn=dbUtil.getConnection();</div><div class="line">        Statement statement=conn.createStatement();</div><div class="line">        <span class="keyword">return</span> statement.executeQuery(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 结束工作</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complete</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(dbUtil!=<span class="keyword">null</span>)</div><div class="line">            dbUtil.closeConnection();</div><div class="line">        dbUtil=<span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 启动建立索引</div><div class="line">     * <span class="doctag">@throws</span> ClassNotFoundException</div><div class="line">     * <span class="doctag">@throws</span> SQLException</div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"luceneIndexBuilder start!"</span>);</div><div class="line">        <span class="keyword">long</span> startTime=System.currentTimeMillis();</div><div class="line"></div><div class="line">        ResultSet rs=getResultSet();</div><div class="line"></div><div class="line">        IndexWriterConfig indexWriterConfig = <span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE);</div><div class="line">        Directory directory= FSDirectory.open(Paths.get(indexDirUrl));</div><div class="line">        IndexWriter indexWriter=<span class="keyword">new</span> IndexWriter(directory,indexWriterConfig);</div><div class="line"></div><div class="line">        Document doc=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>(rs.next())&#123;</div><div class="line">            doc=documentCreator.createDocument(rs);</div><div class="line">            <span class="comment">//加入Document</span></div><div class="line">            indexWriter.addDocument(doc);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//记得调用close()才能确保索引真正写入</span></div><div class="line">        indexWriter.close();</div><div class="line">        complete();</div><div class="line">        <span class="keyword">long</span> endTime=System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"luceneIndexBuilder complete"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStart</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"---testStrat()----"</span>);</div><div class="line">        String url=<span class="string">"jdbc:mysql://123.12.123.12:3306/example_db?useUnicode=true&amp;characterEncoding=utf8"</span>;</div><div class="line">        String user=<span class="string">"root"</span>;</div><div class="line">        String password=<span class="string">"123456"</span>;</div><div class="line">        String sql=<span class="string">"select id,title,type, mall,goods_rank.rank_score from goods;"</span>;</div><div class="line">        String indexDirUrl = <span class="keyword">new</span> String(<span class="string">"./indexDir/"</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//SmartChineseAnalyzer和IKAnalyzer都支持中文分词</span></div><div class="line">        Analyzer analyzer=<span class="keyword">new</span> SmartChineseAnalyzer();</div><div class="line"><span class="comment">//        Analyzer analyzer=new IKAnalyzer();</span></div><div class="line">        DocumentCreator documentCreator=<span class="keyword">new</span> SearchGoodDocumentCreator();</div><div class="line"></div><div class="line">        <span class="comment">//配置indexBuilder</span></div><div class="line">        IndexBuilder indexBuilder=<span class="keyword">new</span> IndexBuilder();</div><div class="line">        indexBuilder.setUrl(url);</div><div class="line">        indexBuilder.setUser(user);</div><div class="line">        indexBuilder.setPassword(password);</div><div class="line">        indexBuilder.setSql(sql);</div><div class="line">        indexBuilder.setAnalyzer(analyzer);</div><div class="line">        indexBuilder.setIndexDirUrl(indexDirUrl);</div><div class="line">        indexBuilder.setDocumentCreator(documentCreator);</div><div class="line"></div><div class="line">        indexBuilder.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前在项目中需要用到全文检索，根据搜索关键字来返回满足条件的商品，同时需要满足一定的商品类别和商城代码，刚好学下lucene来初步简单实现下这个需求。 &lt;/p&gt;
    
    </summary>
    
      <category term="后台" scheme="http://yoursite.com/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="全文检索" scheme="http://yoursite.com/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
      <category term="Lucene" scheme="http://yoursite.com/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>HTTP常见Content-Type比较</title>
    <link href="http://yoursite.com/2017/01/28/HTTP%E5%B8%B8%E8%A7%81Content-Type%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2017/01/28/HTTP常见Content-Type比较/</id>
    <published>2017-01-28T03:02:37.000Z</published>
    <updated>2017-03-05T13:34:45.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-application-x-www-form-urlencoded"><a href="#1-application-x-www-form-urlencoded" class="headerlink" title="1.   application/x-www-form-urlencoded"></a>1.   application/x-www-form-urlencoded</h2><p>最常见的 <code>POST</code> 提交数据的方式了。浏览器的原生 form 表单，如果不设置 <code>enctype</code> 属性，那么最终就会以 <code>application/x-www-form-urlencoded</code>方式提交数据。<br>传递的key/val会经过URL转码，所以如果传递的参数存在中文或者特殊字符需要注意。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//例子</div><div class="line">//b=曹,a=1</div><div class="line"></div><div class="line">POST  HTTP/1.1(CRLF)</div><div class="line">Host: www.example.com(CRLF)</div><div class="line">Content-Type: application/x-www-form-urlencoded(CRLF)</div><div class="line">Cache-Control: no-cache(CRLF)</div><div class="line">(CRLF)</div><div class="line">b=%E6%9B%B9&amp;a=1(CRLF)</div><div class="line">//这里b参数的值&quot;曹&quot;因为URL转码变成其他的字符串了</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="2-text-xml"><a href="#2-text-xml" class="headerlink" title="2. text/xml"></a>2. text/xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//例子</div><div class="line"></div><div class="line">POST http://www.example.com HTTP/1.1(CRLF) </div><div class="line">Content-Type: text/xml(CRLF)</div><div class="line">(CRLF)</div><div class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</div><div class="line">&lt;resource&gt;</div><div class="line">    &lt;id&gt;123&lt;/id&gt;</div><div class="line">    &lt;params&gt;</div><div class="line">        &lt;name&gt;</div><div class="line">            &lt;value&gt;homeway&lt;/value&gt;</div><div class="line">        &lt;/name&gt;</div><div class="line">        &lt;age&gt;</div><div class="line">            &lt;value&gt;22&lt;/value&gt;</div><div class="line">        &lt;/age&gt;</div><div class="line">    &lt;/params&gt;</div><div class="line">&lt;/resource&gt;</div></pre></td></tr></table></figure>
<h2 id="3-application-json"><a href="#3-application-json" class="headerlink" title="3.application/json"></a>3.application/json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//例子</div><div class="line">//传递json</div><div class="line"></div><div class="line">POST  HTTP/1.1(CRLF)</div><div class="line">Host: www.example.com(CRLF)</div><div class="line">Content-Type: application/json(CRLF)</div><div class="line">Cache-Control: no-cache(CRLF)</div><div class="line">Content-Length: 24(CRLF)</div><div class="line">(CRLF)</div><div class="line">&#123;</div><div class="line">    &quot;a&quot;:1,</div><div class="line">    &quot;b&quot;:&quot;hello&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-multipart-form-data"><a href="#4-multipart-form-data" class="headerlink" title="4. multipart/form-data"></a>4. multipart/form-data</h2><p>使用表单上传文件时，必须让 <code>form</code> 的 <code>enctyped</code> 等于这个值。<br>并且Http协议会使用boundary来分割上传的参数  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//例子</div><div class="line">//a=&quot;曹&quot;,file1是一个文件</div><div class="line"></div><div class="line">POST  HTTP/1.1(CRLF)</div><div class="line">Host: www.example.com(CRLF)</div><div class="line">//注意data;和boundary之间有一个空格,并且----WebKitFormBoundary7MA4YWxkTrZu0gW是可以自定义的</div><div class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW(CRLF)</div><div class="line">Cache-Control: no-cache(CRLF)</div><div class="line">Content-Length: 728</div><div class="line">(CRLF)</div><div class="line">//如果有Content-Length的话，则Content-Length指下面所有的字节总数，包括boundary</div><div class="line">//这里用自定义的boundary来进行分割,注意会在头部加多&quot;--&quot;</div><div class="line">------WebKitFormBoundary7MA4YWxkTrZu0gW(CRLF)</div><div class="line">Content-Disposition: form-data; name=&quot;a&quot;(CRLF)</div><div class="line">(CRLF)</div><div class="line">曹(CRLF)</div><div class="line">------WebKitFormBoundary7MA4YWxkTrZu0gW(CRLF)</div><div class="line">Content-Disposition: form-data; name=&quot;file1&quot;; filename=&quot;1.jpg&quot;</div><div class="line">Content-Type: application/octet-stream(CRLF)</div><div class="line">(CRLF)</div><div class="line">//此处是参数file1 对应的文件的二进制数据</div><div class="line">[654dfasalk;af&amp;6…](CRLF)</div><div class="line">//最后一个boundary会分别在头部和尾部加多&quot;--&quot;</div><div class="line">------WebKitFormBoundary7MA4YWxkTrZu0gW--(CRLF)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//多个文件同时上传</div><div class="line"></div><div class="line">POST  HTTP/1.1(CRLF)</div><div class="line">Host: www.example.com(CRLF)</div><div class="line">//注意data;和boundary之间有一个空格,并且----WebKitFormBoundary7MA4YWxkTrZu0gW是可以自定义的</div><div class="line">Content-Type: multipart/form-data; boundary=---------------------------418888951815204591197893077</div><div class="line">Cache-Control: no-cache(CRLF)</div><div class="line">Content-Length: 12138(CRLF)</div><div class="line">(CRLF)</div><div class="line">-----------------------------418888951815204591197893077(CRLF)</div><div class="line">// 文件1的头部boundary</div><div class="line">Content-Disposition: form-data; name=&quot;userfile[]&quot;; filename=&quot;文件1.md&quot;(CRLF)</div><div class="line">Content-Type: text/markdown(CRLF)</div><div class="line">(CRLF)</div><div class="line">// 文件1内容开始</div><div class="line">// ...</div><div class="line">// 文件1内容结束</div><div class="line">-----------------------------418888951815204591197893077(CRLF)</div><div class="line">// 文件2的头部boundary</div><div class="line">Content-Disposition: form-data; name=&quot;userfile[]&quot;; filename=&quot;文件2&quot;(CRLF)</div><div class="line">Content-Type: application/octet-stream(CRLF)</div><div class="line">(CRLF)</div><div class="line">// 文件2内容开始</div><div class="line">// ...</div><div class="line">// 文件2内容结束</div><div class="line">-----------------------------418888951815204591197893077(CRLF)</div><div class="line">// 文件3的头部boundary</div><div class="line">Content-Disposition: form-data; name=&quot;userfile[]&quot;; filename=&quot;文件3&quot;(CRLF)</div><div class="line">Content-Type: application/octet-stream(CRLF)</div><div class="line">(CRLF)</div><div class="line">// 文件3内容开始</div><div class="line">// ...</div><div class="line">// 文件3内容结束</div><div class="line">-----------------------------418888951815204591197893077(CRLF)</div><div class="line">// 参数username的头部boundary</div><div class="line">Content-Disposition: form-data; name=&quot;username&quot;(CRLF)</div><div class="line">(CRLF)</div><div class="line">zhangsan</div><div class="line">-----------------------------418888951815204591197893077(CRLF)</div><div class="line">// 参数password的头部boundary</div><div class="line">Content-Disposition: form-data; name=&quot;password&quot;(CRLF)</div><div class="line">(CRLF)</div><div class="line">zhangxx</div><div class="line">-----------------------------418888951815204591197893077-- </div><div class="line">// 尾部boundary，表示结束</div></pre></td></tr></table></figure>
<p><strong>注意</strong><br><strong><code>(CRLF)</code>指<code>\r\n</code></strong></p>
<p>附上其他一些博客<br><a href="https://callmeli.github.io/2016/08/22/http%E5%8D%8F%E8%AE%AE/" target="_blank" rel="external">http协议</a><br><a href="http://www.jianshu.com/p/abaf583f1183" target="_blank" rel="external">HTTP协议详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-application-x-www-form-urlencoded&quot;&gt;&lt;a href=&quot;#1-application-x-www-form-urlencoded&quot; class=&quot;headerlink&quot; title=&quot;1.   application/x-www-form-urlencoded&quot;&gt;&lt;/a&gt;1.   application/x-www-form-urlencoded&lt;/h2&gt;&lt;p&gt;最常见的 &lt;code&gt;POST&lt;/code&gt; 提交数据的方式了。浏览器的原生 form 表单，如果不设置 &lt;code&gt;enctype&lt;/code&gt; 属性，那么最终就会以 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;方式提交数据。&lt;br&gt;传递的key/val会经过URL转码，所以如果传递的参数存在中文或者特殊字符需要注意。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//例子&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//b=曹,a=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;POST  HTTP/1.1(CRLF)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Host: www.example.com(CRLF)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Type: application/x-www-form-urlencoded(CRLF)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cache-Control: no-cache(CRLF)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(CRLF)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b=%E6%9B%B9&amp;amp;a=1(CRLF)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//这里b参数的值&amp;quot;曹&amp;quot;因为URL转码变成其他的字符串了&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络协议" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="Http" scheme="http://yoursite.com/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>Lucene-Field.Store的Field.Index属性笔记</title>
    <link href="http://yoursite.com/2017/01/28/Lucene-Field-Store%E7%9A%84Field-Index%E5%B1%9E%E6%80%A7%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/28/Lucene-Field-Store的Field-Index属性笔记/</id>
    <published>2017-01-28T02:58:54.000Z</published>
    <updated>2017-03-05T13:39:15.345Z</updated>
    
    <content type="html"><![CDATA[<p>Field有两个属性可选：存储和索引。<br><strong>通过存储属性你可以控制是否对这个Field进行存储；</strong><br><strong>通过索引属性你可以控制是否对该Field进行索引。</strong></p>
<p>这两个属性的正确组合很重要。 </p>
<table>
<thead>
<tr>
<th style="text-align:center">Field.Index</th>
<th style="text-align:center">Field.Store</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TOKENIZED</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">被分词索引且存储</td>
</tr>
<tr>
<td style="text-align:center">TOKENIZED</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">被分词索引但不存储</td>
</tr>
<tr>
<td style="text-align:center">NO</td>
<td style="text-align:center">YES</td>
<td style="text-align:center">这是不能被搜索的，它只是被搜索内容的附属物。如URL等</td>
</tr>
<tr>
<td style="text-align:center">UN_TOKENIZED</td>
<td style="text-align:center">YES/NO</td>
<td style="text-align:center">不被分词，它作为一个整体被搜索,搜一部分是搜不出来的</td>
</tr>
<tr>
<td style="text-align:center">NO</td>
<td style="text-align:center">NO</td>
<td style="text-align:center">没有这种用法</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<pre><code>Field.Store.YES:存储字段值（未分词前的字段值） 
Field.Store.NO:不存储,存储与索引没有关系 
Field.Store.COMPRESS:压缩存储,用于长文本或二进制，但性能受损 
Field.Index.ANALYZED:分词建索引 
Field.Index.ANALYZED_NO_NORMS:分词建索引，但是Field的值不像通常那样被保存，而是只取一个byte，这样节约存储空间 
Field.Index.NOT_ANALYZED:不分词且索引 
Field.Index.NOT_ANALYZED_NO_NORMS:不分词建索引，Field的值去一个byte保存 
TermVector表示文档的条目（由一个Document和Field定位）和它们在当前文档中所出现的次数 
Field.TermVector.YES:为每个文档（Document）存储该字段的TermVector 
Field.TermVector.NO:不存储TermVector 
Field.TermVector.WITH_POSITIONS:存储位置 
Field.TermVector.WITH_OFFSETS:存储偏移量 
Field.TermVector.WITH_POSITIONS_OFFSETS:存储位置和偏移量
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Field有两个属性可选：存储和索引。&lt;br&gt;&lt;strong&gt;通过存储属性你可以控制是否对这个Field进行存储；&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;通过索引属性你可以控制是否对该Field进行索引。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这两个属性的正确组合很重要。 &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Field.Index&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Field.Store&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;TOKENIZED&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;被分词索引且存储&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;TOKENIZED&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;被分词索引但不存储&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;这是不能被搜索的，它只是被搜索内容的附属物。如URL等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;UN_TOKENIZED&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES/NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;不被分词，它作为一个整体被搜索,搜一部分是搜不出来的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;没有这种用法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="后台" scheme="http://yoursite.com/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="全文检索" scheme="http://yoursite.com/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
      <category term="Lucene" scheme="http://yoursite.com/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>ThreadPoolExecutor的PriorityBlockingQueue类型转化问题</title>
    <link href="http://yoursite.com/2017/01/28/ThreadPoolExecutor%E7%9A%84PriorityBlockingQueue%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/01/28/ThreadPoolExecutor的PriorityBlockingQueue类型转化问题/</id>
    <published>2017-01-28T02:53:32.000Z</published>
    <updated>2017-03-11T02:01:52.949Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用ThreadPoolExecutor的时候碰到点问题,因为项目原因在使用ThreadPoolExecutor准备把BlockingQueue替换为PriorityBlockingQueue,从而实现对优先级任务处理的线程池,贴下代码先   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">T</span>&gt;,<span class="title">Comparable</span>&lt;<span class="title">Event</span>&gt;</span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ExecutorService executorService=<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,TimeUnit.SECONDS,<span class="keyword">new</span> PriorityBlockingQueue());</div></pre></td></tr></table></figure>
<p>然后当我进行以下操作的时候</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">executorService.submit(<span class="keyword">new</span> Event&lt;Object&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                ...</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>出现了如下错误</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">java.lang.ClassCastException: java.util.concurrent.FutureTask cannot be cast to java.lang.Comparable</div><div class="line">    at java.util.concurrent.PriorityBlockingQueue.siftUpComparable(PriorityBlockingQueue.java:<span class="number">357</span>)</div><div class="line">    at java.util.concurrent.PriorityBlockingQueue.offer(PriorityBlockingQueue.java:<span class="number">489</span>)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:<span class="number">1361</span>)</div><div class="line">    at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:<span class="number">134</span>)</div></pre></td></tr></table></figure>
<p>找到java.util.concurrent.PriorityBlockingQueue.siftUpComparable方法： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">siftUpComparable</span><span class="params">(<span class="keyword">int</span> k, T x, Object[] array)</span> </span>&#123;</div><div class="line">        Comparable&lt;? <span class="keyword">super</span> T&gt; key = (Comparable&lt;? <span class="keyword">super</span> T&gt;) x;</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">            Object e = array[parent];</div><div class="line">            <span class="keyword">if</span> (key.compareTo((T) e) &gt;= <span class="number">0</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            array[k] = e;</div><div class="line">            k = parent;</div><div class="line">        &#125;</div><div class="line">        array[k] = key;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>是在<code>Comparable&lt;? super T&gt; key = (Comparable&lt;? super T&gt;) x;</code>上出现问题，根据<code>java.util.concurrent.FutureTask cannot be cast to java.lang.Comparable</code>知道x的类型是<code>java.util.concurrent.FutureTask</code>。现在看看<code>FutureTask</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public class FutureTask&lt;V&gt; implements RunnableFuture&lt;V&gt;</div><div class="line">public interface RunnableFuture&lt;V&gt; extends Runnable, Future&lt;V&gt;</div></pre></td></tr></table></figure>
<p>可见FutureTask的确没有实现Comparable接口,但是我提交的<code>Event</code>是实现了<code>Comparable</code>接口的,究竟是因为什么原因导致其成为了FutureTask呢，结果在<code>ThreadPoolExecutor的submit(Callable&lt;T&gt; task)</code>找到原因，它是在<code>AbstractExecutorService</code>中实现的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        RunnableFuture&lt;T&gt; ftask = newTaskFor(task);</div><div class="line">        execute(ftask);</div><div class="line">        <span class="keyword">return</span> ftask;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>重点在<code>newTaskFor</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Callable&lt;T&gt; callable)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FutureTask&lt;T&gt;(callable);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>所以我提交的<code>Event</code>被转化为了<code>FutureTask</code>了，而<code>FutureTask</code>没有实现<code>Comparable</code>，所以才会报错</strong><br>现在解决的方法有:</p>
<ul>
<li>用一个<code>ComparableFutureTask</code>继承<code>FutureTask</code>并实现<code>Comparable</code>接口，但也必须要override <code>ThreadPoolExecutor</code>的<code>newTaskFor</code>方法</li>
</ul>
<p><strong>另外需要注意的是<code>PriorityBlockingQueue</code>的实现是一个最小堆.</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用ThreadPoolExecutor的时候碰到点问题,因为项目原因在使用ThreadPoolExecutor准备把BlockingQueue替换为PriorityBlockingQueue,从而实现对优先级任务处理的线程池,贴下代码先   &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Event&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Callable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;,&lt;span class=&quot;title&quot;&gt;Comparable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Event&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ExecutorService executorService=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,TimeUnit.SECONDS,&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PriorityBlockingQueue());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后当我进行以下操作的时候&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;executorService.submit(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Event&amp;lt;Object&amp;gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>在遍历List的过程中删除元素</title>
    <link href="http://yoursite.com/2017/01/28/%E5%9C%A8%E9%81%8D%E5%8E%86List%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2017/01/28/在遍历List的过程中删除元素/</id>
    <published>2017-01-28T02:51:33.000Z</published>
    <updated>2017-03-10T16:31:32.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先遍历List的方式有以下几种"><a href="#首先遍历List的方式有以下几种" class="headerlink" title="首先遍历List的方式有以下几种:"></a>首先遍历List的方式有以下几种:</h3><ul>
<li>普通for循环</li>
<li>foreach循环</li>
<li>使用迭代器(Iterator)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 使用foeach循环 </div><div class="line">     * 在循环过程中从List中删除元素以后，继续循环List时会抛出</div><div class="line">     * ConcurrentModificationException </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listRemove</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Handler&gt; handlers = <span class="keyword">this</span>.handlers();</div><div class="line">        <span class="keyword">for</span> (Handler handler : handlers) &#123;</div><div class="line">            <span class="keyword">if</span> (handler.getId() == <span class="number">2</span>)</div><div class="line">                handlers.remove(handler);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 像这种foreach循环+break操作对List进行遍历删除，但删除之后马上就跳出的也</div><div class="line"> * 不会出现异常 </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listRemoveBreak</span><span class="params">()</span> </span>&#123;  </div><div class="line">    List&lt;Handler&gt; handlers = <span class="keyword">this</span>.Handlers();  </div><div class="line">    <span class="keyword">for</span> (Handler handler : handlers) &#123;  </div><div class="line">        <span class="keyword">if</span> (handler.getId() == <span class="number">2</span>) &#123;  </div><div class="line">            handlers.remove(handler);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 这种遍历有可能会遗漏某个元素,因为删除元素后List的size在 </div><div class="line"> * 变化，元素的索引也在变化，比如你循环到第2个元素的时候你把它删了， </div><div class="line"> * 接下来你去访问第3个元素，实际上访问到的是原先的第4个元素。当访问的元</div><div class="line"> * 素 </div><div class="line"> * 索引超过了当前的List的size后还会出现数组越界的异常，当然这里不会出现</div><div class="line"> * 这种异常， </div><div class="line"> * 因为这里每遍历一次都重新拿了一次当前List的size。 </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listRemove2</span><span class="params">()</span> </span>&#123;  </div><div class="line">    List&lt;handlers&gt; handlers = <span class="keyword">this</span>.getHandlers();  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;handlers.size(); i++) &#123;  </div><div class="line">        <span class="keyword">if</span> (handlers.get(i).getId() == <span class="number">1</span>) &#123;  </div><div class="line">            Handler handler = handlers.get(i);  </div><div class="line">            handlers.remove(handler);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 使用Iterator的方式也可以顺利删除和遍历 </div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">iteratorRemove</span><span class="params">()</span> </span>&#123;  </div><div class="line">    List&lt;Handlers&gt; handlers = <span class="keyword">this</span>.getHandlers();  </div><div class="line">    System.out.println(handlers);  </div><div class="line">    Iterator&lt;Handler&gt; handlIter = handlers.iterator();  </div><div class="line">    <span class="keyword">while</span> (handlIter.hasNext()) &#123;  </div><div class="line">        Handler handler = handlIter.next();  </div><div class="line">        <span class="keyword">if</span> (handler.getId()  == <span class="number">1</span>)  </div><div class="line">            handlIter.remove();<span class="comment">//这里要使用Iterator的remove方法移除当前对象，如果使用List的remove方法，则同样会出现ConcurrentModificationException  </span></div><div class="line">    &#125;  </div><div class="line">    System.out.println(handlers);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如果是在遍历操作远多于可变操作的时候，还可以可以考虑CopyOnWriteArrayList"><a href="#如果是在遍历操作远多于可变操作的时候，还可以可以考虑CopyOnWriteArrayList" class="headerlink" title="如果是在遍历操作远多于可变操作的时候，还可以可以考虑CopyOnWriteArrayList"></a>如果是在遍历操作远多于可变操作的时候，还可以可以考虑CopyOnWriteArrayList</h3><pre><code>这一般需要很大的开销，但是当遍历操作的数量大大超过可变操作的数量时，这种方法可能比其他替代方法更 有效。在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时，它也很有用。“快照”风格的迭代器方法在创建迭代器时使用了对数组状态的引用。此数组在迭代器的生存期内不会更改，因此不可能发生冲突，并且迭代器保证不会抛出ConcurrentModificationException。创建迭代器以后，迭代器就不会反映列表的添加、移除或者更改。在迭代器上进行的元素更改操作（remove、set和add）不受支持。这些方法将抛出UnsupportedOperationException。允许使用所有元素，包括null。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先遍历List的方式有以下几种&quot;&gt;&lt;a href=&quot;#首先遍历List的方式有以下几种&quot; class=&quot;headerlink&quot; title=&quot;首先遍历List的方式有以下几种:&quot;&gt;&lt;/a&gt;首先遍历List的方式有以下几种:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;普通for循环&lt;/li&gt;
&lt;li&gt;foreach循环&lt;/li&gt;
&lt;li&gt;使用迭代器(Iterator)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * 使用foeach循环 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * 在循环过程中从List中删除元素以后，继续循环List时会抛出&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * ConcurrentModificationException &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;listRemove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        List&amp;lt;Handler&amp;gt; handlers = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handlers();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Handler handler : handlers) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (handler.getId() == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                handlers.remove(handler);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 像这种foreach循环+break操作对List进行遍历删除，但删除之后马上就跳出的也&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 不会出现异常 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;listRemoveBreak&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    List&amp;lt;Handler&amp;gt; handlers = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.Handlers();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Handler handler : handlers) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (handler.getId() == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            handlers.remove(handler);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>pandas 常用操作</title>
    <link href="http://yoursite.com/2017/01/28/pandas-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/01/28/pandas-常用操作/</id>
    <published>2017-01-28T02:49:40.000Z</published>
    <updated>2017-03-06T13:24:17.446Z</updated>
    
    <content type="html"><![CDATA[<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><ul>
<li>删除列：<br><code>df=df.drop(&#39;column_label&#39;,axis=1)</code></li>
<li>删除行：<br><code>df=df.drop(&#39;row_label&#39;)</code></li>
<li>删除重复的行: <code>df=df.drop_duplicates([&#39;column_label_one&#39;,&#39;column_label_two&#39;])</code></li>
</ul>
<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><ul>
<li>查看行数<br><code>len(df) or len(df.index) or df.shape[0]</code></li>
<li>列数<br><code>len(df.columns) or df.shape[1]</code></li>
<li>数据类型<br><code>df.dtypes</code>   </li>
</ul>
<a id="more"></a>
<h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><ul>
<li>列标签的重命名<br><code>df.rename(columns={&quot;old label&quot;: &quot;new label&quot;})​</code></li>
<li>行标签的重命名<br><code>df.rename(index={&quot;old label&quot;: &quot;new label&quot;}​</code></li>
</ul>
<h3 id="时间序列的操作"><a href="#时间序列的操作" class="headerlink" title="时间序列的操作"></a>时间序列的操作</h3><ul>
<li>将时间字符串转换成datetime数据<br><code>dt[&#39;StartTime&#39;] = pd.to_datetime(dt[&#39;StartTime&#39;])</code></li>
</ul>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul>
<li>按值排序，可指定列名和排序方式，默认的是升序排序<br><code>dt.sort([&#39;StartTime&#39;], inplace=True) or dt.sort([&#39;StartTime&#39;])</code> </li>
<li>照索引（行名）或者列名进行排序,指定axis=0表示按索引（行名）排序，axis=1表示按列名排序，并可指定升序或者降序：<br><code>df.sort_index(axis=1, ascending=False)</code></li>
</ul>
<h3 id="读写操作"><a href="#读写操作" class="headerlink" title="读写操作"></a>读写操作</h3><ul>
<li><p>读csv<br><code>pd.read_csv(&#39;input.csv&#39;) | pd.read_table(&#39;input.csv&#39;, sep=&#39;,&#39;)</code></p>
<ul>
<li>参数 header = None pandas分配默认列名</li>
<li>参数 name = [‘a’, ‘b’, ‘c’] 指定列名</li>
<li>参数 index_col=’idx 指定索引</li>
<li>参数 shiprows = [0, 2, 4] 跳过文件部分行</li>
<li>参数 nrows = 20 只读取文件前xx行</li>
<li>参数 chunksize = 10000 指定每次读取行数，分块读取，返回TextParse对象</li>
</ul>
</li>
<li><p>写csv<br><code>pd.to_csv(&#39;output.csv&#39;)</code></p>
<ul>
<li>参数 na_rep = ‘NULL’ 缺失值输出为指定标记值，默认为空字符串</li>
<li>参数 index = False, header = False 禁止输出行和列的标签, 默认输出</li>
<li>参数 cols=[‘a’, ‘b’] 指定输出以部分列，并以指定顺序排序</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;删除操作&quot;&gt;&lt;a href=&quot;#删除操作&quot; class=&quot;headerlink&quot; title=&quot;删除操作&quot;&gt;&lt;/a&gt;删除操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;删除列：&lt;br&gt;&lt;code&gt;df=df.drop(&amp;#39;column_label&amp;#39;,axis=1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除行：&lt;br&gt;&lt;code&gt;df=df.drop(&amp;#39;row_label&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除重复的行: &lt;code&gt;df=df.drop_duplicates([&amp;#39;column_label_one&amp;#39;,&amp;#39;column_label_two&amp;#39;])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;查看&quot;&gt;&lt;a href=&quot;#查看&quot; class=&quot;headerlink&quot; title=&quot;查看&quot;&gt;&lt;/a&gt;查看&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查看行数&lt;br&gt;&lt;code&gt;len(df) or len(df.index) or df.shape[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;列数&lt;br&gt;&lt;code&gt;len(df.columns) or df.shape[1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;数据类型&lt;br&gt;&lt;code&gt;df.dtypes&lt;/code&gt;   &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据处理" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
    
      <category term="Pandas" scheme="http://yoursite.com/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>java读取配置文件的几种方式</title>
    <link href="http://yoursite.com/2017/01/28/java%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/01/28/java读取配置文件的几种方式/</id>
    <published>2017-01-28T02:44:16.000Z</published>
    <updated>2017-03-10T16:34:10.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-使用绝对路径-不推荐-移植性差"><a href="#1-使用绝对路径-不推荐-移植性差" class="headerlink" title="1.使用绝对路径(不推荐,移植性差)"></a>1.使用绝对路径(不推荐,移植性差)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String picTempDirUrl;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String picStoreDir;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        Properties properties=<span class="keyword">new</span> Properties();</div><div class="line">        InputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">"/home/ubuntu/img/config.properties"</span>);<span class="comment">//配置文件在磁盘的绝对路径</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            properties.load(in);</div><div class="line">            in.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        picTempDirUrl= (String) properties.get(<span class="string">"picTempDirUrl"</span>);</div><div class="line">        picStoreDir= (String) properties.get(<span class="string">"picStoreDir"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2-使用getResourceAsStream"><a href="#2-使用getResourceAsStream" class="headerlink" title="2.使用getResourceAsStream"></a>2.使用getResourceAsStream</h2><h3 id="Class-getResourceAsStream-String-path-："><a href="#Class-getResourceAsStream-String-path-：" class="headerlink" title="Class.getResourceAsStream(String path) ："></a>Class.getResourceAsStream(String path) ：</h3><blockquote>
<p>路径名不以’/‘开头时默认是从此类所在的包下取资源，以’/‘开头则是从ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。</p>
</blockquote>
<h3 id="Class-getClassLoader-getResourceAsStream-String-path"><a href="#Class-getClassLoader-getResourceAsStream-String-path" class="headerlink" title="Class.getClassLoader.getResourceAsStream(String path)"></a>Class.getClassLoader.getResourceAsStream(String path)</h3><blockquote>
<p>默认则是从ClassPath根下获取，经过测试无论path是不是以’/‘开头，都是从ClassPath根下开始操作，最终是由ClassLoader获取资源。</p>
</blockquote>
<p><strong>以下是用Class.getClassLoader.getResourceAsStream(String path)获取配置文件的一个例子</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String picTempDirUrl;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String picStoreDir;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        Properties properties=<span class="keyword">new</span> Properties();</div><div class="line">        InputStream in=Configuration.class.getClassLoader().getResourceAsStream(<span class="string">"config.properties"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            properties.load(in);</div><div class="line">            in.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        picTempDirUrl= (String) properties.get(<span class="string">"picTempDirUrl"</span>);</div><div class="line">        picStoreDir= (String) properties.get(<span class="string">"picStoreDir"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>配置文件可以放在src目录里或者resource目录里</strong></p>
<h2 id="3-ServletContext-getResourceAsStream"><a href="#3-ServletContext-getResourceAsStream" class="headerlink" title="3.ServletContext.getResourceAsStream()"></a>3.ServletContext.getResourceAsStream()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">properties.load(getServletContext().getResourceAsStream(<span class="string">"/WEB-INF/filename.properties"</span>));</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-使用绝对路径-不推荐-移植性差&quot;&gt;&lt;a href=&quot;#1-使用绝对路径-不推荐-移植性差&quot; class=&quot;headerlink&quot; title=&quot;1.使用绝对路径(不推荐,移植性差)&quot;&gt;&lt;/a&gt;1.使用绝对路径(不推荐,移植性差)&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Configuration&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String picTempDirUrl;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String picStoreDir;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Properties properties=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Properties();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        InputStream in=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;string&quot;&gt;&quot;/home/ubuntu/img/config.properties&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//配置文件在磁盘的绝对路径&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            properties.load(in);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            in.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        picTempDirUrl= (String) properties.get(&lt;span class=&quot;string&quot;&gt;&quot;picTempDirUrl&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        picStoreDir= (String) properties.get(&lt;span class=&quot;string&quot;&gt;&quot;picStoreDir&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java-动态代理学习笔记</title>
    <link href="http://yoursite.com/2017/01/28/java-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/01/28/java-动态代理学习笔记/</id>
    <published>2017-01-28T02:17:36.000Z</published>
    <updated>2017-03-11T01:58:41.002Z</updated>
    
    <content type="html"><![CDATA[<p><strong>代理模式</strong><br>    给某个对象提供一个代理对象，并由代理对象控制对于原对象的访问，即客户不直接操控原对象，而是通过代理对象间接地操控原对象。<br><strong>其中代理可以分为两种方式,分别是静态代理和动态代理</strong>   </p>
<a id="more"></a>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><img src="http://oke2lzov9.bkt.clouddn.com/blog/images/3_01">
<p>大概的思想就是如果我想创建一个对RealSubject类进行代理的代理类，那么我可以创建一个代理类Proxy，让它实现和RealSubject同样的接口或者同样的函数，也就是实现Subject接口或者继承Subject，这样Proxy也就可以被当做为Subject类来使用，然后让该Proxy类拥有一个RealSubject类的实例，在Proxy类的request()方法中再去调用RealSubject实例的request()方法和做一些其他的处理。  </p>
<p>直接上代码吧</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyDemo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">        RealSubject subject = <span class="keyword">new</span> RealSubject();</div><div class="line">        Proxy p = <span class="keyword">new</span> Proxy(subject);</div><div class="line">        p.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"request"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Subject subject;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Subject subject)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.subject = subject;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"PreProcess"</span>);</div><div class="line">        subject.request();</div><div class="line">        System.out.println(<span class="string">"PostProcess"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>如果大量使用前面的静态代理可能就会有人想抱怨了，“我靠，每次实现一个代理我都得去写多一个类”，而且再考虑下以下这种场景：</p>
<blockquote>
<p>假如我有3个类 AC,BC,CC 分别实现了(换成继承关系也没关系)A,B,C接口， 而且分别实现了fa(),fb(),fc()函数，然后我想通过代理来实现计算fa(),fb(),fc()的执行时间，在这里就简单认为在执行函数前加多个fp()函数吧，如果我是用静态代理的话，那么就意味着我需要分别写多3个代理类，分别为AP,BP,CP类，而且都各自实现A,B,C接口，然后还得在各自代理的函数中加入<strong>同一句</strong>函数fp()，可见这样实现多么死板，这时候我们就需要动态代理来搞定这问题啦!</p>
</blockquote>
<p><strong>首先说下几个词的概念先</strong></p>
<ul>
<li>委托类和委托对象：委托类是一个类，委托对象是委托类的实例。</li>
<li>代理类和代理对象：代理类是一个类，代理对象是代理类的实例。</li>
</ul>
<p><strong>java实现动态代理有两种:</strong></p>
<ul>
<li>JDK动态代理</li>
<li>cglib动态代理</li>
</ul>
<h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>考虑这么一个例子，假如我有下面这些类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello world!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        HelloService helloService=<span class="keyword">new</span> HelloServiceImpl();</div><div class="line">        helloService.sayHello();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先执行结果应该为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello world!</div></pre></td></tr></table></figure></p>
<p> 这时候我想通过代理才实现在输出<code>hello world!</code>之前先输出<code>welcome yuan!</code>,然后在输出<code>hello world!</code>之后再输出<code>bye!</code>,这时候我需要这么写:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxyFactory</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//委托对象</span></div><div class="line">    <span class="keyword">private</span> Object target;</div><div class="line"></div><div class="line">    <span class="comment">//构造函数，在此传入将要被代理的对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyProxyFactory</span><span class="params">(Object target)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.target=target;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">//在执行委托对象的函数之前</span></div><div class="line">        System.out.println(<span class="string">"welcom yuan!"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//执行委托对象的函数(target是委托对象，args是这个函数需要的形参)</span></div><div class="line">        Object result=method.invoke(target,args);</div><div class="line"></div><div class="line">        <span class="comment">//在执行委托对象的函数之后</span></div><div class="line">        System.out.println(<span class="string">"bye!"</span>);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//自己封装返回一个代理对象实例</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后main函数改一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        HelloService helloService=<span class="keyword">new</span> HelloServiceImpl();</div><div class="line">        MyProxyFactory myProxyFactory=<span class="keyword">new</span> MyProxyFactory(helloService);</div><div class="line">        HelloService helloService1Proxy= (HelloService) myProxyFactory.getProxyInstance();</div><div class="line">        helloService1Proxy.sayHello();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">welcom yuan!</div><div class="line">hello world!</div><div class="line">bye!</div></pre></td></tr></table></figure>
<p>现在解释下关于JDK动态代理用到的类</p>
<ol>
<li><code>java.lang.reflect.Proxy</code>:这是生成代理类的主类，通过 Proxy 类生成的代理类都继承了 Proxy 类。我们主要通过<code>Proxy</code>的</li>
<li><code>java.lang.reflect.InvocationHandler</code>:需要自己定义一个实现该接口的类，我们动态生成的代理类需要完成的具体操作将在该接口的<code>invoke</code>方法内实现。 第一个参数是代理对象（表示哪个代理对象调用了method方法），第二个参数是 Method 对象（表示哪个方法被调用了），第三个参数是指定调用方法的参数。这个函数是在代理对象调用任何一个方法时都会调用的，方法不同会导致第二个参数method不同。如果你想对特定的函数进行处理，可以自己在<code>invoke</code>方法内自己做些判断，或许还有其他的方法可以实现…</li>
</ol>
<p><strong>JDK动态代理的局限性</strong></p>
<blockquote>
<p>因为 Java 的单继承特性（每个代理类都继承了 Proxy 类），只能针对接口创建代理类，不能针对类创建代理类。</p>
</blockquote>
<p><strong>附加资料</strong><br><a href="http://blog.csdn.net/liushuijinger/article/details/37829049" target="_blank" rel="external">JDK动态代理的实现原理和模拟</a><br><a href="http://www.jianshu.com/p/6f6bb2f0ece9" target="_blank" rel="external">Java 动态代理</a></p>
<h2 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h2><blockquote>
<p>使用JDK动态代理使用到一个Proxy类和一个InvocationHandler接口。<br>Proxy已经设计得非常优美，但是还是有一点点小小的遗憾之处，那就是它仅支持interface代理（也就是代理类必须实现接口），因为它的设计注定了这个遗憾。对于上面说到JDK仅支持对实现接口的委托类进行代理的缺陷，这个问题CGLIB给予了很好的补位，解决了这个问题，使其委托类也可是非接口实现类。<br>CGLIB内部使用到ASM，所以下面的例子需要引入asm-3.3.jar、cglib-2.2.2.jar</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"hi"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglibProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//需要实现的接口函数</span></div><div class="line">    <span class="comment">//注意！这里的o对象跟被代理对象实例不是同一个</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//过滤那些由Object类继承过来的方法</span></div><div class="line">        <span class="comment">//boolean flag=!(method.getDeclaringClass().getName().equals("java.lang.Object"));</span></div><div class="line"></div><div class="line">        <span class="comment">//或者检查要拦截的方法的名字，如果是sayHello方法才进行拦截</span></div><div class="line">        <span class="keyword">boolean</span> flag=method.getName().equals(<span class="string">"sayHello"</span>);</div><div class="line">        <span class="keyword">if</span>(flag==<span class="keyword">true</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"welcome yuan!"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//我们一般使用proxy.invokeSuper(obj,args)方法。这个很好理解，就是执行原始类的方法。还有一个方法proxy.invoke(obj,args)，这是执行生成子类的方法。</span></div><div class="line">      <span class="comment">//如果传入的obj就是子类的话，会发生内存溢出，因为子类的方法不挺地进入intercept方法，而这个方法又去调用子类的方法，两个方法直接循环调用了。</span></div><div class="line">        Object result=methodProxy.invokeSuper(o,args);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(flag==<span class="keyword">true</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"bybe"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回代理对象实例</div><div class="line">     * <span class="doctag">@param</span> target 被代理的对象实例</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">(Object target)</span></span>&#123;</div><div class="line">        <span class="comment">//该类用于生成代理对象</span></div><div class="line">        Enhancer enhancer=<span class="keyword">new</span> Enhancer();</div><div class="line">        <span class="comment">//设置父类</span></div><div class="line">        enhancer.setSuperclass(target.getClass());</div><div class="line">        <span class="comment">//设置回调用对象为本身</span></div><div class="line">        enhancer.setCallback(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> enhancer.create();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Hello hello=<span class="keyword">new</span> Hello();</div><div class="line">        MyCglibProxyFactory myCglibProxyFactory=<span class="keyword">new</span> MyCglibProxyFactory();</div><div class="line">        Hello helloProxy=(Hello)myCglibProxyFactory.getProxyInstance(hello);</div><div class="line">        helloProxy.sayHello();</div><div class="line">        helloProxy.sayHi();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>输出结果:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">welcome yuan!</div><div class="line">hello</div><div class="line">bybe</div><div class="line">hi</div></pre></td></tr></table></figure>
<p>其中<code>sayHello()</code>方法得到处理，而<code>sayHi()</code>方法则没有。</p>
<p><strong>附加资料</strong><br><a href="http://blog.csdn.net/catoop/article/details/50730530" target="_blank" rel="external">cglib参考资料</a></p>
<p><strong><a href="http://www.kancloud.cn/evankaka/springlearning/119667" target="_blank" rel="external">JDK动态代理和CGLib的比较</a></strong></p>
<blockquote>
<p>CGLib所创建的动态代理对象的性能比JDK所创建的代理对象性能高不少，大概10倍，但CGLib在创建代理对象时所花费的时间却比JDK动态代理多大概8倍，所以对于singleton的代理对象或者具有实例池的代理，因为无需频繁的创建新的实例，所以比较适合CGLib动态代理技术，反之则适用于JDK动态代理技术。另外，由于CGLib采用动态创建子类的方式生成代理对象，所以不能对目标类中的final，private等方法进行处理。所以，大家需要根据实际的情况选择使用什么样的代理了。同样的，Spring的AOP编程中相关的ProxyFactory代理工厂内部就是使用JDK动态代理或CGLib动态代理的，通过动态代理，将增强（advice)应用到目标类中。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;代理模式&lt;/strong&gt;&lt;br&gt;    给某个对象提供一个代理对象，并由代理对象控制对于原对象的访问，即客户不直接操控原对象，而是通过代理对象间接地操控原对象。&lt;br&gt;&lt;strong&gt;其中代理可以分为两种方式,分别是静态代理和动态代理&lt;/strong&gt;   &lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>前端使用FormData实现上传文件</title>
    <link href="http://yoursite.com/2017/01/27/%E5%89%8D%E7%AB%AF%E4%BD%BF%E7%94%A8FormData%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/01/27/前端使用FormData实现上传文件/</id>
    <published>2017-01-27T14:36:06.000Z</published>
    <updated>2017-03-10T16:32:24.045Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>场景: 用户通过点击图片弹出上传文件的框框，然后选择将要替换的图片，选择后实时预览，点击确定后通过ajax上传到服务器.</p>
</blockquote>
<p><strong>前端html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"img_div"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"img_upload"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"picture"</span> <span class="attr">src</span>=<span class="string">"$picturePath$"</span> <span class="attr">alt</span>=<span class="string">"头像"</span> <span class="attr">class</span>=<span class="string">"img-rounded"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>将上述html中的上传input元素的透明度设置为0，并且设置宽度和高度，用它来遮住a标签,注意设置外部div的position</strong>   </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#img_div</span>&#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#img_upload</span>&#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">9</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>JS代码</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为头像上传设置实时预览监听器</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setOnchangeListener</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"body"</span>).on(<span class="string">"change"</span>,<span class="string">"#img_upload"</span>,previewFile);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//实时预览上传图片</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">previewFile</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> preview=$(<span class="string">"#picture"</span>);</div><div class="line">    <span class="keyword">var</span> file=$(<span class="string">"#img_upload"</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> reader=<span class="keyword">new</span> FileReader();</div><div class="line">    reader.addEventListener(<span class="string">"load"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       preview.prop(<span class="string">"src"</span>,reader.result);</div><div class="line">    &#125;,<span class="literal">false</span>);</div><div class="line">    <span class="keyword">if</span>(file)&#123;</div><div class="line">        reader.readAsDataURL(file);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//上传图片</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setPicture</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> file=$(<span class="string">"#img_upload"</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span>(file==<span class="literal">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> formData=<span class="keyword">new</span> FormData();</div><div class="line">    formData.append(<span class="string">'file'</span>,file);</div><div class="line">    <span class="keyword">var</span> url=serverUrl+<span class="string">"uploadPic"</span>;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>:url,</div><div class="line">        <span class="attr">type</span>:<span class="string">'POST'</span>,</div><div class="line">        <span class="attr">cache</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">data</span>:formData,</div><div class="line">        <span class="attr">processData</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">contentType</span>:<span class="literal">false</span>,</div><div class="line">        <span class="attr">xhrFields</span>: &#123;</div><div class="line">            <span class="attr">withCredentials</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">crossDomain</span>: <span class="literal">true</span>,</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>其中</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">processData:<span class="literal">false</span>,</div><div class="line"><span class="attr">contentType</span>:<span class="literal">false</span>,</div></pre></td></tr></table></figure>
<p><strong>的设置需要注意。</strong></p>
<p><strong>这里后台我用的是java web（SpringMVC）就贴一下控制器接收上传文件的代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/uploadPic"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Object  <span class="title">handleUploadPic</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span>MultipartFile file, HttpServletRequest request)</span>&#123;</div><div class="line">        String userName=cookieService.getUserName(request);</div><div class="line">        String picUrl=fileService.saveImg(file);</div><div class="line">        String oldPicUrl=manageService.getPicUrl(userName);</div><div class="line">        fileService.deleteFile(oldPicUrl);</div><div class="line">        manageService.setPicUrl(userName,picUrl);</div><div class="line">        Map&lt;String,Object&gt; result=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">        result.put(keyStatus,valueStatusOk);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>其中file就是接收到的上传文件</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;场景: 用户通过点击图片弹出上传文件的框框，然后选择将要替换的图片，选择后实时预览，点击确定后通过ajax上传到服务器.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;前端html&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img_div&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img_upload&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;picture&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$picturePath$&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;头像&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;img-rounded&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将上述html中的上传input元素的透明度设置为0，并且设置宽度和高度，用它来遮住a标签,注意设置外部div的position&lt;/strong&gt;   &lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#img_div&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#img_upload&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ArrayDeque原理学习</title>
    <link href="http://yoursite.com/2016/12/19/ArrayDeque%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/12/19/ArrayDeque原理学习/</id>
    <published>2016-12-19T13:35:22.000Z</published>
    <updated>2017-03-10T16:22:32.947Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>Deque接口(双向队列)的两个主要实现类是<code>ArrayDeque</code>和<code>LinkedList</code>       </p>
</li>
<li><p>ArrayDeque底层使用循环数组实现双向队列         </p>
</li>
<li><p>ArrayDeque内部使用的循环数组的容量，当首次进行初始化的时候，最小容量为8，如果超过8，扩大成2的幂            </p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 调用带有容量参数的构造函数后，数组初始化过程</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">allocateElements</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> initialCapacity = MIN_INITIAL_CAPACITY; <span class="comment">// 最小容量为8</span></div><div class="line">    <span class="keyword">if</span> (numElements &gt;= initialCapacity) &#123; <span class="comment">// 如果要分配的容量大于等于8，扩大成2的幂；否则使用最小容量8</span></div><div class="line">        initialCapacity = numElements;</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">1</span>);</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">2</span>);</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">4</span>);</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">8</span>);</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">        initialCapacity++;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">            initialCapacity &gt;&gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    elements = <span class="keyword">new</span> Object[initialCapacity]; <span class="comment">// 构造数组</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>它将<code>initialCapacity</code>左边最高位的1复制到右边的每一位，这种复制类似于病毒复制，是1传2、2传4、4传8式的指数级复制，最后再执行<code>initialCapacity++</code>就可以得到比<code>initialCapacity</code>大且为<code>2</code>的幂次方的最小的数。     </p>
<p>添加元素的执行过程如下：  </p>
<p><img src="http://7x2wh6.com1.z0.glb.clouddn.com/arraydeque01.jpg" alt="">        </p>
<h3 id="内部存储"><a href="#内部存储" class="headerlink" title="内部存储"></a>内部存储</h3><p>ArrayDeque使用的是<strong>循环数组</strong>，内部有3个属性，分别是：   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Object[] elements; <span class="comment">// 数组</span></div><div class="line"><span class="keyword">int</span> head; <span class="comment">// 头索引</span></div><div class="line"><span class="keyword">int</span> tail; <span class="comment">// 尾索引</span></div></pre></td></tr></table></figure>
<h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>ArrayDeque的扩容会把数组容量扩大2倍，同时还会重置头索引和尾索引，头索引置为0，尾索引置为原容量的值。   </p>
<p>比如容量为8，扩容为16，头索引变成0，尾索引变成8。   </p>
<p>扩容代码如下：   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doubleCapacity</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">assert</span> head == tail;</div><div class="line">    <span class="keyword">int</span> p = head;</div><div class="line">    <span class="keyword">int</span> n = elements.length;</div><div class="line">    <span class="keyword">int</span> r = n - p;</div><div class="line">    <span class="keyword">int</span> newCapacity = n &lt;&lt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (newCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Sorry, deque too big"</span>);</div><div class="line">    Object[] a = <span class="keyword">new</span> Object[newCapacity];</div><div class="line">    System.arraycopy(elements, p, a, <span class="number">0</span>, r);</div><div class="line">    System.arraycopy(elements, <span class="number">0</span>, a, r, p);</div><div class="line">    elements = a;</div><div class="line">    head = <span class="number">0</span>;  <span class="comment">// 头索引重置</span></div><div class="line">    tail = n;  <span class="comment">// 尾索引重置</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7x2wh6.com1.z0.glb.clouddn.com/arraydeque03.jpg" alt="">  </p>
<h3 id="add操作"><a href="#add操作" class="headerlink" title="add操作"></a>add操作</h3><p>上面例子使用的add方法，其实内部使用了addLast方法，addLast也就添加数据到双向队列尾端：   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    elements[tail] = e; <span class="comment">// 根据尾索引，添加到尾端</span></div><div class="line">    <span class="keyword">if</span> ( (tail = (tail + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)) == head) <span class="comment">// 尾索引+1，如果尾索引和头索引重复了，说明数组满了，进行扩容</span></div><div class="line">        doubleCapacity();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>addFirst方法跟addLast方法相反，添加数据到双向队列头端：   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    elements[head = (head - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)] = e; <span class="comment">// 根据头索引，添加到头端，头索引-1</span></div><div class="line">    <span class="keyword">if</span> (head == tail) <span class="comment">// 如果头索引和尾索引重复了，说明数组满了，进行扩容</span></div><div class="line">        doubleCapacity();            </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="remove操作"><a href="#remove操作" class="headerlink" title="remove操作"></a>remove操作</h3><p>remove操作分别removeFirst和removeLast，removeLast代码如下：   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    E x = pollLast(); <span class="comment">// 调用pollLast方法</span></div><div class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t = (tail - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>); <span class="comment">// 尾索引 -1</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    E result = (E) elements[t]; <span class="comment">// 根据尾索引，得到尾元素</span></div><div class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    elements[t] = <span class="keyword">null</span>; <span class="comment">// 尾元素置空</span></div><div class="line">    tail = t;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>removeFirst方法原理一样，remove头元素。 头索引 +1   </p>
<p><img src="http://7x2wh6.com1.z0.glb.clouddn.com/arraydeque02.jpg" alt="">   </p>
<h3 id="作为Stack使用"><a href="#作为Stack使用" class="headerlink" title="作为Stack使用"></a>作为Stack使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayDeque&lt;String&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;String&gt;(<span class="number">4</span>);</div><div class="line">stack.push(<span class="string">"1"</span>);</div><div class="line">stack.push(<span class="string">"2"</span>);</div><div class="line">stack.push(<span class="string">"3"</span>);</div><div class="line">String pop = stack.pop(); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>push方法内部调用addFirst方法，pop方法内部调用removeFirst方法。   </p>
<p><img src="http://7x2wh6.com1.z0.glb.clouddn.com/arraydeque04.jpg" alt="">   </p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li><code>ArrayDeque</code>是一个使用循环数组实现的双向队列，<code>LinkedList</code>也是一个双向队列，不过它的底层实现是使用链表   </li>
<li><code>ArrayDeque</code>的扩容会把数组容量扩大2倍，同时还会重置头索引和尾索引   </li>
<li><code>Deque</code>双向队列接口同时也实现了<code>Stack</code>接口，可以把<code>Deque</code>当成<code>Stack</code>使用，它的速度比<code>java.util.Stack</code>要快，因为<code>Stack</code>底层操作数据会加锁，而<code>Deque</code>不会加锁   </li>
<li><code>ArrayDeque</code>不是一个线程安全的类   </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Deque接口(双向队列)的两个主要实现类是&lt;code&gt;ArrayDeque&lt;/code&gt;和&lt;code&gt;LinkedList&lt;/code&gt;       &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ArrayDeque底层使用循环数组实现双向队列         &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ArrayDeque内部使用的循环数组的容量，当首次进行初始化的时候，最小容量为8，如果超过8，扩大成2的幂            &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 调用带有容量参数的构造函数后，数组初始化过程&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;allocateElements&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numElements)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; initialCapacity = MIN_INITIAL_CAPACITY; &lt;span class=&quot;comment&quot;&gt;// 最小容量为8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (numElements &amp;gt;= initialCapacity) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 如果要分配的容量大于等于8，扩大成2的幂；否则使用最小容量8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        initialCapacity = numElements;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        initialCapacity |= (initialCapacity &amp;gt;&amp;gt;&amp;gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        initialCapacity |= (initialCapacity &amp;gt;&amp;gt;&amp;gt;  &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        initialCapacity |= (initialCapacity &amp;gt;&amp;gt;&amp;gt;  &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        initialCapacity |= (initialCapacity &amp;gt;&amp;gt;&amp;gt;  &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        initialCapacity |= (initialCapacity &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        initialCapacity++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (initialCapacity &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            initialCapacity &amp;gt;&amp;gt;&amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    elements = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Object[initialCapacity]; &lt;span class=&quot;comment&quot;&gt;// 构造数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>LinkedHashMap原理学习</title>
    <link href="http://yoursite.com/2016/09/13/LinkedHashMap%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/09/13/LinkedHashMap原理学习/</id>
    <published>2016-09-13T14:36:22.000Z</published>
    <updated>2017-03-11T02:04:27.367Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>LinkedHashMap的迭代输出的结果保持了插入顺序。    </li>
<li>LinkedHashMap是Hash表和链表的实现，并且依靠着双向链表保证了迭代顺序是插入的顺序。      </li>
<li><p>根据链表中元素的顺序可以分为：    </p>
<ul>
<li>按插入顺序的链表   </li>
<li><p>按访问顺序(调用 get 方法)的链表。   </p>
<p>默认是按插入顺序排序，如果指定按访问顺序排序，那么调用get方法后，会将这次访问的元素移至链表尾部，不断访问可以形成按访问顺序排序的链表。      </p>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LinkedHashMap(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)   </div><div class="line">LinkedHashMap(<span class="keyword">int</span> initialCapacity)   </div><div class="line">LinkedHashMap()   </div><div class="line">LinkedHashMap(Map&lt;? extends K, ? extends V&gt; m)   </div><div class="line">LinkedHashMap(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> accessOrder)</div></pre></td></tr></table></figure>
<p><code>accessOrder</code> 这个参数，如果不设置，<strong>默认为 <code>false</code></strong>，代表按照插入顺序进行迭代；当然可以显式设置为<code>true</code>，代表以访问顺序进行迭代。      </p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">LinkedHashMap&lt;String, Integer&gt; lmap = <span class="keyword">new</span> LinkedHashMap&lt;String, Integer&gt;();</div><div class="line">lmap.put(<span class="string">"语文"</span>, <span class="number">1</span>);</div><div class="line">lmap.put(<span class="string">"数学"</span>, <span class="number">2</span>);</div><div class="line">lmap.put(<span class="string">"英语"</span>, <span class="number">3</span>);</div><div class="line">lmap.put(<span class="string">"历史"</span>, <span class="number">4</span>);</div><div class="line">lmap.put(<span class="string">"政治"</span>, <span class="number">5</span>);</div><div class="line">lmap.put(<span class="string">"地理"</span>, <span class="number">6</span>);</div><div class="line">lmap.put(<span class="string">"生物"</span>, <span class="number">7</span>);</div><div class="line">lmap.put(<span class="string">"化学"</span>, <span class="number">8</span>);</div><div class="line"><span class="keyword">for</span>(Entry&lt;String, Integer&gt; entry : lmap.entrySet()) &#123;</div><div class="line">    System.out.println(entry.getKey() + <span class="string">": "</span> + entry.getValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果    </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">语文: <span class="number">1</span></div><div class="line">数学: <span class="number">2</span></div><div class="line">英语: <span class="number">3</span></div><div class="line">历史: <span class="number">4</span></div><div class="line">政治: <span class="number">5</span></div><div class="line">地理: <span class="number">6</span></div><div class="line">生物: <span class="number">7</span></div><div class="line">化学: <span class="number">8</span></div></pre></td></tr></table></figure>
<h4 id="LinkedHashMap的内部结构"><a href="#LinkedHashMap的内部结构" class="headerlink" title="LinkedHashMap的内部结构"></a>LinkedHashMap的内部结构</h4><p><img src="https://cloud.githubusercontent.com/assets/1736354/6981649/03eb9014-da38-11e4-9cbf-03d9c21f05f2.png" alt="">        </p>
<h3 id="三个重点实现的函数"><a href="#三个重点实现的函数" class="headerlink" title="三个重点实现的函数"></a>三个重点实现的函数</h3><p>在HashMap中提到了下面的定义：   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Callbacks to allow LinkedHashMap post-actions</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>
<p>LinkedHashMap继承于HashMap，因此也重新实现了这3个函数，顾名思义这三个函数的作用分别是：节点访问后、节点插入后、节点移除后做一些事情。     </p>
<p>在LinkedHashMap中，上面3个函数都是为了保证双向链表中的节点次序或者双向链表容量所做的一些额外的事情，<strong>目的就是保持双向链表中节点的顺序（head -&gt; tail）是 eldest 到 youngest。</strong>       </p>
<h4 id="afterNodeAccess函数"><a href="#afterNodeAccess函数" class="headerlink" title="afterNodeAccess函数"></a>afterNodeAccess函数</h4><p>在进行put之后就算是对节点的访问了，那么这个时候就会更新链表，把最近访问的放到最后，保证链表。     </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</div><div class="line">    <span class="comment">// 如果定义了accessOrder，那么就保证最近访问节点放到最后</span></div><div class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</div><div class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</div><div class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</div><div class="line">        p.after = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</div><div class="line">            head = a;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            b.after = a;</div><div class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>)</div><div class="line">            a.before = b;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            last = b;</div><div class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</div><div class="line">            head = p;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            p.before = last;</div><div class="line">            last.after = p;</div><div class="line">        &#125;</div><div class="line">        tail = p;</div><div class="line">        ++modCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="afterNodeInsertion函数"><a href="#afterNodeInsertion函数" class="headerlink" title="afterNodeInsertion函数"></a>afterNodeInsertion函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; <span class="comment">// possibly remove eldest</span></div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; first;</div><div class="line">    <span class="comment">// 如果定义了移除规则，则执行相应的溢出</span></div><div class="line">    <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="keyword">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</div><div class="line">        K key = first.key;</div><div class="line">        removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果用户定义了<code>removeEldestEntry</code>的规则，那么便可以执行相应的移除操作，<strong>而原始方法默认不需要移除</strong>，如果要实现一个LRU的缓存可以这么定义<code>removeEldestEntry</code>          </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> size() &gt; size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="afterNodeRemoval函数"><a href="#afterNodeRemoval函数" class="headerlink" title="afterNodeRemoval函数"></a>afterNodeRemoval函数</h4><p>这个函数是在移除节点后调用的，就是将节点从双向链表中删除。   </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// unlink</span></div><div class="line">    <span class="comment">// 从链表中移除节点</span></div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; p =</div><div class="line">        (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</div><div class="line">    p.before = p.after = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (b == <span class="keyword">null</span>)</div><div class="line">        head = a;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        b.after = a;</div><div class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span>)</div><div class="line">        tail = b;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        a.before = b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="put和get函数"><a href="#put和get函数" class="headerlink" title="put和get函数"></a>put和get函数</h3><p><code>put</code>函数在LinkedHashMap中未重新实现，只是实现了<code>afterNodeAccess</code>和<code>afterNodeInsertion</code>两个回调函数。get函数则重新实现并加入了<code>afterNodeAccess</code>来保证访问顺序，下面是get函数的具体实现：       </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; e;</div><div class="line">    <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (accessOrder)</div><div class="line">        afterNodeAccess(e);</div><div class="line">    <span class="keyword">return</span> e.value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>值得注意的是，在accessOrder模式下，只要执行get或者put等操作的时候，就会产生structural modification。     </p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;LinkedHashMap的迭代输出的结果保持了插入顺序。    &lt;/li&gt;
&lt;li&gt;LinkedHashMap是Hash表和链表的实现，并且依靠着双向链表保证了迭代顺序是插入的顺序。      &lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据链表中元素的顺序可以分为：    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按插入顺序的链表   &lt;/li&gt;
&lt;li&gt;&lt;p&gt;按访问顺序(调用 get 方法)的链表。   &lt;/p&gt;
&lt;p&gt;默认是按插入顺序排序，如果指定按访问顺序排序，那么调用get方法后，会将这次访问的元素移至链表尾部，不断访问可以形成按访问顺序排序的链表。      &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="容器" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket数据编码</title>
    <link href="http://yoursite.com/2016/07/25/WebSocket%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81/"/>
    <id>http://yoursite.com/2016/07/25/WebSocket数据编码/</id>
    <published>2016-07-25T09:22:39.000Z</published>
    <updated>2017-03-06T11:02:31.919Z</updated>
    
    <content type="html"><![CDATA[<p>WebSocket传输的数据都是以Frame（帧）的形式实现的，就像TCP/UDP协议中的报文段Segment。下面就是一个Frame：（以bit为单位表示）   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> 0                   1                   2                   3</div><div class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</div><div class="line">+-+-+-+-+-------+-+-------------+-------------------------------+</div><div class="line">|F|R|R|R| opcode|M| Payload len |    Extended payload length    |</div><div class="line">|I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |</div><div class="line">|N|V|V|V|       |S|             |   (if payload len==126/127)   |</div><div class="line">| |1|2|3|       |K|             |                               |</div><div class="line">+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</div><div class="line">|     Extended payload length continued, if payload len == 127  |</div><div class="line">+ - - - - - - - - - - - - - - - +-------------------------------+</div><div class="line">|                               |Masking-key, if MASK set to 1  |</div><div class="line">+-------------------------------+-------------------------------+</div><div class="line">| Masking-key (continued)       |          Payload Data         |</div><div class="line">+-------------------------------- - - - - - - - - - - - - - - - +</div><div class="line">:                     Payload Data continued ...                :</div><div class="line">+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</div><div class="line">|                     Payload Data continued ...                |</div><div class="line">+---------------------------------------------------------------+</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="各字段解释"><a href="#各字段解释" class="headerlink" title="各字段解释"></a>各字段解释</h3><h4 id="FIN：1-bit"><a href="#FIN：1-bit" class="headerlink" title="FIN：1 bit"></a>FIN：1 bit</h4><p>表示这是一个消息的最后的一帧。第一个帧也可能是最后一个。    </p>
<ul>
<li>0 : 还有后续帧     </li>
<li>1 : 最后一帧    </li>
</ul>
<h4 id="RSV1、2、3：-1-bit-each"><a href="#RSV1、2、3：-1-bit-each" class="headerlink" title="RSV1、2、3： 1 bit each"></a>RSV1、2、3： 1 bit each</h4><p>除非一个扩展经过协商赋予了非零值以某种含义，否则必须为0<br>如果没有定义非零值，并且收到了非零的RSV，则websocket链接会失败    </p>
<h4 id="Opcode：-4-bit"><a href="#Opcode：-4-bit" class="headerlink" title="Opcode： 4 bit"></a>Opcode： 4 bit</h4><p>解释说明 “Payload data” 的用途/功能<br>如果收到了未知的opcode，最后会断开链接<br>定义了以下几个opcode值:   </p>
<ul>
<li>0 : 代表连续的帧   </li>
<li>1 : text帧   </li>
<li>2 ： binary帧      </li>
<li>3-7 ： 为非控制帧而预留的     </li>
<li>8 ： 关闭握手帧    </li>
<li>9 ： ping帧    </li>
<li>A :  pong帧      </li>
<li>B-F ： 为非控制帧而预留的     </li>
</ul>
<h4 id="Mask：-1-bit"><a href="#Mask：-1-bit" class="headerlink" title="Mask： 1 bit"></a>Mask： 1 bit</h4><p>定义“payload data”是否被添加掩码<br>如果置1， “Masking-key”就会被赋值<br><strong>所有从客户端发往服务器的帧都会被置1</strong>        </p>
<h4 id="Payload-length：-7-bit-7-16-bit-7-64-bit"><a href="#Payload-length：-7-bit-7-16-bit-7-64-bit" class="headerlink" title="Payload length： 7 bit | 7+16 bit | 7+64 bit"></a>Payload length： 7 bit | 7+16 bit | 7+64 bit</h4><ul>
<li>payload data 的长度如果在0~125 bytes范围内，它就是payload length，  </li>
<li>如果是126， 紧随其后的被表示为16 bits的2 bytes无符号整型就是payload length，     </li>
<li>如果是127， 紧随其后的被表示为64 bits的8 bytes无符号整型就是payload length   </li>
</ul>
<h4 id="Masking-key：-0-or-4-bytes"><a href="#Masking-key：-0-or-4-bytes" class="headerlink" title="Masking-key： 0 or 4 bytes"></a>Masking-key： 0 or 4 bytes</h4><p>所有从客户端发送到服务器的帧都包含一个32 bits的掩码（如果“mask bit”被设置成1），否则为0 bit。<br>一旦掩码被设置，所有接收到的payload data都必须与该值以一种算法做异或运算来获取真实值。   </p>
<h4 id="Payload-data-x-y-bytes"><a href="#Payload-data-x-y-bytes" class="headerlink" title="Payload data: (x+y) bytes"></a>Payload data: (x+y) bytes</h4><p>它是”Extension data”和”Application data”的总和，一般扩展数据为空。</p>
<h4 id="Extension-data-x-bytes"><a href="#Extension-data-x-bytes" class="headerlink" title="Extension data: x bytes"></a>Extension data: x bytes</h4><ul>
<li>除非扩展被定义，否则就是0   </li>
<li>任何扩展必须指定其Extension data的长度   </li>
</ul>
<h4 id="Application-data-y-bytes"><a href="#Application-data-y-bytes" class="headerlink" title="Application data: y bytes"></a>Application data: y bytes</h4><p>占据”Extension data”之后的剩余帧的空间   </p>
<h2 id="Masking"><a href="#Masking" class="headerlink" title="Masking"></a>Masking</h2><p>当mask字段的值为1时，payload-data字段的数据需要经这个掩码进行解密。   </p>
<ul>
<li>服务器推送到客户端的消息中，mask字段是0,也就是说Masking-key为空。这样的话，数据的解析就不涉及到掩码，直接使用就行。    </li>
<li>如果消息是从客户端发送到服务器，那么mask一定是1,Masking-key一定是一个32bit的值。    </li>
</ul>
<p>下面为mask为1的一个例子   </p>
<p>当读取到payload-data时，首先将数据按byte依次与Masking-key中的4个byte按照如下算法做异或。    </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">maskPayload</span><span class="params">(<span class="keyword">byte</span>[] payload)</span> </span>&#123;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;payload.length;i++)&#123;</div><div class="line">        payload[i]^=mask[i%<span class="number">4</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="帧的类别"><a href="#帧的类别" class="headerlink" title="帧的类别"></a>帧的类别</h2><h3 id="控制帧"><a href="#控制帧" class="headerlink" title="控制帧"></a>控制帧</h3><ul>
<li>控制帧用来说明WebSocket的状态信息，用来控制分片、连接的关闭等等。所有的控制帧必须有一个小于等于125字节的payload，并且control Frames不允许被分片。     </li>
<li>Opcode为0x0（持续的帧），0x8（关闭连接），0x9（Ping帧）和0xA（Pong帧）代表控制帧     </li>
</ul>
<h3 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h3><p>前面我们总是谈到“控制帧”和“非控制帧”，想必大家已經看出来一些门路。其实数据帧就是非控制帧。因为这个帧并不是用来提供协议连接状态信息的。<br>数据帧由最高符号位是0的Opcode确定，现在可用的几个数据帧的Opcode是0x1（utf-8文本）、0x2（二进制数据）。      </p>
<h2 id="分片（Fragment）"><a href="#分片（Fragment）" class="headerlink" title="分片（Fragment）"></a>分片（Fragment）</h2><p>理论上来说，每个帧（Frame）的大小是没有限制的，因为payload-data在整个帧的最后。但是发送的数据有不能太大，否则 WebSocket 很可能无法高效的利用网络带宽。那如果我们想传点大数据该怎么办呢？WebSocket协议给我们提供了一个方法：分片，将原本一个大的帧拆分成数个小的帧。下面是把一个大的Frame分片的图示：   </p>
<blockquote>
<p> 编号：      0  1  ….  n-2 n-1<br>  分片：     |——|——|……|——|——|<br>  FIN：      0  0  ….   0  1<br>  Opcode：   !0 0  ….   0  0   </p>
</blockquote>
<p>由图可知，    </p>
<ul>
<li>第一个分片的FIN为0，Opcode为非0值（0x1或0x2）   </li>
<li>最后一个分片的FIN为1，Opcode为0    </li>
<li>中间分片的FIN和Opcode二者均为0     </li>
</ul>
<h2 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h2><p>正常的连接关闭流程   </p>
<ol>
<li>发送关闭连接请求（Close Handshake）<br>即发送Close Frame（Opcode为0x8）。一旦一端发送/接收了一个Close Frame，就开始了Close Handshake，并且连接状态变为Closing。   </li>
<li>Close Frame中如果包含Payload data，则data的前2字节必须为两字节的无符号整形，（同样遵循网络字节序：BE）用于表示状态码，如果2byte之后仍有内容，则应包含utf-8编码的关闭理由。     </li>
<li>如果一端在之前未发送过Close Frame，则当他收到一个Close Frame时，必须回复一个Close Frame。但如果它正在发送数据，则可以推迟到当前数据发送完，再发送Close Frame。比如Close Frame在分片发送时到达，则要等到所有剩余分片发送完之后，才可以作出回复。   </li>
<li>关闭WebSocket连接   </li>
<li>当一端已经收到Close Frame，并已发送了Close Frame时，就可以关闭连接了，close handshake过程结束。这时丢弃所有已经接收到的末尾字节。   </li>
<li>关闭TCP连接   </li>
<li>当底层TCP连接关闭时，连接状态变为Closed。     </li>
</ol>
<h3 id="clean-closed"><a href="#clean-closed" class="headerlink" title="clean closed"></a>clean closed</h3><ul>
<li>如果TCP连接在Close handshake完成之后关闭，就表示WebSocket连接已经clean closed（彻底关闭）了。   </li>
<li>如果WebSocket连接并未成功建立，状态也为连接已关闭，但并不是clean closed。   </li>
</ul>
<h3 id="正常关闭"><a href="#正常关闭" class="headerlink" title="正常关闭"></a>正常关闭</h3><p>正常关闭过程属于clean close，应当包含close handshake。  </p>
<p>通常来讲，应该由服务器关闭底层TCP连接，而客户端应该等待服务器关闭连接，除非等待超时的话，那么自己关闭底层TCP连接。    </p>
<h3 id="异常关闭"><a href="#异常关闭" class="headerlink" title="异常关闭"></a>异常关闭</h3><p>由于某种算法或规定，一端直接关闭连接。（特指在open handshake（打开连接）阶段）<br>底层连接丢失导致的连接中断。 </p>
<h3 id="连接失败"><a href="#连接失败" class="headerlink" title="连接失败"></a>连接失败</h3><p>由于某种算法或规范要求指定连接失败。这时，客户端和服务器必须关闭WebSocket连接。当一端得知连接失败时，不准再处理数据，包括响应close frame。     </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WebSocket传输的数据都是以Frame（帧）的形式实现的，就像TCP/UDP协议中的报文段Segment。下面就是一个Frame：（以bit为单位表示）   &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; 0                   1                   2                   3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+-+-+-+-+-------+-+-------------+-------------------------------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|F|R|R|R| opcode|M| Payload len |    Extended payload length    |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|N|V|V|V|       |S|             |   (if payload len==126/127)   |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| |1|2|3|       |K|             |                               |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|     Extended payload length continued, if payload len == 127  |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ - - - - - - - - - - - - - - - +-------------------------------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|                               |Masking-key, if MASK set to 1  |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+-------------------------------+-------------------------------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| Masking-key (continued)       |          Payload Data         |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+-------------------------------- - - - - - - - - - - - - - - - +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;:                     Payload Data continued ...                :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|                     Payload Data continued ...                |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------------------------------------------------------+&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="网络协议" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="WebSocket" scheme="http://yoursite.com/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket握手</title>
    <link href="http://yoursite.com/2016/07/18/WebSocket%E6%8F%A1%E6%89%8B/"/>
    <id>http://yoursite.com/2016/07/18/WebSocket握手/</id>
    <published>2016-07-18T13:53:38.000Z</published>
    <updated>2017-03-06T11:02:29.039Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WebSocket是基于HTTP协议的，具体建立连接的过程如下："><a href="#WebSocket是基于HTTP协议的，具体建立连接的过程如下：" class="headerlink" title="WebSocket是基于HTTP协议的，具体建立连接的过程如下："></a>WebSocket是基于HTTP协议的，具体建立连接的过程如下：</h3><ol>
<li>TCP三次握手建立一个连接    </li>
<li>发生HTTP协议的握手请求，请求把协议升级为WebSocket       </li>
<li>服务端接收到握手请求后，返回HTTP响应允许协议升级为WebSocket       </li>
<li>客户端和服务端在该连接中以后都用WebSocket协议发生信息和接受信息      </li>
<li>关闭TCP连接    </li>
</ol>
<h3 id="WebSocket握手请求"><a href="#WebSocket握手请求" class="headerlink" title="WebSocket握手请求"></a>WebSocket握手请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /chat HTTP/1.1</div><div class="line">Host: server.example.com</div><div class="line">Upgrade: websocket</div><div class="line">Connection: Upgrade</div><div class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</div><div class="line">Sec-WebSocket-Protocol: chat, superchat</div><div class="line">Sec-WebSocket-Version: 13</div><div class="line">Origin: http://example.com</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="相关字段解释"><a href="#相关字段解释" class="headerlink" title="相关字段解释"></a>相关字段解释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Upgrade: websocket</div><div class="line">Connection: Upgrade</div></pre></td></tr></table></figure>
<ul>
<li>告诉服务器我请求用WebSocket协议       </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</div><div class="line">Sec-WebSocket-Protocol: chat, superchat</div><div class="line">Sec-WebSocket-Version: 13</div></pre></td></tr></table></figure>
<ul>
<li><code>Sec-WebSocket-Key</code> 是一个Base64 encode的值，这个是浏览器随机生成的<br>服务端并不需要将这个值进行反编码，只需要将客户端传来的这个值首先去除首尾的空白，然后和一段固定的 GUID RFC4122 字符串进行连接，固定的 GUID 字符串为 258EAFA5-E914-47DA-95CA-C5AB0DC85B11。连接后的结果使用 SHA-1（160数位）FIPS.180-3 进行一个哈希操作，对哈希操作的结果，采用 base64 进行编码，然后作为服务端响应握手的一部分返回给浏览器。    </li>
</ul>
<p>一个具体的例子：</p>
<ol>
<li>客户端握手请求中的 <code>Sec-WebSocket-Key</code> 头字段的值为 <code>dGhlIHNhbXBsZSBub25jZQ==</code>   </li>
<li>服务端在解析了握手请求的头字段之后，得到 <code>Sec-WebSocket-Key</code> 字段的内容为 <code>dGhlIHNhbXBsZSBub25jZQ==</code>，注意前后没有空白     </li>
<li>将 <code>dGhlIHNhbXBsZSBub25jZQ==</code> 和一段固定的 GUID 字符串进行连接，新的字符串为 <code>dGhlIHNhbXBsZSBub25jZQ==258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>。   </li>
<li>使用 SHA-1 哈希算法对上一步中新的字符串进行哈希。得到哈希后的内容为（使用 16 进制的数表示每一个字节中内容）：<code>0xb3 0x7a 0x4f 0x2c 0xc0 0x62 0x4f 0x16 0x90 0xf6 0x46 0x06 0xcf 0x38 0x59 0x45 0xb2 0xbe 0xc4 0xea</code>     </li>
<li>对上一步得到的哈希后的字节，使用 <code>base64</code> 编码，得到最后的字符串<code>s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</code>       </li>
<li>最后得到的字符串，需要放到服务端响应客户端握手的头字段 <code>Sec-WebSocket-Accept</code> 中。        </li>
</ol>
<ul>
<li><code>Sec_WebSocket-Protocol</code> 是一个用户定义的字符串，用来区分同URL下，不同的服务所需要的子协议。   </li>
<li><code>Sec-WebSocket-Version</code> 是告诉服务器所使用的Websocket Draft（协议版本）   </li>
</ul>
<h3 id="WebSocket握手的响应"><a href="#WebSocket握手的响应" class="headerlink" title="WebSocket握手的响应"></a>WebSocket握手的响应</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 101 Switching Protocols</div><div class="line">Upgrade: websocket</div><div class="line">Connection: Upgrade</div><div class="line">Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=</div><div class="line">Sec-WebSocket-Protocol: chat</div></pre></td></tr></table></figure>
<p>由服务端告诉客户端即将升级的是WebSocket协议。<br>然后，<code>Sec-WebSocket-Accept</code> 这个则是经过服务器确认，并且加密过后的 <code>Sec-WebSocket-Key</code>。<br><code>Sec-WebSocket-Protocol</code> 则是表示最终使用的协议     </p>
<p><strong>只有握手还是走HTTP结束，在握手结束后的通信全都是走WebSocket协议，不是HTTP了。</strong>           </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;WebSocket是基于HTTP协议的，具体建立连接的过程如下：&quot;&gt;&lt;a href=&quot;#WebSocket是基于HTTP协议的，具体建立连接的过程如下：&quot; class=&quot;headerlink&quot; title=&quot;WebSocket是基于HTTP协议的，具体建立连接的过程如下：&quot;&gt;&lt;/a&gt;WebSocket是基于HTTP协议的，具体建立连接的过程如下：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;TCP三次握手建立一个连接    &lt;/li&gt;
&lt;li&gt;发生HTTP协议的握手请求，请求把协议升级为WebSocket       &lt;/li&gt;
&lt;li&gt;服务端接收到握手请求后，返回HTTP响应允许协议升级为WebSocket       &lt;/li&gt;
&lt;li&gt;客户端和服务端在该连接中以后都用WebSocket协议发生信息和接受信息      &lt;/li&gt;
&lt;li&gt;关闭TCP连接    &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;WebSocket握手请求&quot;&gt;&lt;a href=&quot;#WebSocket握手请求&quot; class=&quot;headerlink&quot; title=&quot;WebSocket握手请求&quot;&gt;&lt;/a&gt;WebSocket握手请求&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;GET /chat HTTP/1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Host: server.example.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Upgrade: websocket&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Connection: Upgrade&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sec-WebSocket-Protocol: chat, superchat&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sec-WebSocket-Version: 13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Origin: http://example.com&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="网络协议" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="WebSocket" scheme="http://yoursite.com/tags/WebSocket/"/>
    
  </entry>
  
</feed>
